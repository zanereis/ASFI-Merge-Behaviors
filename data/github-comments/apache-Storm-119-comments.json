[{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610720","html_url":"https://github.com/apache/storm/issues/4943#issuecomment-2612610720","issue_url":"https://api.github.com/repos/apache/storm/issues/4943","id":2612610720,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA3MjA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T14:47:30Z","updated_at":"2025-01-24T14:05:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user harshach commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/796#issuecomment-147737771\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/796#issuecomment-147737771</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610720/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147739297","html_url":"https://github.com/apache/storm/pull/795#issuecomment-147739297","issue_url":"https://api.github.com/repos/apache/storm/issues/795","id":147739297,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NzczOTI5Nw==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T14:52:13Z","updated_at":"2015-10-13T14:52:13Z","author_association":"CONTRIBUTOR","body":"The Travis build failure on 1.8 seems unrelated.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147739297/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610832","html_url":"https://github.com/apache/storm/issues/4944#issuecomment-2612610832","issue_url":"https://api.github.com/repos/apache/storm/issues/4944","id":2612610832,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA4MzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T14:52:14Z","updated_at":"2025-01-24T14:05:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kishorvpatil commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/795#issuecomment-147739297\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/795#issuecomment-147739297</a></p>\n\n<p>    The Travis build failure on 1.8 seems unrelated.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610832/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147752280","html_url":"https://github.com/apache/storm/pull/785#issuecomment-147752280","issue_url":"https://api.github.com/repos/apache/storm/issues/785","id":147752280,"node_id":"MDEyOklzc3VlQ29tbWVudDE0Nzc1MjI4MA==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T15:33:38Z","updated_at":"2015-10-13T15:33:38Z","author_association":"CONTRIBUTOR","body":"@knusbaum @d2r @zhuoliu @rfarivar Can review this PR? Thanks!\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147752280/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607322","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607322","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607322,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczMjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T15:33:39Z","updated_at":"2025-01-24T14:03:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#issuecomment-147752280\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#issuecomment-147752280</a></p>\n\n<p>    @knusbaum @d2r @zhuoliu @rfarivar Can review this PR? Thanks!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607322/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607323","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607323","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607323,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczMjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T15:57:37Z","updated_at":"2025-01-24T14:03:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r41886199\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r41886199</a></p>\n\n<p>    &#8212; Diff: storm-core/test/jvm/backtype/storm/TestConfigValidate.java &#8212;<br/>\n    @@ -0,0 +1,137 @@<br/>\n    +package backtype.storm;<br/>\n    +<br/>\n    +import backtype.storm.utils.Utils;<br/>\n    +import org.junit.Test;<br/>\n    +import org.junit.Assert;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import backtype.storm.validation.ConfigValidationAnnotations;<br/>\n    +import backtype.storm.validation.ConfigValidation;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.Arrays;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.LinkedList;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Created by jerrypeng on 10/1/15.<br/>\n    + */<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    remove?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607327","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607327","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607327,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczMjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T16:00:52Z","updated_at":"2025-01-24T14:03:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r41886669\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r41886669</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidationAnnotations.java &#8212;<br/>\n    @@ -0,0 +1,205 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p><br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    There are several places where it seems an IDE has added these HTML tags to the license header.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147760574","html_url":"https://github.com/apache/storm/pull/790#issuecomment-147760574","issue_url":"https://api.github.com/repos/apache/storm/issues/790","id":147760574,"node_id":"MDEyOklzc3VlQ29tbWVudDE0Nzc2MDU3NA==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T16:03:35Z","updated_at":"2015-10-13T16:03:50Z","author_association":"NONE","body":"May I also have @revans2 @rfarivar @knusbaum @d2r to review this pull request if you are available? Thanks.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147760574/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612608867","html_url":"https://github.com/apache/storm/issues/4931#issuecomment-2612608867","issue_url":"https://api.github.com/repos/apache/storm/issues/4931","id":2612608867,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDg4Njc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T16:03:36Z","updated_at":"2025-01-24T14:04:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/790#issuecomment-147760574\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/790#issuecomment-147760574</a></p>\n\n<p>    May I also have @revans2 @rfarivar @knusbaum @d2r to review this pull request if you are available?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612608867/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147760999","html_url":"https://github.com/apache/storm/pull/785#issuecomment-147760999","issue_url":"https://api.github.com/repos/apache/storm/issues/785","id":147760999,"node_id":"MDEyOklzc3VlQ29tbWVudDE0Nzc2MDk5OQ==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T16:05:19Z","updated_at":"2015-10-13T16:05:19Z","author_association":"NONE","body":"It seems ConfigValidation was changed on master since the merge base for this branch. Need to check.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147760999/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607332","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607332","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607332,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczMzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T16:05:21Z","updated_at":"2025-01-24T14:03:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#issuecomment-147760999\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#issuecomment-147760999</a></p>\n\n<p>    It seems ConfigValidation was changed on master since the merge base for this branch. Need to check.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607332/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611245","html_url":"https://github.com/apache/storm/issues/4947#issuecomment-2612611245","issue_url":"https://api.github.com/repos/apache/storm/issues/4947","id":2612611245,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTEyNDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T16:23:25Z","updated_at":"2025-01-24T14:05:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kraks\" class=\"user-hover\" rel=\"kraks\">rakesh</a>,</p>\n\n<p>I think this is the worker and not the supervisor that is crashing.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611245/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611250","html_url":"https://github.com/apache/storm/issues/4947#issuecomment-2612611250","issue_url":"https://api.github.com/repos/apache/storm/issues/4947","id":2612611250,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTEyNTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T16:29:11Z","updated_at":"2025-01-24T14:05:21Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=kraks\">kraks</a>:</i>\n<p>Its both actually, I have provided the error that I see in  supervisor.log in the issue description just below the worker log stack trace.</p>\n\n<p>we run storm-supervisor with supervisord, with 999 retries but it wont comeback.<br/>\nHowever, if we clear the supervisor state by clearing the folders/files under storm/supervisor and start the supervisor it comes back</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611250/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607339","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607339","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607339,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczMzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T17:38:09Z","updated_at":"2025-01-24T14:03:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r41898751\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r41898751</a></p>\n\n<p>    &#8212; Diff: storm-core/test/jvm/backtype/storm/TestConfigValidate.java &#8212;<br/>\n    @@ -0,0 +1,137 @@<br/>\n    +package backtype.storm;<br/>\n    +<br/>\n    +import backtype.storm.utils.Utils;<br/>\n    +import org.junit.Test;<br/>\n    +import org.junit.Assert;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import backtype.storm.validation.ConfigValidationAnnotations;<br/>\n    +import backtype.storm.validation.ConfigValidation;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.Arrays;<br/>\n    +import java.util.Collection;<br/>\n    +import java.util.HashMap;<br/>\n    +import java.util.LinkedList;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Created by jerrypeng on 10/1/15.<br/>\n    + */<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607339/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607346","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607346","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607346,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczNDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T17:38:15Z","updated_at":"2025-01-24T14:03:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r41898760\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r41898760</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidationAnnotations.java &#8212;<br/>\n    @@ -0,0 +1,205 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p><br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will remove</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607346/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610835","html_url":"https://github.com/apache/storm/issues/4944#issuecomment-2612610835","issue_url":"https://api.github.com/repos/apache/storm/issues/4944","id":2612610835,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA4MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T18:04:16Z","updated_at":"2025-01-24T14:05:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/795#discussion_r41902116\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/795#discussion_r41902116</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -134,7 +128,7 @@<br/>\n     LOG.info(\"creating Netty Client, connecting to {}:{}, bufferSize: {}\", host, port, bufferSize);<br/>\n     int messageBatchSize = Utils.getInt(stormConf.get(Config.STORM_NETTY_MESSAGE_BATCH_SIZE), 262144);</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>maxReconnectionAttempts = Utils.getInt(stormConf.get(Config.STORM_MESSAGING_NETTY_MAX_RETRIES));<br/>\n    +int maxReconnectionAttempts = Utils.getInt(stormConf.get(Config.STORM_MESSAGING_NETTY_MAX_RETRIES));\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    If this config does not make sense anymore, should we stop using it in the code?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610835/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610837","html_url":"https://github.com/apache/storm/issues/4944#issuecomment-2612610837","issue_url":"https://api.github.com/repos/apache/storm/issues/4944","id":2612610837,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA4Mzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T18:17:48Z","updated_at":"2025-01-24T14:05:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/795#discussion_r41903879\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/795#discussion_r41903879</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -134,7 +128,7 @@<br/>\n     LOG.info(\"creating Netty Client, connecting to {}:{}, bufferSize: {}\", host, port, bufferSize);<br/>\n     int messageBatchSize = Utils.getInt(stormConf.get(Config.STORM_NETTY_MESSAGE_BATCH_SIZE), 262144);</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>maxReconnectionAttempts = Utils.getInt(stormConf.get(Config.STORM_MESSAGING_NETTY_MAX_RETRIES));<br/>\n    +int maxReconnectionAttempts = Utils.getInt(stormConf.get(Config.STORM_MESSAGING_NETTY_MAX_RETRIES));\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    > It would be nice to deprecate this and file a follow on JIRA so that we can use a better named/documented config in the backoff calculation</p>\n\n<p>    Disregard: I see from the above comment what we intend to do.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147801288","html_url":"https://github.com/apache/storm/pull/795#issuecomment-147801288","issue_url":"https://api.github.com/repos/apache/storm/issues/795","id":147801288,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NzgwMTI4OA==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T18:19:06Z","updated_at":"2015-10-13T18:19:06Z","author_association":"NONE","body":"+1 I would be good to address [STORM-1107](https://issues.apache.org/jira/browse/STORM-1107) before doing a subsequent release.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147801288/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610841","html_url":"https://github.com/apache/storm/issues/4944#issuecomment-2612610841","issue_url":"https://api.github.com/repos/apache/storm/issues/4944","id":2612610841,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA4NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T18:19:10Z","updated_at":"2025-01-24T14:05:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/795#issuecomment-147801288\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/795#issuecomment-147801288</a></p>\n\n<p>    +1 I would be good to address <a href=\"https://issues.apache.org/jira/browse/STORM-1107\" title=\"Remove deprecated Config STORM_MESSAGING_NETTY_MAX_RETRIES and fix Netty Client backoff calculations\" class=\"issue-link\" data-issue-key=\"STORM-1107\"><del>STORM-1107</del></a>(<a href=\"https://issues.apache.org/jira/browse/STORM-1107\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-1107</a>) before doing a subsequent release.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610841/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147824526","html_url":"https://github.com/apache/storm/pull/780#issuecomment-147824526","issue_url":"https://api.github.com/repos/apache/storm/issues/780","id":147824526,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NzgyNDUyNg==","user":{"login":"kleinsch","id":234464,"node_id":"MDQ6VXNlcjIzNDQ2NA==","avatar_url":"https://avatars.githubusercontent.com/u/234464?v=4","gravatar_id":"","url":"https://api.github.com/users/kleinsch","html_url":"https://github.com/kleinsch","followers_url":"https://api.github.com/users/kleinsch/followers","following_url":"https://api.github.com/users/kleinsch/following{/other_user}","gists_url":"https://api.github.com/users/kleinsch/gists{/gist_id}","starred_url":"https://api.github.com/users/kleinsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kleinsch/subscriptions","organizations_url":"https://api.github.com/users/kleinsch/orgs","repos_url":"https://api.github.com/users/kleinsch/repos","events_url":"https://api.github.com/users/kleinsch/events{/privacy}","received_events_url":"https://api.github.com/users/kleinsch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T19:30:25Z","updated_at":"2015-10-13T19:30:25Z","author_association":"NONE","body":"I've run the tests locally using `mvn install` and they pass using JDK7 and JDK8. Any tips for why the Travis build would pass for Java 8 but not for Java 7?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147824526/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607784","html_url":"https://github.com/apache/storm/issues/4924#issuecomment-2612607784","issue_url":"https://api.github.com/repos/apache/storm/issues/4924","id":2612607784,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc3ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T19:30:25Z","updated_at":"2025-01-24T14:03:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user kleinsch commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/780#issuecomment-147824526\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/780#issuecomment-147824526</a></p>\n\n<p>    I've run the tests locally using `mvn install` and they pass using JDK7 and JDK8. Any tips for why the Travis build would pass for Java 8 but not for Java 7?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607784/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147843854","html_url":"https://github.com/apache/storm/pull/792#issuecomment-147843854","issue_url":"https://api.github.com/repos/apache/storm/issues/792","id":147843854,"node_id":"MDEyOklzc3VlQ29tbWVudDE0Nzg0Mzg1NA==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T20:32:51Z","updated_at":"2015-10-13T20:32:51Z","author_association":"NONE","body":"+1. The CI failure for java 1.7 seems irrelevant.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147843854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610326","html_url":"https://github.com/apache/storm/issues/4940#issuecomment-2612610326","issue_url":"https://api.github.com/repos/apache/storm/issues/4940","id":2612610326,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTAzMjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-13T20:32:53Z","updated_at":"2025-01-24T14:04:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/792#issuecomment-147843854\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/792#issuecomment-147843854</a></p>\n\n<p>    +1. The CI failure for java 1.7 seems irrelevant.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610326/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147896620","html_url":"https://github.com/apache/storm/pull/795#issuecomment-147896620","issue_url":"https://api.github.com/repos/apache/storm/issues/795","id":147896620,"node_id":"MDEyOklzc3VlQ29tbWVudDE0Nzg5NjYyMA==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T01:06:39Z","updated_at":"2015-10-14T01:53:44Z","author_association":"CONTRIBUTOR","body":"@kishorvpatil \nFor confirming that I understood this issue well, I'd like you to elaborate this issue some more.\n\nAs far as I understand, when retry count exceeds, Connect.run() throws RuntimeException, but worker doesn't be killed since it is a TimerTask.\nSo it just closes the connection and wait for reassign for such worker.\n\nIf Nimbus reassigns dead worker to another after retry limit exceed, another connection is being made and it would be fine.\nBut some reason if problematic worker is just not able to connect (for example, STW, and so on) to another workers for longer than connection retrying but not forever, and nimbus doesn't reassign problematic worker, another workers cannot connect to problematic worker forever.\n\nIs my assumption right? (Or do I misunderstand Storm reconnect logic?) Or there's other reason?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147896620/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610844","html_url":"https://github.com/apache/storm/issues/4944#issuecomment-2612610844","issue_url":"https://api.github.com/repos/apache/storm/issues/4944","id":2612610844,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA4NDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T01:06:40Z","updated_at":"2025-01-24T14:05:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/795#issuecomment-147896620\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/795#issuecomment-147896620</a></p>\n\n<p>    @kishorvpatil <br/>\n    For confirming that I understood this issue well, I'd like you to elaborate this issue some more.</p>\n\n<p>    As far as I understand, when retry count exceeds, Connect.run() throws RuntimeException, but worker doesn't be killed since it is a TimerTask.<br/>\n    So it just closes the connection and wait for reassign for such worker.</p>\n\n<p>    If Nimbus reassigns dead worker to another after retry limit exceed, another connection is being made and it would be fine.<br/>\n    But some reason if problematic worker is just not able to connect (for example, STW, and so on) to another workers for longer than connection retrying but not forever, and nimbus doesn't reassign problematic worker, another workers cannot connect to problematic worker forever.</p>\n\n<p>    Is my assumption right? Or there's other reason?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610844/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147937919","html_url":"https://github.com/apache/storm/pull/705#issuecomment-147937919","issue_url":"https://api.github.com/repos/apache/storm/issues/705","id":147937919,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NzkzNzkxOQ==","user":{"login":"ooasis","id":10720176,"node_id":"MDQ6VXNlcjEwNzIwMTc2","avatar_url":"https://avatars.githubusercontent.com/u/10720176?v=4","gravatar_id":"","url":"https://api.github.com/users/ooasis","html_url":"https://github.com/ooasis","followers_url":"https://api.github.com/users/ooasis/followers","following_url":"https://api.github.com/users/ooasis/following{/other_user}","gists_url":"https://api.github.com/users/ooasis/gists{/gist_id}","starred_url":"https://api.github.com/users/ooasis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ooasis/subscriptions","organizations_url":"https://api.github.com/users/ooasis/orgs","repos_url":"https://api.github.com/users/ooasis/repos","events_url":"https://api.github.com/users/ooasis/events{/privacy}","received_events_url":"https://api.github.com/users/ooasis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T05:23:43Z","updated_at":"2015-10-14T05:23:43Z","author_association":"NONE","body":"@choang In recent changes, I have made it possible to plug in custom store implementations.  The custom implementation is given the opportunity to initialize itself by injecting two configuration objects into the constructor which takes the form like\n\n```\npublic MyStoreImpl(Map conf, SpoutConfig spoutConfig)\n```\n\nIn addition, I feel it is better to keep the implementation specific details, such as zookeeper quorum, inside the store implementation instead of leaving it to external class to build a implementation specific configuration object such as KafkaStoreConfig.   What do you think?\n\nThanks again for the code review.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147937919/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612595022","html_url":"https://github.com/apache/storm/issues/4853#issuecomment-2612595022","issue_url":"https://api.github.com/repos/apache/storm/issues/4853","id":2612595022,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTUwMjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T05:23:45Z","updated_at":"2025-01-24T13:58:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hsun-cnnxty commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/705#issuecomment-147937919\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/705#issuecomment-147937919</a></p>\n\n<p>    @choang In recent changes, I have made it possible to plug in custom store implementations.  The custom implementation is given the opportunity to initialize itself by injecting two configuration objects into the constructor which takes the form like</p>\n\n<p>public MyStoreImpl(Map conf, SpoutConfig spoutConfig)</p>\n\n<p>    In addition, I feel it is better to keep the implementation specific details, such as zookeeper quorum, inside the store implementation instead of leaving it to external class to build a implementation specific configuration object such as KafkaStoreConfig.   What do you think?</p>\n\n<p>    Thanks again for the code review.</p>\n\n\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612595022/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147949951","html_url":"https://github.com/apache/storm/pull/796#issuecomment-147949951","issue_url":"https://api.github.com/repos/apache/storm/issues/796","id":147949951,"node_id":"MDEyOklzc3VlQ29tbWVudDE0Nzk0OTk1MQ==","user":{"login":"arunmahadevan","id":6792890,"node_id":"MDQ6VXNlcjY3OTI4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/6792890?v=4","gravatar_id":"","url":"https://api.github.com/users/arunmahadevan","html_url":"https://github.com/arunmahadevan","followers_url":"https://api.github.com/users/arunmahadevan/followers","following_url":"https://api.github.com/users/arunmahadevan/following{/other_user}","gists_url":"https://api.github.com/users/arunmahadevan/gists{/gist_id}","starred_url":"https://api.github.com/users/arunmahadevan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arunmahadevan/subscriptions","organizations_url":"https://api.github.com/users/arunmahadevan/orgs","repos_url":"https://api.github.com/users/arunmahadevan/repos","events_url":"https://api.github.com/users/arunmahadevan/events{/privacy}","received_events_url":"https://api.github.com/users/arunmahadevan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T06:22:02Z","updated_at":"2015-10-14T06:22:02Z","author_association":"CONTRIBUTOR","body":"Curious to know why LLVM with C++ was chosen ? Calcite spark adapter appears to be using Janino to compile the generated java code. https://github.com/apache/incubator-calcite/tree/master/spark\n\nJust a thought if we could have avoided native code by doing something similar, however I am not fully aware of the use cases that we are trying to address so I may be wrong.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147949951/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610726","html_url":"https://github.com/apache/storm/issues/4943#issuecomment-2612610726","issue_url":"https://api.github.com/repos/apache/storm/issues/4943","id":2612610726,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA3MjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T06:22:03Z","updated_at":"2025-01-24T14:05:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/796#issuecomment-147949951\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/796#issuecomment-147949951</a></p>\n\n<p>    Curious to know why LLVM with C++ was chosen ? Calcite spark adapter appears to be using Janino to compile the generated java code. <a href=\"https://github.com/apache/incubator-calcite/tree/master/spark\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/incubator-calcite/tree/master/spark</a></p>\n\n<p>    Just a thought if we could have avoided native code by doing something similar, however I am not fully aware of the use cases that we are trying to address so I may be wrong.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610726/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/147967734","html_url":"https://github.com/apache/storm/pull/705#issuecomment-147967734","issue_url":"https://api.github.com/repos/apache/storm/issues/705","id":147967734,"node_id":"MDEyOklzc3VlQ29tbWVudDE0Nzk2NzczNA==","user":{"login":"choang","id":602917,"node_id":"MDQ6VXNlcjYwMjkxNw==","avatar_url":"https://avatars.githubusercontent.com/u/602917?v=4","gravatar_id":"","url":"https://api.github.com/users/choang","html_url":"https://github.com/choang","followers_url":"https://api.github.com/users/choang/followers","following_url":"https://api.github.com/users/choang/following{/other_user}","gists_url":"https://api.github.com/users/choang/gists{/gist_id}","starred_url":"https://api.github.com/users/choang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/choang/subscriptions","organizations_url":"https://api.github.com/users/choang/orgs","repos_url":"https://api.github.com/users/choang/repos","events_url":"https://api.github.com/users/choang/events{/privacy}","received_events_url":"https://api.github.com/users/choang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T08:04:09Z","updated_at":"2015-10-14T08:04:09Z","author_association":"NONE","body":"`StateStore` implementations could be designed like:\n\n```\npublic class KafkaStateStore implements StateStore {\n    public KafkaStateStore(HostPort kafkaBroker, String consumerId) {  // consumerId could be topic?  I'm don't know enough about the compaction feature\n        ...\n     }\n...\n}\n\npublic class ZkStateStore implements StateStore {\n    public ZkStateStore(HostPort zkConnect, String path) {\n        ...\n    }\n}\n\n// future implementations\npublic class JdbcStateStore implements StateStore {\n    public JdbcStateStore(String url, String stateTable, String user, String password) {\n        ...\n    }\n}\n\npublic class MemoryStateStore implements StateStore {\n    public MemoryStateStore() {\n        ...\n    }\n}\n```\n\nWhat I'm trying to illustrate are two factors:\n1) go away from `StormConf` and `SpoutConfig` because `StateStore` does not need all properties of either objects.\n2) the concrete implements of `StateStore` do not need to have the same constructor because your goal is not to have a factory and make it completely config driven.  You want to make it so the topology developer can decide what `StateStore` to use.\n\nWith the above, it would be pretty easy for someone to implement `MemoryStateStore` and `JdbcStateStore`.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/147967734/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612595028","html_url":"https://github.com/apache/storm/issues/4853#issuecomment-2612595028","issue_url":"https://api.github.com/repos/apache/storm/issues/4853","id":2612595028,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1OTUwMjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T08:04:11Z","updated_at":"2025-01-24T13:58:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user choang commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/705#issuecomment-147967734\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/705#issuecomment-147967734</a></p>\n\n<p>    `StateStore` implementations could be designed like:<br/>\n    ```<br/>\n    public class KafkaStateStore implements StateStore {<br/>\npublic KafkaStateStore(HostPort kafkaBroker, String consumerId) </p>\n{  // consumerId could be topic?  I'm don't know enough about the compaction feature\n    ...\n }\n<p>    ...<br/>\n    }</p>\n\n<p>    public class ZkStateStore implements StateStore {<br/>\npublic ZkStateStore(HostPort zkConnect, String path) </p>\n{\n    ...\n}<br/>\n    }<br/>\n    <br/>\n    // future implementations<br/>\n    public class JdbcStateStore implements StateStore {<br/>\npublic JdbcStateStore(String url, String stateTable, String user, String password) {    ...}\n<p>    }</p>\n\n<p>    public class MemoryStateStore implements StateStore {<br/>\npublic MemoryStateStore() </p>\n{\n    ...\n}\n<p>    }<br/>\n    ```</p>\n\n<p>    What I'm trying to illustrate are two factors:<br/>\n    1) go away from `StormConf` and `SpoutConfig` because `StateStore` does not need all properties of either objects.<br/>\n    2) the concrete implements of `StateStore` do not need to have the same constructor because your goal is not to have a factory and make it completely config driven.  You want to make it so the topology developer can decide what `StateStore` to use.</p>\n\n<p>    With the above, it would be pretty easy for someone to implement `MemoryStateStore` and `JdbcStateStore`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612595028/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148098193","html_url":"https://github.com/apache/storm/pull/785#issuecomment-148098193","issue_url":"https://api.github.com/repos/apache/storm/issues/785","id":148098193,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODA5ODE5Mw==","user":{"login":"jerrypeng","id":3613359,"node_id":"MDQ6VXNlcjM2MTMzNTk=","avatar_url":"https://avatars.githubusercontent.com/u/3613359?v=4","gravatar_id":"","url":"https://api.github.com/users/jerrypeng","html_url":"https://github.com/jerrypeng","followers_url":"https://api.github.com/users/jerrypeng/followers","following_url":"https://api.github.com/users/jerrypeng/following{/other_user}","gists_url":"https://api.github.com/users/jerrypeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrypeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrypeng/subscriptions","organizations_url":"https://api.github.com/users/jerrypeng/orgs","repos_url":"https://api.github.com/users/jerrypeng/repos","events_url":"https://api.github.com/users/jerrypeng/events{/privacy}","received_events_url":"https://api.github.com/users/jerrypeng/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T15:58:40Z","updated_at":"2015-10-14T15:59:29Z","author_association":"CONTRIBUTOR","body":"@d2r upmerged and added functionality.  Translated all config validation tests to java. Ready for review\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148098193/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607350","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607350","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607350,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczNTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T15:58:42Z","updated_at":"2025-01-24T14:03:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#issuecomment-148098193\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#issuecomment-148098193</a></p>\n\n<p>    @d2r upmerged and added functionality.  Ready for review</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607352","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607352","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607352,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczNTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T16:05:01Z","updated_at":"2025-01-24T14:03:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42014003\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42014003</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidationAnnotations.java &#8212;<br/>\n    @@ -0,0 +1,205 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p><br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I see some in the latest commit. It would be nice to remove them.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607352/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612470496","html_url":"https://github.com/apache/storm/issues/4192#issuecomment-2612470496","issue_url":"https://api.github.com/repos/apache/storm/issues/4192","id":2612470496,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0NzA0OTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T16:07:41Z","updated_at":"2025-01-24T12:56:11Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user revans2 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/797\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/797</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-350\" title=\"Update disruptor to latest version (3.3.2)\" class=\"issue-link\" data-issue-key=\"STORM-350\"><del>STORM-350</del></a>: Upgrade to newer version of disruptor</p>\n\n<p>    This replaces #750 because I rebased.</p>\n\n<p>    @HeartSaVioR I think I found the bug that you saw.  @kishorvpatil was doing scale testing and found an NPE issue.  There was a race condition when a read was timing out and I badly tried to read after the timeout instead of just returning.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/revans2/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/revans2/incubator-storm</a> disruptor-upgrade</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/797.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/797.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #797</p>\n\n<hr />\n<p>commit eda48fc05c5bee2d757ba5f7d48926b45de10b68<br/>\nAuthor: Robert (Bobby) Evans <evans@yahoo-inc.com><br/>\nDate:   2015-09-18T21:33:39Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-350\" title=\"Update disruptor to latest version (3.3.2)\" class=\"issue-link\" data-issue-key=\"STORM-350\"><del>STORM-350</del></a>: Upgrade to newer version of disruptor</p>\n\n<p>commit cb3ca023e96da81fce5c2162598b399383f30f4d<br/>\nAuthor: Robert (Bobby) Evans <evans@yahoo-inc.com><br/>\nDate:   2015-09-23T13:43:41Z</p>\n\n<p>    Fixed null reads from disruptor.</p>\n\n<p>commit e6e69b90d75be898b8040bdf3cc1ce76373352e0<br/>\nAuthor: Robert (Bobby) Evans <evans@yahoo-inc.com><br/>\nDate:   2015-09-24T18:45:36Z</p>\n\n<p>    Added in an in-order test case.</p>\n\n<p>commit e496d0159297339260f390f5048f2446c1e443a0<br/>\nAuthor: Robert (Bobby) Evans <evans@yahoo-inc.com><br/>\nDate:   2015-10-05T18:50:51Z</p>\n\n<p>    Addressed some review comments</p>\n\n<p>commit 59f16a5dd51ffe97e09478f40b80ac47b1e85e95<br/>\nAuthor: Robert (Bobby) Evans <evans@yahoo-inc.com><br/>\nDate:   2015-10-14T15:47:23Z</p>\n\n<p>    Fixed issue with disruptor queue timeout.  Also updated it to use AtomicReference so debugging checks can be simpler.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612470496/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607354","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607354","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607354,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczNTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T16:09:54Z","updated_at":"2025-01-24T14:03:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42014597\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42014597</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidationAnnotations.java &#8212;<br/>\n    @@ -0,0 +1,205 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + * <p><br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will remove again.  Dane it intellij</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607354/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148105917","html_url":"https://github.com/apache/storm/pull/765#issuecomment-148105917","issue_url":"https://api.github.com/repos/apache/storm/issues/765","id":148105917,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODEwNTkxNw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T16:24:36Z","updated_at":"2015-10-14T16:24:36Z","author_association":"CONTRIBUTOR","body":"I just rebased on the latest fixed disruptor upgrade code, now in pull request #797.\n\nThe critical path did not change at all, so the numbers should be similar.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148105917/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148118238","html_url":"https://github.com/apache/storm/pull/796#issuecomment-148118238","issue_url":"https://api.github.com/repos/apache/storm/issues/796","id":148118238,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODExODIzOA==","user":{"login":"haohui","id":1192828,"node_id":"MDQ6VXNlcjExOTI4Mjg=","avatar_url":"https://avatars.githubusercontent.com/u/1192828?v=4","gravatar_id":"","url":"https://api.github.com/users/haohui","html_url":"https://github.com/haohui","followers_url":"https://api.github.com/users/haohui/followers","following_url":"https://api.github.com/users/haohui/following{/other_user}","gists_url":"https://api.github.com/users/haohui/gists{/gist_id}","starred_url":"https://api.github.com/users/haohui/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haohui/subscriptions","organizations_url":"https://api.github.com/users/haohui/orgs","repos_url":"https://api.github.com/users/haohui/repos","events_url":"https://api.github.com/users/haohui/events{/privacy}","received_events_url":"https://api.github.com/users/haohui/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T17:02:26Z","updated_at":"2015-10-14T17:02:26Z","author_association":"NONE","body":"The main motivation is performance -- The code that generated by Calcite has a lot of down casts which can potentially have a visible impact, as the targeted throughput is millions of messages per seconds. \nBringing LLVM allows StormSQL to leverage the mature optimization and opens up further opportunities including automatic vectorization, etc.\n\nNote that LLVM is used only for optimization -- the next step is to translate LLVM IR back to Java Bytecode (STORM-1097). The approach is quite similar to using Janino to generate Java bytecode. There is no native components in the worker node.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148118238/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610732","html_url":"https://github.com/apache/storm/issues/4943#issuecomment-2612610732","issue_url":"https://api.github.com/repos/apache/storm/issues/4943","id":2612610732,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA3MzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T17:02:30Z","updated_at":"2025-01-24T14:05:06Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user haohui commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/796#issuecomment-148118238\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/796#issuecomment-148118238</a></p>\n\n<p>    The main motivation is performance &#8211; The code that generated by Calcite has a lot of down casts which can potentially have a visible impact, as the targeted throughput is millions of messages per seconds. <br/>\n    Bringing LLVM allows StormSQL to leverage the mature optimization and opens up further opportunities including automatic vectorization, etc.</p>\n\n<p>    Note that LLVM is used only for optimization &#8211; the next step is to translate LLVM IR back to Java Bytecode (<a href=\"https://issues.apache.org/jira/browse/STORM-1097\" title=\"Compile logical plans to Java source code\" class=\"issue-link\" data-issue-key=\"STORM-1097\"><del>STORM-1097</del></a>). The approach is quite similar to using Janino to generate Java bytecode. There is no native components in the worker node.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610732/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607361","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607361","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607361,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczNjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T17:52:14Z","updated_at":"2025-01-24T14:03:35Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42027724\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42027724</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) {\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    +     */<br/>\n    +    public static class ListEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] validators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, o);<br/>\n    +    for (Object entry : (Iterable) o) {<br/>\n    +for (Class validator : validators) {<br/>\n    +    Object v = validator.newInstance();<br/>\n    +    if (v instanceof Validator) </p>\n{\n    +((Validator) v).validateField(name + \" list entry\", entry);\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in ListEntryCustomValidator.  Individual entry validators must a instance of Validator class\", validator.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates each key and value in a map of a certain type<br/>\n    +     */<br/>\n    +    public static class MapEntryTypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class keyType, Class valueType, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(keyType, valueType, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class MapEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] keyValidators, Class[] valueValidators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }\n<p>    +    //check if Map<br/>\n    +    SimpleTypeValidator isMap = new SimpleTypeValidator();<br/>\n    +    isMap.validateField(name, Map.class, o);<br/>\n    +    for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) o).entrySet()) {<br/>\n    +for (Class kv : keyValidators) {<br/>\n    +    Object keyValidator = kv.newInstance();<br/>\n    +    if (keyValidator instanceof Validator) </p>\n{\n    +((Validator) keyValidator).validateField(name + \" Map key\", entry.getKey());\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate keys.  Individual entry validators must a instance of Validator class\", kv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +for (Class vv : valueValidators) {<br/>\n    +    Object valueValidator = vv.newInstance();<br/>\n    +    if (valueValidator instanceof Validator) </p>\n{\n    +((Validator) valueValidator).validateField(name + \" Map value\", entry.getValue());\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate values.  Individual entry validators must a instance of Validator class\", vv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a positive number<br/>\n    +     */<br/>\n    +    public static class PositiveNumberValidator extends Validator{<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateField(name, false, o);\n    +}\n<p>    +<br/>\n    +    public void validateField(String name, boolean includeZero, Object o) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    check indentation of method declaration</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607367","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607367","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607367,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczNjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T17:52:24Z","updated_at":"2025-01-24T14:03:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42027747\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42027747</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) {\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    +     */<br/>\n    +    public static class ListEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] validators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, o);<br/>\n    +    for (Object entry : (Iterable) o) {<br/>\n    +for (Class validator : validators) {<br/>\n    +    Object v = validator.newInstance();<br/>\n    +    if (v instanceof Validator) </p>\n{\n    +((Validator) v).validateField(name + \" list entry\", entry);\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in ListEntryCustomValidator.  Individual entry validators must a instance of Validator class\", validator.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates each key and value in a map of a certain type<br/>\n    +     */<br/>\n    +    public static class MapEntryTypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class keyType, Class valueType, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(keyType, valueType, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class MapEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] keyValidators, Class[] valueValidators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if Map<br/>\n    +    SimpleTypeValidator isMap = new SimpleTypeValidator();<br/>\n    +    isMap.validateField(name, Map.class, o);<br/>\n    +    for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) o).entrySet()) {<br/>\n    +for (Class kv : keyValidators) {<br/>\n    +    Object keyValidator = kv.newInstance();<br/>\n    +    if (keyValidator instanceof Validator) {\n    +((Validator) keyValidator).validateField(name + \" Map key\", entry.getKey());\n    +    } else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate keys.  Individual entry validators must a instance of Validator class\", kv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +for (Class vv : valueValidators) {<br/>\n    +    Object valueValidator = vv.newInstance();<br/>\n    +    if (valueValidator instanceof Validator) {\n    +((Validator) valueValidator).validateField(name + \" Map value\", entry.getValue());\n    +    } else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate values.  Individual entry validators must a instance of Validator class\", vv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a positive number<br/>\n    +     */<br/>\n    +    public static class PositiveNumberValidator extends Validator{<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {\n    +    validateField(name, false, o);\n    +}<br/>\n    +<br/>\n    +    public void validateField(String name, boolean includeZero, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Number) {<br/>\n    +if(includeZero == true) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Don't need `== true` here</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607367/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607376","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607376","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607376,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczNzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T17:54:27Z","updated_at":"2025-01-24T14:03:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42028053\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42028053</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) {\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    +     */<br/>\n    +    public static class ListEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] validators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, o);<br/>\n    +    for (Object entry : (Iterable) o) {<br/>\n    +for (Class validator : validators) {<br/>\n    +    Object v = validator.newInstance();<br/>\n    +    if (v instanceof Validator) </p>\n{\n    +((Validator) v).validateField(name + \" list entry\", entry);\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in ListEntryCustomValidator.  Individual entry validators must a instance of Validator class\", validator.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates each key and value in a map of a certain type<br/>\n    +     */<br/>\n    +    public static class MapEntryTypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class keyType, Class valueType, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(keyType, valueType, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class MapEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] keyValidators, Class[] valueValidators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }\n<p>    +    //check if Map<br/>\n    +    SimpleTypeValidator isMap = new SimpleTypeValidator();<br/>\n    +    isMap.validateField(name, Map.class, o);<br/>\n    +    for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) o).entrySet()) {<br/>\n    +for (Class kv : keyValidators) {<br/>\n    +    Object keyValidator = kv.newInstance();<br/>\n    +    if (keyValidator instanceof Validator) </p>\n{\n    +((Validator) keyValidator).validateField(name + \" Map key\", entry.getKey());\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate keys.  Individual entry validators must a instance of Validator class\", kv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +for (Class vv : valueValidators) {<br/>\n    +    Object valueValidator = vv.newInstance();<br/>\n    +    if (valueValidator instanceof Validator) </p>\n{\n    +((Validator) valueValidator).validateField(name + \" Map value\", entry.getValue());\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate values.  Individual entry validators must a instance of Validator class\", vv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a positive number<br/>\n    +     */<br/>\n    +    public static class PositiveNumberValidator extends Validator{<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateField(name, false, o);\n    +}\n<p>    +<br/>\n    +    public void validateField(String name, boolean includeZero, Object o) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will fix</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607376/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607382","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607382","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607382,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T17:55:03Z","updated_at":"2025-01-24T14:03:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42028131\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42028131</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) {\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    +     */<br/>\n    +    public static class ListEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] validators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, o);<br/>\n    +    for (Object entry : (Iterable) o) {<br/>\n    +for (Class validator : validators) {<br/>\n    +    Object v = validator.newInstance();<br/>\n    +    if (v instanceof Validator) </p>\n{\n    +((Validator) v).validateField(name + \" list entry\", entry);\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in ListEntryCustomValidator.  Individual entry validators must a instance of Validator class\", validator.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates each key and value in a map of a certain type<br/>\n    +     */<br/>\n    +    public static class MapEntryTypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class keyType, Class valueType, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(keyType, valueType, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class MapEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] keyValidators, Class[] valueValidators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if Map<br/>\n    +    SimpleTypeValidator isMap = new SimpleTypeValidator();<br/>\n    +    isMap.validateField(name, Map.class, o);<br/>\n    +    for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) o).entrySet()) {<br/>\n    +for (Class kv : keyValidators) {<br/>\n    +    Object keyValidator = kv.newInstance();<br/>\n    +    if (keyValidator instanceof Validator) {\n    +((Validator) keyValidator).validateField(name + \" Map key\", entry.getKey());\n    +    } else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate keys.  Individual entry validators must a instance of Validator class\", kv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +for (Class vv : valueValidators) {<br/>\n    +    Object valueValidator = vv.newInstance();<br/>\n    +    if (valueValidator instanceof Validator) {\n    +((Validator) valueValidator).validateField(name + \" Map value\", entry.getValue());\n    +    } else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate values.  Individual entry validators must a instance of Validator class\", vv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a positive number<br/>\n    +     */<br/>\n    +    public static class PositiveNumberValidator extends Validator{<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {\n    +    validateField(name, false, o);\n    +}<br/>\n    +<br/>\n    +    public void validateField(String name, boolean includeZero, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Number) {<br/>\n    +if(includeZero == true) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will fix</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607382/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607387","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607387","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607387,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T18:02:19Z","updated_at":"2025-01-24T14:03:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42029112\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42029112</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }\n<p>    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) </p>\n{\n    +    return;\n    +}\n<p>    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Maybe this? `Validates each entry in a list against a list of custom Validators`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607387/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611102","html_url":"https://github.com/apache/storm/issues/4946#issuecomment-2612611102","issue_url":"https://api.github.com/repos/apache/storm/issues/4946","id":2612611102,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTExMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T18:11:18Z","updated_at":"2025-01-24T14:05:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>I have a fix for this, I'll throw up a pull request soon.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607395","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607395","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607395,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDczOTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T18:14:36Z","updated_at":"2025-01-24T14:03:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42030910\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42030910</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }\n<p>    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) </p>\n{\n    +    return;\n    +}\n<p>    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will fix</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607403","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607403","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607403,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0MDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T18:22:34Z","updated_at":"2025-01-24T14:03:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42032063\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42032063</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidationAnnotations.java &#8212;<br/>\n    @@ -0,0 +1,216 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import java.lang.annotation.Retention;<br/>\n    +import java.lang.annotation.Target;<br/>\n    +<br/>\n    +import java.lang.annotation.ElementType;<br/>\n    +import java.lang.annotation.RetentionPolicy;<br/>\n    +<br/>\n    +/**<br/>\n    + * Note: every annotation interface must have method validatorClass()<br/>\n    + * For every annotation there must validator class to do the validation<br/>\n    + * To add another annotation for config validation, add another annotation @interface class.  Implement the corresponding<br/>\n    + * validator logic in a class in ConfigValidation.  Make sure validateField method in ConfigValidation knows how to use the validator<br/>\n    + * and which method definition/parameters to pass in based on what fields are in the annotation.<br/>\n    + */<br/>\n    +public class ConfigValidationAnnotations {<br/>\n    +    /**<br/>\n    +     * Field names for annotations<br/>\n    +     */<br/>\n    +<br/>\n    +    static final String VALIDATOR_CLASS = \"validatorClass\";<br/>\n    +    static final String TYPE = \"type\";<br/>\n    +    static final String ENTRY_VALIDATOR_CLASSES = \"entryValidatorClasses\";<br/>\n    +    static final String KEY_VALIDATOR_CLASSES = \"keyValidatorClasses\";<br/>\n    +    static final String VALUE_VALIDATOR_CLASSES = \"valueValidatorClasses\";<br/>\n    +    static final String KEY_TYPE = \"keyType\";<br/>\n    +    static final String VALUE_TYPE = \"valueType\";<br/>\n    +    static final String INCLUDE_ZERO = \"includeZero\";<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validators with fields: validatorClass and type<br/>\n    +     */<br/>\n    +<br/>\n    +    @Retention(RetentionPolicy.RUNTIME)<br/>\n    +    @Target(ElementType.FIELD)<br/>\n    +    public @interface isType </p>\n{\n    +Class validatorClass() default ConfigValidation.SimpleTypeValidator.class;\n    +\n    +Class type();\n    +    }\n<p>    +<br/>\n    +    @Retention(RetentionPolicy.RUNTIME)<br/>\n    +    @Target(ElementType.FIELD)<br/>\n    +    public @interface isStrings {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Can we make this areStrings or isListOfStrings.  isStrings is too close to isString for me, and it feels a bit grammatically suspect.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607403/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607406","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607406","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607406,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0MDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T18:25:30Z","updated_at":"2025-01-24T14:03:36Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42032492\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42032492</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidationAnnotations.java &#8212;<br/>\n    @@ -0,0 +1,216 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import java.lang.annotation.Retention;<br/>\n    +import java.lang.annotation.Target;<br/>\n    +<br/>\n    +import java.lang.annotation.ElementType;<br/>\n    +import java.lang.annotation.RetentionPolicy;<br/>\n    +<br/>\n    +/**<br/>\n    + * Note: every annotation interface must have method validatorClass()<br/>\n    + * For every annotation there must validator class to do the validation<br/>\n    + * To add another annotation for config validation, add another annotation @interface class.  Implement the corresponding<br/>\n    + * validator logic in a class in ConfigValidation.  Make sure validateField method in ConfigValidation knows how to use the validator<br/>\n    + * and which method definition/parameters to pass in based on what fields are in the annotation.<br/>\n    + */<br/>\n    +public class ConfigValidationAnnotations {<br/>\n    +    /**<br/>\n    +     * Field names for annotations<br/>\n    +     */<br/>\n    +<br/>\n    +    static final String VALIDATOR_CLASS = \"validatorClass\";<br/>\n    +    static final String TYPE = \"type\";<br/>\n    +    static final String ENTRY_VALIDATOR_CLASSES = \"entryValidatorClasses\";<br/>\n    +    static final String KEY_VALIDATOR_CLASSES = \"keyValidatorClasses\";<br/>\n    +    static final String VALUE_VALIDATOR_CLASSES = \"valueValidatorClasses\";<br/>\n    +    static final String KEY_TYPE = \"keyType\";<br/>\n    +    static final String VALUE_TYPE = \"valueType\";<br/>\n    +    static final String INCLUDE_ZERO = \"includeZero\";<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validators with fields: validatorClass and type<br/>\n    +     */<br/>\n    +<br/>\n    +    @Retention(RetentionPolicy.RUNTIME)<br/>\n    +    @Target(ElementType.FIELD)<br/>\n    +    public @interface isType </p>\n{\n    +Class validatorClass() default ConfigValidation.SimpleTypeValidator.class;\n    +\n    +Class type();\n    +    }\n<p>    +<br/>\n    +    @Retention(RetentionPolicy.RUNTIME)<br/>\n    +    @Target(ElementType.FIELD)<br/>\n    +    public @interface isStrings {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    ok how about isListOfStrings then? so to keep the \"is\" prefix consistent</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607406/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607409","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607409","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607409,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0MDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T18:27:30Z","updated_at":"2025-01-24T14:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42032775\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42032775</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Realizing this validator name was copied from before, it would be really nice to clean up the name here.  This really validates more than str->str-><span class=\"error\">&#91;str&#93;</span>, but it also validates that the values of the nested map are lists of strings.  This is so specialized that maybe we want to rename the validator and its annotation to something like `ImpersonationAclValidator` and `@isImpersonationAcl`.</p>\n\n<p>    The reason is, should someone else suppose it is as generic as the name describes, they may find out it is being too strict and rejecting config entries that the javadoc and name do not say should be invalid.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607409/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607415","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607415","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607415,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0MTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T18:32:36Z","updated_at":"2025-01-24T14:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42033497\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42033497</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will change</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611119","html_url":"https://github.com/apache/storm/issues/4946#issuecomment-2612611119","issue_url":"https://api.github.com/repos/apache/storm/issues/4946","id":2612611119,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTExMTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T18:34:38Z","updated_at":"2025-01-24T14:05:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user revans2 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/798\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/798</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1108\" title=\"Random test failure : reset-log-levels-timer fails with NPE\" class=\"issue-link\" data-issue-key=\"STORM-1108\"><del>STORM-1108</del></a>: Fix NPE in simulated time.</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/revans2/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/revans2/incubator-storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1108\" title=\"Random test failure : reset-log-levels-timer fails with NPE\" class=\"issue-link\" data-issue-key=\"STORM-1108\"><del>STORM-1108</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/798.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/798.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #798</p>\n\n<hr />\n<p>commit 5b86f4712f92d34c32134e933b8f2c7fc3c866f0<br/>\nAuthor: Robert (Bobby) Evans <evans@yahoo-inc.com><br/>\nDate:   2015-10-14T18:33:27Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1108\" title=\"Random test failure : reset-log-levels-timer fails with NPE\" class=\"issue-link\" data-issue-key=\"STORM-1108\"><del>STORM-1108</del></a>: Fix NPE in simulated time.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148164422","html_url":"https://github.com/apache/storm/pull/785#issuecomment-148164422","issue_url":"https://api.github.com/repos/apache/storm/issues/785","id":148164422,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE2NDQyMg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:17:36Z","updated_at":"2015-10-14T19:17:36Z","author_association":"CONTRIBUTOR","body":"This is nothing you did, but now that the validation is much more readable I am seeing a few things that should probably be fixed, but I am happy to do them myself on a follow on JIRA\n\n`TOPOLOGY_ISOLATED_MACHINES` needs `@isPositiveNumber`\n\nAll of the 'ZMQ_` configs should be deprecated.\n\n`TRANSACTIONAL_ZOOKEEPER_PORT`needs `@isPositiveNumber`\n\nIt would be great if we could restrict `TOPOLOGY_LOGGING_SENSITIVITY` to one of the allowed values \"S0\", \"S1\", \"S2\", \"S3\"\n\n`TOPOLOGY_SHELLBOLT_MAX_PENDING` needs `@isPositiveNumber`\n\n`TOPOLOGY_TRIDENT_BATCH_EMIT_INTERVAL_MILLIS` needs `@isPositiveNumber`\n\n`TOPOLOGY_MAX_ERROR_REPORT_PER_INTERVAL` and `TOPOLOGY_ERROR_THROTTLE_INTERVAL_SECS` both seem to need `@isPositiveNumber`\n\n`TOPOLOGY_TRANSFER_BUFFER_SIZE` needs to be `@isPowerOf2`\n\n`TOPOLOGY_ENVIRONMENT` should be `@isMapEntryType(keyType = String.class, valueType = String.class)`.\n\n`TOPOLOGY_SLEEP_SPOUT_WAIT_STRATEGY_TIME_MS` needs `@isPositiveNumber(includeZero = true)`\n\n`TOPOLOGY_MAX_SPOUT_PENDING` needs `@isPositiveNumber`\n\n`TOPOLOGY_MAX_TASK_PARALLELISM` needs `@isPositiveNumber`\n\n`WORKER_METRICS` and `TOPOLOGY_WORKER_METRICS` should be  `@isMapEntryType(keyType = String.class, valueType = String.class)`.\n\n`TOPOLOGY_METRICS_CONSUMER_REGISTER` should have a custom validator (you might not have time to do it, so we might need a follow on JIRA for this). Something like\n\n`@isListEntryCustom(entryValidatorClasses={MetricRegistryValidator.class})`\n\nMetricRegistryValidator.class needs to check that it is a map, with a \"class\" key that points to a string, a \"parallelism.hint\" key that points to a positive non-null integer.\n\n`TOPOLOGY_EVENTLOGGER_EXECUTORS` needs `@isPositiveNumber`\n\n`TOPOLOGY_ACKER_EXECUTORS` needs `@isPositiveNumber`\n\n`TOPOLOGY_TASKS` and `TOPOLOGY_WORKERS` need `@isPositiveNumber`\n\n`TASK_CREDENTIALS_POLL_SECS` needs `@isPositiveNumber`\n\n`TASK_REFRESH_POLL_SECS` `TASK_HEARTBEAT_FREQUENCY_SECS` `WORKER_HEARTBEAT_FREQUENCY_SECS` and `WORKER_RECEIVER_THREAD_COUNT` need `@isPositiveNumber`\n\n`SUPERVISOR_MONITOR_FREQUENCY_SECS` and `SUPERVISOR_HEARTBEAT_FREQUENCY_SECS` need `@isPositiveNumber`\n\n`SUPERVISOR_WORKER_SHUTDOWN_SLEEP_SECS` needs `@isPositiveNumber`\n\n`DRPC_HTTP_FILTER_PARAMS` should be `@isMapEntryType(keyType = String.class, valueType = String.class)`.\n\n`DRPC_INVOCATIONS_THREADS` and `DRPC_INVOCATIONS_PORT` need `@isPositiveNumber`\n\n`DRPC_QUEUE_SIZE` `DRPC_MAX_BUFFER_SIZE` and `DRPC_WORKER_THREADS` need `@isPositiveNumber`\n\n`DRPC_AUTHORIZER_ACL` needs to be a Map<String, Map<String, String or List<String>>>.  This too probably needs a custom validator in a follow on JIRA.\n\n`DRPC_PORT` needs `@isPositiveNumber`\n\n`DRPC_HTTPS_PORT` and `DRPC_HTTP_PORT` need  `@isPositiveNumber`\n\n`UI_HTTPS_PORT` and `UI_HEADER_BUFFER_BYTES` need  `@isPositiveNumber`\n\n`UI_FILTER_PARAMS` should be `@isMapEntryType(keyType = String.class, valueType = String.class)`.\n\n`LOGVIEWER_HTTPS_PORT` needs `@isPositiveNumber`\n\n`LOGVIEWER_PORT` and `UI_PORT` need `@isPositiveNumber`\n\n`NIMBUS_CREDENTIAL_RENEW_FREQ_SECS` needs `@isPositiveNumber`\n\n`NIMBUS_IMPERSONATION_ACL` needs to be updated, because I don't think Map of string to map.  It is more complex then that.\n\n`NIMBUS_TASK_LAUNCH_SECS` `NIMBUS_SUPERVISOR_TIMEOUT_SECS` `NIMBUS_INBOX_JAR_EXPIRATION_SECS` `NIMBUS_CLEANUP_INBOX_FREQ_SECS` `NIMBUS_MONITOR_FREQ_SECS` and `NIMBUS_TASK_TIMEOUT_SECS` need `@isPositiveNumber`\n\n`NIMBUS_THRIFT_MAX_BUFFER_SIZE` needs `@isPositiveNumber`\n\n`NIMBUS_THRIFT_THREADS` and `NIMBUS_THRIFT_PORT` need `@isPositiveNumber`\n\nI think there are more too so we probably need a follow on JIRA for this.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148164422/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607423","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607423","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607423,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:17:39Z","updated_at":"2025-01-24T14:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#issuecomment-148164422\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#issuecomment-148164422</a></p>\n\n<p>    This is nothing you did, but now that the validation is much more readable I am seeing a few things that should probably be fixed, but I am happy to do them myself on a follow on JIRA</p>\n\n<p>    `TOPOLOGY_ISOLATED_MACHINES` needs `@isPositiveNumber`</p>\n\n<p>    All of the 'ZMQ_` configs should be deprecated.</p>\n\n<p>    `TRANSACTIONAL_ZOOKEEPER_PORT`needs `@isPositiveNumber`</p>\n\n<p>    It would be great if we could restrict `TOPOLOGY_LOGGING_SENSITIVITY` to one of the allowed values \"S0\", \"S1\", \"S2\", \"S3\"</p>\n\n<p>    `TOPOLOGY_SHELLBOLT_MAX_PENDING` needs `@isPositiveNumber`</p>\n\n<p>    `TOPOLOGY_TRIDENT_BATCH_EMIT_INTERVAL_MILLIS` needs `@isPositiveNumber`</p>\n\n<p>    `TOPOLOGY_MAX_ERROR_REPORT_PER_INTERVAL` and `TOPOLOGY_ERROR_THROTTLE_INTERVAL_SECS` both seem to need `@isPositiveNumber`</p>\n\n<p>    `TOPOLOGY_TRANSFER_BUFFER_SIZE` needs to be `@isPowerOf2`</p>\n\n<p>    `TOPOLOGY_ENVIRONMENT` should be `@isMapEntryType(keyType = String.class, valueType = String.class)`.</p>\n\n<p>    `TOPOLOGY_SLEEP_SPOUT_WAIT_STRATEGY_TIME_MS` needs `@isPositiveNumber(includeZero = true)`</p>\n\n<p>    `TOPOLOGY_MAX_SPOUT_PENDING` needs `@isPositiveNumber`</p>\n\n<p>    `TOPOLOGY_MAX_TASK_PARALLELISM` needs `@isPositiveNumber`</p>\n\n<p>    `WORKER_METRICS` and `TOPOLOGY_WORKER_METRICS` should be  `@isMapEntryType(keyType = String.class, valueType = String.class)`.</p>\n\n<p>    `TOPOLOGY_METRICS_CONSUMER_REGISTER` should have a custom validator (you might not have time to do it, so we might need a follow on JIRA for this). Something like</p>\n\n<p>    `@isListEntryCustom(entryValidatorClasses=</p>\n{MetricRegistryValidator.class}\n<p>)`</p>\n\n<p>    MetricRegistryValidator.class needs to check that it is a map, with a \"class\" key that points to a string, a \"parallelism.hint\" key that points to a positive non-null integer.</p>\n\n<p>    `TOPOLOGY_EVENTLOGGER_EXECUTORS` needs `@isPositiveNumber`</p>\n\n<p>    `TOPOLOGY_ACKER_EXECUTORS` needs `@isPositiveNumber`</p>\n\n<p>    `TOPOLOGY_TASKS` and `TOPOLOGY_WORKERS` need `@isPositiveNumber`</p>\n\n<p>    `TASK_CREDENTIALS_POLL_SECS` needs `@isPositiveNumber`</p>\n\n<p>    `TASK_REFRESH_POLL_SECS` `TASK_HEARTBEAT_FREQUENCY_SECS` `WORKER_HEARTBEAT_FREQUENCY_SECS` and `WORKER_RECEIVER_THREAD_COUNT` need `@isPositiveNumber`</p>\n\n<p>    `SUPERVISOR_MONITOR_FREQUENCY_SECS` and `SUPERVISOR_HEARTBEAT_FREQUENCY_SECS` need `@isPositiveNumber`</p>\n\n<p>    `SUPERVISOR_WORKER_SHUTDOWN_SLEEP_SECS` needs `@isPositiveNumber`</p>\n\n<p>    `DRPC_HTTP_FILTER_PARAMS` should be `@isMapEntryType(keyType = String.class, valueType = String.class)`.</p>\n\n<p>    `DRPC_INVOCATIONS_THREADS` and `DRPC_INVOCATIONS_PORT` need `@isPositiveNumber`</p>\n\n<p>    `DRPC_QUEUE_SIZE` `DRPC_MAX_BUFFER_SIZE` and `DRPC_WORKER_THREADS` need `@isPositiveNumber`</p>\n\n<p>    `DRPC_AUTHORIZER_ACL` needs to be a Map<String, Map<String, String or List<String>>>.  This too probably needs a custom validator in a follow on JIRA.</p>\n\n<p>    `DRPC_PORT` needs `@isPositiveNumber`</p>\n\n<p>    `DRPC_HTTPS_PORT` and `DRPC_HTTP_PORT` need  `@isPositiveNumber`</p>\n\n<p>    `UI_HTTPS_PORT` and `UI_HEADER_BUFFER_BYTES` need  `@isPositiveNumber`</p>\n\n<p>    `UI_FILTER_PARAMS` should be `@isMapEntryType(keyType = String.class, valueType = String.class)`.</p>\n\n<p>    `LOGVIEWER_HTTPS_PORT` needs `@isPositiveNumber`</p>\n\n<p>    `LOGVIEWER_PORT` and `UI_PORT` need `@isPositiveNumber`</p>\n\n<p>    `NIMBUS_CREDENTIAL_RENEW_FREQ_SECS` needs `@isPositiveNumber`</p>\n\n<p>    `NIMBUS_IMPERSONATION_ACL` needs to be updated, because I don't think Map of string to map.  It is more complex then that.</p>\n\n<p>    `NIMBUS_TASK_LAUNCH_SECS` `NIMBUS_SUPERVISOR_TIMEOUT_SECS` `NIMBUS_INBOX_JAR_EXPIRATION_SECS` `NIMBUS_CLEANUP_INBOX_FREQ_SECS` `NIMBUS_MONITOR_FREQ_SECS` and `NIMBUS_TASK_TIMEOUT_SECS` need `@isPositiveNumber`</p>\n\n<p>    `NIMBUS_THRIFT_MAX_BUFFER_SIZE` needs `@isPositiveNumber`</p>\n\n<p>    `NIMBUS_THRIFT_THREADS` and `NIMBUS_THRIFT_PORT` need `@isPositiveNumber`</p>\n\n<p>    I think there are more too so we probably need a follow on JIRA for this.</p>\n\n\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148165474","html_url":"https://github.com/apache/storm/pull/798#issuecomment-148165474","issue_url":"https://api.github.com/repos/apache/storm/issues/798","id":148165474,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE2NTQ3NA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:21:36Z","updated_at":"2015-10-14T19:21:36Z","author_association":"CONTRIBUTOR","body":"The travis failure looks unrelated.  It is a kafka test failure.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148165474/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611123","html_url":"https://github.com/apache/storm/issues/4946#issuecomment-2612611123","issue_url":"https://api.github.com/repos/apache/storm/issues/4946","id":2612611123,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTExMjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:21:39Z","updated_at":"2025-01-24T14:05:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/798#issuecomment-148165474\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/798#issuecomment-148165474</a></p>\n\n<p>    The travis failure looks unrelated.  It is a kafka test failure.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611123/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607427","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607427","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607427,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0Mjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:43:07Z","updated_at":"2025-01-24T14:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42042530\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42042530</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    \"duplicates\"</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607427/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607429","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607429","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607429,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0Mjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:44:04Z","updated_at":"2025-01-24T14:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42042633\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42042633</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {<br/>\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Let's go ahead and include the value that was duplicated too.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607429/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607435","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607435","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607435,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0MzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:44:13Z","updated_at":"2025-01-24T14:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42042650\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42042650</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will fix</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607435/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607443","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607443","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607443,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0NDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:45:17Z","updated_at":"2025-01-24T14:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42042786\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42042786</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {<br/>\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will add</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607443/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612586131","html_url":"https://github.com/apache/storm/issues/4820#issuecomment-2612586131","issue_url":"https://api.github.com/repos/apache/storm/issues/4820","id":2612586131,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1ODYxMzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:46:07Z","updated_at":"2025-01-24T13:54:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>This is a race condition between nimbus and the worker.  The worker is writing heartbeats, but nimbus has decided the topology is gone and cleaned up zookeeper.  I'm not sure the best thing to do, because this is arguably a desired behavior, the topology is gone and the worker didn't get the message yet through the normal path.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612586131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611359","html_url":"https://github.com/apache/storm/issues/4948#issuecomment-2612611359","issue_url":"https://api.github.com/repos/apache/storm/issues/4948","id":2612611359,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTEzNTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:51:27Z","updated_at":"2025-01-24T14:05:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user kishorvpatil opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/799\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/799</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1110\" title=\"System Components Page is not available\" class=\"issue-link\" data-issue-key=\"STORM-1110\"><del>STORM-1110</del></a> Fix Component Page for system components</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>Remove redundant method `system-id?` - as is calls into static `Utils/isSystemId`</li>\n\t<li>All System components are of type bolts.</li>\n</ul>\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/kishorvpatil/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/kishorvpatil/incubator-storm</a> storm1110</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/799.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/799.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #799</p>\n\n<hr />\n<p>commit 8281115371e852eb540246fd127b29d1da5e6f6a<br/>\nAuthor: Kishor Patil <kpatil@yahoo-inc.com><br/>\nDate:   2015-10-14T18:45:20Z</p>\n\n<p>    Remove redundent clojure method system-id</p>\n\n<p>commit 88bfa5af12ec07c0fb4c2d4a66f1812fee004edf<br/>\nAuthor: Kishor Patil <kpatil@yahoo-inc.com><br/>\nDate:   2015-10-14T18:46:32Z</p>\n\n<p>    The system components are of type bolts</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611359/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602836","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602836","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602836,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI4MzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:51:34Z","updated_at":"2025-01-24T14:01:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#discussion_r42043550\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#discussion_r42043550</a></p>\n\n<p>    &#8212; Diff: storm-core/src/storm.thrift &#8212;<br/>\n    @@ -204,6 +203,7 @@ struct ExecutorStats {<br/>\n       2: required map<string, map<string, i64>> transferred;<br/>\n       3: required ExecutorSpecificStats specific;<br/>\n       4: required double rate;<br/>\n    +  5: required map<string, map<string, double>> throughput;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This is still not addressed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148177465","html_url":"https://github.com/apache/storm/pull/799#issuecomment-148177465","issue_url":"https://api.github.com/repos/apache/storm/issues/799","id":148177465,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE3NzQ2NQ==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:54:15Z","updated_at":"2015-10-14T19:54:15Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148177465/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611367","html_url":"https://github.com/apache/storm/issues/4948#issuecomment-2612611367","issue_url":"https://api.github.com/repos/apache/storm/issues/4948","id":2612611367,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTEzNjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:54:16Z","updated_at":"2025-01-24T14:05:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/799#issuecomment-148177465\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/799#issuecomment-148177465</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611367/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148178136","html_url":"https://github.com/apache/storm/pull/753#issuecomment-148178136","issue_url":"https://api.github.com/repos/apache/storm/issues/753","id":148178136,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE3ODEzNg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:56:37Z","updated_at":"2015-10-14T19:56:37Z","author_association":"CONTRIBUTOR","body":"@wangli1426 sorry it took so long to respond.  The code looks a lot simpler.  Please upmerge.  Stats aggregation has changed places, but it still looks like it is a not too difficult change.\n\nI also would really like to see the thrift code changed so adding in the throughput can be a rolling upgrade.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148178136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602843","html_url":"https://github.com/apache/storm/issues/4895#issuecomment-2612602843","issue_url":"https://api.github.com/repos/apache/storm/issues/4895","id":2612602843,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDI4NDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:56:39Z","updated_at":"2025-01-24T14:01:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/753#issuecomment-148178136\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/753#issuecomment-148178136</a></p>\n\n<p>    @wangli1426 sorry it took so long to respond.  The code looks a lot simpler.  Please upmerge.  Stats aggregation has changed places, but it still looks like it is a not too difficult change.</p>\n\n<p>    I also would really like to see the thrift code changed so adding in the throughput can be a rolling upgrade.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612602843/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148178178","html_url":"https://github.com/apache/storm/pull/799#issuecomment-148178178","issue_url":"https://api.github.com/repos/apache/storm/issues/799","id":148178178,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE3ODE3OA==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:56:46Z","updated_at":"2015-10-14T19:56:46Z","author_association":"NONE","body":"+1 pending no relevant build issues.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148178178/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611371","html_url":"https://github.com/apache/storm/issues/4948#issuecomment-2612611371","issue_url":"https://api.github.com/repos/apache/storm/issues/4948","id":2612611371,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTEzNzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:56:49Z","updated_at":"2025-01-24T14:05:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/799#issuecomment-148178178\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/799#issuecomment-148178178</a></p>\n\n<p>    +1 pending no relevant build issues.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611371/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148178374","html_url":"https://github.com/apache/storm/pull/799#issuecomment-148178374","issue_url":"https://api.github.com/repos/apache/storm/issues/799","id":148178374,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE3ODM3NA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:57:35Z","updated_at":"2015-10-14T19:57:35Z","author_association":"CONTRIBUTOR","body":"+1 pending build\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148178374/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611378","html_url":"https://github.com/apache/storm/issues/4948#issuecomment-2612611378","issue_url":"https://api.github.com/repos/apache/storm/issues/4948","id":2612611378,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTEzNzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:57:36Z","updated_at":"2025-01-24T14:05:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/799#issuecomment-148178374\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/799#issuecomment-148178374</a></p>\n\n<p>    +1 pending build</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611378/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148178917","html_url":"https://github.com/apache/storm/pull/793#issuecomment-148178917","issue_url":"https://api.github.com/repos/apache/storm/issues/793","id":148178917,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE3ODkxNw==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:59:45Z","updated_at":"2015-10-14T19:59:45Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148178917/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610475","html_url":"https://github.com/apache/storm/issues/4941#issuecomment-2612610475","issue_url":"https://api.github.com/repos/apache/storm/issues/4941","id":2612610475,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA0NzU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:59:45Z","updated_at":"2025-01-24T14:04:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/793\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/793</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610475/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610481","html_url":"https://github.com/apache/storm/issues/4941#issuecomment-2612610481","issue_url":"https://api.github.com/repos/apache/storm/issues/4941","id":2612610481,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTA0ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T19:59:48Z","updated_at":"2025-01-24T14:04:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/793#issuecomment-148178917\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/793#issuecomment-148178917</a></p>\n\n<p>    +1</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612610481/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607448","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607448","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607448,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0NDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:00:15Z","updated_at":"2025-01-24T14:03:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42044717\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42044717</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidationAnnotations.java &#8212;<br/>\n    @@ -0,0 +1,216 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import java.lang.annotation.Retention;<br/>\n    +import java.lang.annotation.Target;<br/>\n    +<br/>\n    +import java.lang.annotation.ElementType;<br/>\n    +import java.lang.annotation.RetentionPolicy;<br/>\n    +<br/>\n    +/**<br/>\n    + * Note: every annotation interface must have method validatorClass()<br/>\n    + * For every annotation there must validator class to do the validation<br/>\n    + * To add another annotation for config validation, add another annotation @interface class.  Implement the corresponding<br/>\n    + * validator logic in a class in ConfigValidation.  Make sure validateField method in ConfigValidation knows how to use the validator<br/>\n    + * and which method definition/parameters to pass in based on what fields are in the annotation.<br/>\n    + */<br/>\n    +public class ConfigValidationAnnotations {<br/>\n    +    /**<br/>\n    +     * Field names for annotations<br/>\n    +     */<br/>\n    +<br/>\n    +    static final String VALIDATOR_CLASS = \"validatorClass\";<br/>\n    +    static final String TYPE = \"type\";<br/>\n    +    static final String ENTRY_VALIDATOR_CLASSES = \"entryValidatorClasses\";<br/>\n    +    static final String KEY_VALIDATOR_CLASSES = \"keyValidatorClasses\";<br/>\n    +    static final String VALUE_VALIDATOR_CLASSES = \"valueValidatorClasses\";<br/>\n    +    static final String KEY_TYPE = \"keyType\";<br/>\n    +    static final String VALUE_TYPE = \"valueType\";<br/>\n    +    static final String INCLUDE_ZERO = \"includeZero\";<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validators with fields: validatorClass and type<br/>\n    +     */<br/>\n    +<br/>\n    +    @Retention(RetentionPolicy.RUNTIME)<br/>\n    +    @Target(ElementType.FIELD)<br/>\n    +    public @interface isType </p>\n{\n    +Class validatorClass() default ConfigValidation.SimpleTypeValidator.class;\n    +\n    +Class type();\n    +    }\n<p>    +<br/>\n    +    @Retention(RetentionPolicy.RUNTIME)<br/>\n    +    @Target(ElementType.FIELD)<br/>\n    +    public @interface isStrings {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Perhaps isStringList so it matches isStringOrStringList.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607448/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607453","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607453","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607453,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0NTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:05:37Z","updated_at":"2025-01-24T14:03:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42045456\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42045456</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidationAnnotations.java &#8212;<br/>\n    @@ -0,0 +1,216 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import java.lang.annotation.Retention;<br/>\n    +import java.lang.annotation.Target;<br/>\n    +<br/>\n    +import java.lang.annotation.ElementType;<br/>\n    +import java.lang.annotation.RetentionPolicy;<br/>\n    +<br/>\n    +/**<br/>\n    + * Note: every annotation interface must have method validatorClass()<br/>\n    + * For every annotation there must validator class to do the validation<br/>\n    + * To add another annotation for config validation, add another annotation @interface class.  Implement the corresponding<br/>\n    + * validator logic in a class in ConfigValidation.  Make sure validateField method in ConfigValidation knows how to use the validator<br/>\n    + * and which method definition/parameters to pass in based on what fields are in the annotation.<br/>\n    + */<br/>\n    +public class ConfigValidationAnnotations {<br/>\n    +    /**<br/>\n    +     * Field names for annotations<br/>\n    +     */<br/>\n    +<br/>\n    +    static final String VALIDATOR_CLASS = \"validatorClass\";<br/>\n    +    static final String TYPE = \"type\";<br/>\n    +    static final String ENTRY_VALIDATOR_CLASSES = \"entryValidatorClasses\";<br/>\n    +    static final String KEY_VALIDATOR_CLASSES = \"keyValidatorClasses\";<br/>\n    +    static final String VALUE_VALIDATOR_CLASSES = \"valueValidatorClasses\";<br/>\n    +    static final String KEY_TYPE = \"keyType\";<br/>\n    +    static final String VALUE_TYPE = \"valueType\";<br/>\n    +    static final String INCLUDE_ZERO = \"includeZero\";<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validators with fields: validatorClass and type<br/>\n    +     */<br/>\n    +<br/>\n    +    @Retention(RetentionPolicy.RUNTIME)<br/>\n    +    @Target(ElementType.FIELD)<br/>\n    +    public @interface isType </p>\n{\n    +Class validatorClass() default ConfigValidation.SimpleTypeValidator.class;\n    +\n    +Class type();\n    +    }\n<p>    +<br/>\n    +    @Retention(RetentionPolicy.RUNTIME)<br/>\n    +    @Target(ElementType.FIELD)<br/>\n    +    public @interface isStrings {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    sounds good, will fix</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607453/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148180252","html_url":"https://github.com/apache/storm/pull/785#issuecomment-148180252","issue_url":"https://api.github.com/repos/apache/storm/issues/785","id":148180252,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE4MDI1Mg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:05:46Z","updated_at":"2015-10-14T20:05:46Z","author_association":"CONTRIBUTOR","body":"Filed https://issues.apache.org/jira/browse/STORM-1111 as a follow on to have the correct validation on each of the configs.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148180252/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607455","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607455","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607455,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:05:47Z","updated_at":"2025-01-24T14:03:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#issuecomment-148180252\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#issuecomment-148180252</a></p>\n\n<p>    Filed <a href=\"https://issues.apache.org/jira/browse/STORM-1111\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-1111</a> as a follow on to have the correct validation on each of the configs.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607455/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607456","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607456","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607456,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0NTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:07:01Z","updated_at":"2025-01-24T14:03:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42045623\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42045623</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) {\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    +     */<br/>\n    +    public static class ListEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] validators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, o);<br/>\n    +    for (Object entry : (Iterable) o) {<br/>\n    +for (Class validator : validators) {<br/>\n    +    Object v = validator.newInstance();<br/>\n    +    if (v instanceof Validator) </p>\n{\n    +((Validator) v).validateField(name + \" list entry\", entry);\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in ListEntryCustomValidator.  Individual entry validators must a instance of Validator class\", validator.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates each key and value in a map of a certain type<br/>\n    +     */<br/>\n    +    public static class MapEntryTypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class keyType, Class valueType, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(keyType, valueType, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class MapEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] keyValidators, Class[] valueValidators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }\n<p>    +    //check if Map<br/>\n    +    SimpleTypeValidator isMap = new SimpleTypeValidator();<br/>\n    +    isMap.validateField(name, Map.class, o);<br/>\n    +    for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) o).entrySet()) {<br/>\n    +for (Class kv : keyValidators) {<br/>\n    +    Object keyValidator = kv.newInstance();<br/>\n    +    if (keyValidator instanceof Validator) </p>\n{\n    +((Validator) keyValidator).validateField(name + \" Map key\", entry.getKey());\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate keys.  Individual entry validators must a instance of Validator class\", kv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +for (Class vv : valueValidators) {<br/>\n    +    Object valueValidator = vv.newInstance();<br/>\n    +    if (valueValidator instanceof Validator) </p>\n{\n    +((Validator) valueValidator).validateField(name + \" Map value\", entry.getValue());\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate values.  Individual entry validators must a instance of Validator class\", vv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    It might be good to add a concise javadoc for this class as we have done for others; maybe something like `validates each key and each value against the respective arrays of validators`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607456/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607462","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607462","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607462,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0NjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:09:48Z","updated_at":"2025-01-24T14:03:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42045972\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42045972</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) {\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    +     */<br/>\n    +    public static class ListEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] validators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, o);<br/>\n    +    for (Object entry : (Iterable) o) {<br/>\n    +for (Class validator : validators) {<br/>\n    +    Object v = validator.newInstance();<br/>\n    +    if (v instanceof Validator) </p>\n{\n    +((Validator) v).validateField(name + \" list entry\", entry);\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in ListEntryCustomValidator.  Individual entry validators must a instance of Validator class\", validator.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates each key and value in a map of a certain type<br/>\n    +     */<br/>\n    +    public static class MapEntryTypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class keyType, Class valueType, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(keyType, valueType, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class MapEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] keyValidators, Class[] valueValidators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }\n<p>    +    //check if Map<br/>\n    +    SimpleTypeValidator isMap = new SimpleTypeValidator();<br/>\n    +    isMap.validateField(name, Map.class, o);<br/>\n    +    for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) o).entrySet()) {<br/>\n    +for (Class kv : keyValidators) {<br/>\n    +    Object keyValidator = kv.newInstance();<br/>\n    +    if (keyValidator instanceof Validator) </p>\n{\n    +((Validator) keyValidator).validateField(name + \" Map key\", entry.getKey());\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate keys.  Individual entry validators must a instance of Validator class\", kv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +for (Class vv : valueValidators) {<br/>\n    +    Object valueValidator = vv.newInstance();<br/>\n    +    if (valueValidator instanceof Validator) </p>\n{\n    +((Validator) valueValidator).validateField(name + \" Map value\", entry.getValue());\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate values.  Individual entry validators must a instance of Validator class\", vv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    will add</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607462/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607465","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607465","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607465,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:10:43Z","updated_at":"2025-01-24T14:03:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42046068\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42046068</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) {\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    +     */<br/>\n    +    public static class ListEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] validators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, o);<br/>\n    +    for (Object entry : (Iterable) o) {<br/>\n    +for (Class validator : validators) {<br/>\n    +    Object v = validator.newInstance();<br/>\n    +    if (v instanceof Validator) </p>\n{\n    +((Validator) v).validateField(name + \" list entry\", entry);\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in ListEntryCustomValidator.  Individual entry validators must a instance of Validator class\", validator.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates each key and value in a map of a certain type<br/>\n    +     */<br/>\n    +    public static class MapEntryTypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class keyType, Class valueType, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(keyType, valueType, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class MapEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] keyValidators, Class[] valueValidators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if Map<br/>\n    +    SimpleTypeValidator isMap = new SimpleTypeValidator();<br/>\n    +    isMap.validateField(name, Map.class, o);<br/>\n    +    for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) o).entrySet()) {<br/>\n    +for (Class kv : keyValidators) {<br/>\n    +    Object keyValidator = kv.newInstance();<br/>\n    +    if (keyValidator instanceof Validator) {\n    +((Validator) keyValidator).validateField(name + \" Map key\", entry.getKey());\n    +    } else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate keys.  Individual entry validators must a instance of Validator class\", kv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +for (Class vv : valueValidators) {<br/>\n    +    Object valueValidator = vv.newInstance();<br/>\n    +    if (valueValidator instanceof Validator) {\n    +((Validator) valueValidator).validateField(name + \" Map value\", entry.getValue());\n    +    } else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate values.  Individual entry validators must a instance of Validator class\", vv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a positive number<br/>\n    +     */<br/>\n    +    public static class PositiveNumberValidator extends Validator{<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {\n    +    validateField(name, false, o);\n    +}<br/>\n    +<br/>\n    +    public void validateField(String name, boolean includeZero, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Number) {<br/>\n    +if(includeZero == true) {<br/>\n    +    if (((Number) o).doubleValue() >= 0.0) </p>\n{\n    +return;\n    +    }<br/>\n    +} else {<br/>\n    +    if (((Number) o).doubleValue() > 0.0) {    +return;    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a Positive Number\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Methods for validating confs<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a field given field name as string<br/>\n    +     *<br/>\n    +     * @param fieldName provided as a string<br/>\n    +     * @param conf      map of confs<br/>\n    +     */<br/>\n    +    public static void validateField(String fieldName, Map conf) throws NoSuchFieldException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </p>\n{\n    +validateField(fieldName, conf, CONFIG_CLASS);\n    +    }\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    Is this method needed?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607465/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148181607","html_url":"https://github.com/apache/storm/pull/772#issuecomment-148181607","issue_url":"https://api.github.com/repos/apache/storm/issues/772","id":148181607,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE4MTYwNw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:11:35Z","updated_at":"2015-10-14T20:11:35Z","author_association":"CONTRIBUTOR","body":"The test failure looks unrelated I am +1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148181607/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612606507","html_url":"https://github.com/apache/storm/issues/4917#issuecomment-2612606507","issue_url":"https://api.github.com/repos/apache/storm/issues/4917","id":2612606507,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDY1MDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:11:37Z","updated_at":"2025-01-24T14:03:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/772#issuecomment-148181607\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/772#issuecomment-148181607</a></p>\n\n<p>    The test failure looks unrelated I am +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612606507/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148182253","html_url":"https://github.com/apache/storm/pull/799#issuecomment-148182253","issue_url":"https://api.github.com/repos/apache/storm/issues/799","id":148182253,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE4MjI1Mw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:14:25Z","updated_at":"2015-10-14T20:14:25Z","author_association":"CONTRIBUTOR","body":"The failures look unrelated.  We got failures in nimbus-auth-test, but nothing showed up in the logs, so I am not really sure how/why they failed.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148182253/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611382","html_url":"https://github.com/apache/storm/issues/4948#issuecomment-2612611382","issue_url":"https://api.github.com/repos/apache/storm/issues/4948","id":2612611382,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTEzODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:14:26Z","updated_at":"2025-01-24T14:05:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/799#issuecomment-148182253\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/799#issuecomment-148182253</a></p>\n\n<p>    The failures look unrelated.  We got failures in nimbus-auth-test, but nothing showed up in the logs, so I am not really sure how/why they failed.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611382/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148183568","html_url":"https://github.com/apache/storm/pull/459#issuecomment-148183568","issue_url":"https://api.github.com/repos/apache/storm/issues/459","id":148183568,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE4MzU2OA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:20:05Z","updated_at":"2015-10-14T20:20:59Z","author_association":"CONTRIBUTOR","body":"-1 \nI don't really see much benefit to this.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148183568/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148184473","html_url":"https://github.com/apache/storm/pull/296#issuecomment-148184473","issue_url":"https://api.github.com/repos/apache/storm/issues/296","id":148184473,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE4NDQ3Mw==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:23:50Z","updated_at":"2015-10-14T20:23:50Z","author_association":"CONTRIBUTOR","body":"@caofangkun, @revans2, @kishorvpatil, @xiaokang\n\nAny movement on this?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148184473/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504830","html_url":"https://github.com/apache/storm/issues/4374#issuecomment-2612504830","issue_url":"https://api.github.com/repos/apache/storm/issues/4374","id":2612504830,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MDQ4MzA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:23:51Z","updated_at":"2025-01-24T13:14:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/296#issuecomment-148184473\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/296#issuecomment-148184473</a></p>\n\n<p>    @caofangkun, @revans2, @kishorvpatil, @xiaokang</p>\n\n<p>    Any movement on this?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504830/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607469","html_url":"https://github.com/apache/storm/issues/4922#issuecomment-2612607469","issue_url":"https://api.github.com/repos/apache/storm/issues/4922","id":2612607469,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MDc0Njk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:27:42Z","updated_at":"2025-01-24T14:03:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user jerrypeng commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/785#discussion_r42048224\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/785#discussion_r42048224</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/validation/ConfigValidation.java &#8212;<br/>\n    @@ -0,0 +1,518 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package backtype.storm.validation;<br/>\n    +<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.lang.annotation.Annotation;<br/>\n    +import java.lang.reflect.Field;<br/>\n    +import java.lang.reflect.InvocationTargetException;<br/>\n    +import java.util.HashSet;<br/>\n    +import java.util.Map;<br/>\n    +<br/>\n    +/**<br/>\n    + * Provides functionality for validating configuration fields.<br/>\n    + */<br/>\n    +public class ConfigValidation {<br/>\n    +<br/>\n    +    private static final Class CONFIG_CLASS = backtype.storm.Config.class;<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(ConfigValidation.class);<br/>\n    +<br/>\n    +    public static abstract class Validator </p>\n{\n    +public abstract void validateField(String name, Object o);\n    +    }\n<p>    +<br/>\n    +    public abstract static class TypeValidator </p>\n{\n    +public abstract void validateField(String name, Class type, Object o);\n    +    }\n<p>    +<br/>\n    +    /**<br/>\n    +     * Validator definitions<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if an object is not null<br/>\n    +     */<br/>\n    +<br/>\n    +    public static class NotNullValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +throw new IllegalArgumentException(\"Field \" + name + \"cannot be null! Actual value: \" + o);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates basic types<br/>\n    +     */<br/>\n    +    public static class SimpleTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class type, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    if (type.isInstance(o)) {    +return;    +    }\n<p>    +    throw new IllegalArgumentException(\"Field \" + name + \" must be of type \" + type + \". Object: \" + o + \" actual type: \" + o.getClass());<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static class StringValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, String.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class BooleanValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Boolean.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class NumberValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Number.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class DoubleValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    SimpleTypeValidator validator = new SimpleTypeValidator();\n    +    validator.validateField(name, Double.class, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a Integer.<br/>\n    +     */<br/>\n    +    public static class IntegerValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) </p>\n{\n    +    validateInteger(name, o);\n    +}\n<p>    +<br/>\n    +public void validateInteger(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +if (i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be an Integer within type range.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a map of Strings to a map of Strings to a list.<br/>\n    +     * {str -> {str -> [str,str]}<br/>\n    +     */<br/>\n    +    public static class MapOfStringToMapValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.mapFv(ConfigValidationUtils.fv(String.class, false),<br/>\n    +    ConfigValidationUtils.listFv(String.class, false), false), true);<br/>\n    +    validator.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates a list of has no dupicates<br/>\n    +     */<br/>\n    +    public static class NoDuplicateInListValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object field) {<br/>\n    +    if (field == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, field);<br/>\n    +    HashSet<Object> objectSet = new HashSet<Object>();<br/>\n    +    for (Object o : (Iterable) field) {<br/>\n    +if (objectSet.contains(o)) {\n    +    throw new IllegalArgumentException(name + \" should contain no duplicate elements\");\n    +}<br/>\n    +objectSet.add(o);<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a String or a list of Strings<br/>\n    +     */<br/>\n    +    public static class StringOrStringListValidator extends Validator {<br/>\n    +<br/>\n    +private ConfigValidationUtils.FieldValidator fv = ConfigValidationUtils.listFv(String.class, false);<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof String) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    try {\n    +isIterable.validateField(name, Iterable.class, o);\n    +    } catch (Exception ex) {\n    +    }<br/>\n    +    this.fv.validateField(name, o);<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates Kryo Registration<br/>\n    +     */<br/>\n    +    public static class KryoRegValidator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Iterable) {<br/>\n    +for (Object e : (Iterable) o) {<br/>\n    +    if (e instanceof Map) {<br/>\n    +for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) e).entrySet()) {<br/>\n    +    if (!(entry.getKey() instanceof String) ||<br/>\n    +    !(entry.getValue() instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +    } else if (!(e instanceof String)) </p>\n{\n    +throw new IllegalArgumentException(\n    +\"Each element of the list \" + name + \" must be a String or a Map of Strings\");\n    +    }\n<p>    +}<br/>\n    +return;<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(<br/>\n    +    \"Field \" + name + \" must be an Iterable containing only Strings or Maps of Strings\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates if a number is a power of 2<br/>\n    +     */<br/>\n    +    public static class PowerOf2Validator extends Validator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    final long i;<br/>\n    +    if (o instanceof Number &&<br/>\n    +    (i = ((Number) o).longValue()) == ((Number) o).doubleValue()) {<br/>\n    +// Test whether the integer is a power of 2.<br/>\n    +if (i > 0 && (i & (i - 1)) == 0) {\n    +    return;\n    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a power of 2.\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates each entry in a list<br/>\n    +     */<br/>\n    +    public static class ListEntryTypeValidator extends TypeValidator {<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Class type, Object o) {\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.listFv(type, false);\n    +    validator.validateField(name, o);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates entry in the a list with a list of custom validator<br/>\n    +     */<br/>\n    +    public static class ListEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] validators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    //check if iterable<br/>\n    +    SimpleTypeValidator isIterable = new SimpleTypeValidator();<br/>\n    +    isIterable.validateField(name, Iterable.class, o);<br/>\n    +    for (Object entry : (Iterable) o) {<br/>\n    +for (Class validator : validators) {<br/>\n    +    Object v = validator.newInstance();<br/>\n    +    if (v instanceof Validator) </p>\n{\n    +((Validator) v).validateField(name + \" list entry\", entry);\n    +    }\n<p> else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in ListEntryCustomValidator.  Individual entry validators must a instance of Validator class\", validator.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * validates each key and value in a map of a certain type<br/>\n    +     */<br/>\n    +    public static class MapEntryTypeValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class keyType, Class valueType, Object o) </p>\n{\n    +    ConfigValidationUtils.NestableFieldValidator validator = ConfigValidationUtils.mapFv(keyType, valueType, false);\n    +    validator.validateField(name, o);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static class MapEntryCustomValidator {<br/>\n    +<br/>\n    +public void validateField(String name, Class[] keyValidators, Class[] valueValidators, Object o) throws IllegalAccessException, InstantiationException {<br/>\n    +    if (o == null) </p>\n{\n    +return;\n    +    }<br/>\n    +    //check if Map<br/>\n    +    SimpleTypeValidator isMap = new SimpleTypeValidator();<br/>\n    +    isMap.validateField(name, Map.class, o);<br/>\n    +    for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) o).entrySet()) {<br/>\n    +for (Class kv : keyValidators) {<br/>\n    +    Object keyValidator = kv.newInstance();<br/>\n    +    if (keyValidator instanceof Validator) {\n    +((Validator) keyValidator).validateField(name + \" Map key\", entry.getKey());\n    +    } else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate keys.  Individual entry validators must a instance of Validator class\", kv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +for (Class vv : valueValidators) {<br/>\n    +    Object valueValidator = vv.newInstance();<br/>\n    +    if (valueValidator instanceof Validator) {\n    +((Validator) valueValidator).validateField(name + \" Map value\", entry.getValue());\n    +    } else {<br/>\n    +LOG.warn(\"validator: {} cannot be used in MapEntryCustomValidator to validate values.  Individual entry validators must a instance of Validator class\", vv.getName());<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a positive number<br/>\n    +     */<br/>\n    +    public static class PositiveNumberValidator extends Validator{<br/>\n    +<br/>\n    +@Override<br/>\n    +public void validateField(String name, Object o) {\n    +    validateField(name, false, o);\n    +}<br/>\n    +<br/>\n    +    public void validateField(String name, boolean includeZero, Object o) {<br/>\n    +    if (o == null) {    +return;    +    }\n<p>    +    if (o instanceof Number) {<br/>\n    +if(includeZero == true) {<br/>\n    +    if (((Number) o).doubleValue() >= 0.0) </p>\n{\n    +return;\n    +    }<br/>\n    +} else {<br/>\n    +    if (((Number) o).doubleValue() > 0.0) {    +return;    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +    throw new IllegalArgumentException(\"Field \" + name + \" must be a Positive Number\");<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Methods for validating confs<br/>\n    +     */<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Validates a field given field name as string<br/>\n    +     *<br/>\n    +     * @param fieldName provided as a string<br/>\n    +     * @param conf      map of confs<br/>\n    +     */<br/>\n    +    public static void validateField(String fieldName, Map conf) throws NoSuchFieldException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </p>\n{\n    +validateField(fieldName, conf, CONFIG_CLASS);\n    +    }\n<p>    &#8212; End diff &#8211;</p>\n\n<p>    useful if a developer would like to validate a field in a conf map at any point.  The developer can just call:</p>\n\n<p>     validateField(Config.EXAMPLE_CONF, confMap)</p>\n\n<p>    instead of trying to get the corresponding Field object first.  Just make the code cleaner if someone else decides to validates some configs in the future</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612607469/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148193041","html_url":"https://github.com/apache/storm/pull/799#issuecomment-148193041","issue_url":"https://api.github.com/repos/apache/storm/issues/799","id":148193041,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE5MzA0MQ==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:45:01Z","updated_at":"2015-10-14T20:45:01Z","author_association":"CONTRIBUTOR","body":"Tests pass on my machine. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148193041/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611388","html_url":"https://github.com/apache/storm/issues/4948#issuecomment-2612611388","issue_url":"https://api.github.com/repos/apache/storm/issues/4948","id":2612611388,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MTEzODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:45:05Z","updated_at":"2025-01-24T14:05:25Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/799#issuecomment-148193041\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/799#issuecomment-148193041</a></p>\n\n<p>    Tests pass on my machine. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612611388/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148193597","html_url":"https://github.com/apache/storm/pull/341#issuecomment-148193597","issue_url":"https://api.github.com/repos/apache/storm/issues/341","id":148193597,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE5MzU5Nw==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T20:46:53Z","updated_at":"2015-10-14T20:46:53Z","author_association":"CONTRIBUTOR","body":"@anyatch ping\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148193597/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612530166","html_url":"https://github.com/apache/storm/issues/4543#issuecomment-2612530166","issue_url":"https://api.github.com/repos/apache/storm/issues/4543","id":2612530166,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MzAxNjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T21:01:27Z","updated_at":"2025-01-24T13:27:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/432#discussion_r42052527\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/432#discussion_r42052527</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/backtype/storm/utils/Utils.java &#8212;<br/>\n    @@ -306,7 +327,30 @@ public static ComponentCommon getComponentCommon(StormTopology topology, String<br/>\n     }<br/>\n     throw new IllegalArgumentException(\"Could not find component with id \" + id);<br/>\n }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><p>    +<br/>\n    +    public static List<String> getStrings(final Object o) {<br/>\n    +if (o == null) {<br/>\n    +    return Collections.emptyList();</p>\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    All of the other lists here are mutable, but this isn't. <br/>\n    I'd rather see a new ArrayList, since it's a public method.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612530166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148199687","html_url":"https://github.com/apache/storm/pull/432#issuecomment-148199687","issue_url":"https://api.github.com/repos/apache/storm/issues/432","id":148199687,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODE5OTY4Nw==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T21:02:46Z","updated_at":"2015-10-14T21:02:46Z","author_association":"CONTRIBUTOR","body":"@revans2, @harshach  Any updates here?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148199687/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612530167","html_url":"https://github.com/apache/storm/issues/4543#issuecomment-2612530167","issue_url":"https://api.github.com/repos/apache/storm/issues/4543","id":2612530167,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MzAxNjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T21:02:47Z","updated_at":"2025-01-24T13:27:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/432#issuecomment-148199687\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/432#issuecomment-148199687</a></p>\n\n<p>    @revans2, @harshach  Any updates here?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612530167/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612532441","html_url":"https://github.com/apache/storm/issues/4561#issuecomment-2612532441","issue_url":"https://api.github.com/repos/apache/storm/issues/4561","id":2612532441,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MzI0NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T21:14:53Z","updated_at":"2025-01-24T13:28:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/476#discussion_r42054199\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/476#discussion_r42054199</a></p>\n\n<p>    &#8212; Diff: bin/storm.cmd &#8212;<br/>\n    @@ -90,6 +90,7 @@<br/>\n       )<br/>\n       set path=%PATH%;%STORM_BIN_DIR%;%STORM_SBIN_DIR%<br/>\n       call start /b \"%storm-command%\" \"%JAVA%\" %JAVA_HEAP_MAX% %STORM_OPTS% %STORM_LOG_FILE% %CLASS% %storm-command-arguments%<br/>\n    +  exit /b %ERRORLEVEL%<br/>\n       goto :eof<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    We can get rid of this `goto :eof` now, right?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612532441/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148202852","html_url":"https://github.com/apache/storm/pull/296#issuecomment-148202852","issue_url":"https://api.github.com/repos/apache/storm/issues/296","id":148202852,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODIwMjg1Mg==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T21:15:28Z","updated_at":"2015-10-14T21:15:28Z","author_association":"CONTRIBUTOR","body":"The code still looks good.  It needs to be upmerged because the heartbeats have moved to use thrift.  I would love to see this go in.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148202852/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504834","html_url":"https://github.com/apache/storm/issues/4374#issuecomment-2612504834","issue_url":"https://api.github.com/repos/apache/storm/issues/4374","id":2612504834,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MDQ4MzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T21:15:29Z","updated_at":"2025-01-24T13:14:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/296#issuecomment-148202852\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/296#issuecomment-148202852</a></p>\n\n<p>    The code still looks good.  It needs to be upmerged because the heartbeats have moved to use thrift.  I would love to see this go in.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504834/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/148204828","html_url":"https://github.com/apache/storm/pull/396#issuecomment-148204828","issue_url":"https://api.github.com/repos/apache/storm/issues/396","id":148204828,"node_id":"MDEyOklzc3VlQ29tbWVudDE0ODIwNDgyOA==","user":{"login":"knusbaum","id":1819836,"node_id":"MDQ6VXNlcjE4MTk4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1819836?v=4","gravatar_id":"","url":"https://api.github.com/users/knusbaum","html_url":"https://github.com/knusbaum","followers_url":"https://api.github.com/users/knusbaum/followers","following_url":"https://api.github.com/users/knusbaum/following{/other_user}","gists_url":"https://api.github.com/users/knusbaum/gists{/gist_id}","starred_url":"https://api.github.com/users/knusbaum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knusbaum/subscriptions","organizations_url":"https://api.github.com/users/knusbaum/orgs","repos_url":"https://api.github.com/users/knusbaum/repos","events_url":"https://api.github.com/users/knusbaum/events{/privacy}","received_events_url":"https://api.github.com/users/knusbaum/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T21:19:37Z","updated_at":"2015-10-14T21:19:37Z","author_association":"CONTRIBUTOR","body":"-0\n\nI don't really think this is a useful thing to add to the UI. If we want to add it to the JSON API, I'm okay with that, but let's not display it on the UI.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/148204828/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612521703","html_url":"https://github.com/apache/storm/issues/4479#issuecomment-2612521703","issue_url":"https://api.github.com/repos/apache/storm/issues/4479","id":2612521703,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MjE3MDM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T21:19:38Z","updated_at":"2025-01-24T13:22:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/396#issuecomment-148204828\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/396#issuecomment-148204828</a></p>\n\n<p>    -0</p>\n\n<p>    I don't really think this is a useful thing to add to the UI. If we want to add it to the JSON API, I'm okay with that, but let's not display it on the UI.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612521703/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504840","html_url":"https://github.com/apache/storm/issues/4374#issuecomment-2612504840","issue_url":"https://api.github.com/repos/apache/storm/issues/4374","id":2612504840,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI1MDQ4NDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2015-10-14T21:26:13Z","updated_at":"2025-01-24T13:14:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user knusbaum commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/296#discussion_r42055642\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/296#discussion_r42055642</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/backtype/storm/daemon/supervisor.clj &#8212;<br/>\n    @@ -155,7 +155,9 @@<br/>\n      (or (not (contains? approved-ids id))<br/>\n  (not (matches-an-assignment? hb assigned-executors)))<br/>\n:disallowed</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>(or<br/>\n    + (or (or (nil? (:process-id hb)) (not (exists-process? (:process-id hb)))))\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Double `or` unnecessary.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612504840/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]