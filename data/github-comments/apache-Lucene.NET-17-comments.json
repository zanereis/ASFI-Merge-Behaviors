[{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1299613751","html_url":"https://github.com/apache/lucenenet/issues/648#issuecomment-1299613751","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/648","id":1299613751,"node_id":"IC_kwDOAAJ06c5Ndog3","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T05:54:14Z","updated_at":"2022-11-02T05:54:14Z","author_association":"CONTRIBUTOR","body":"> @nikcio - I found what appears to be a bug in the scan: https://sonarcloud.io/project/issues?issues=AYPAuOCLhbfJOGLOoaG2&open=AYPAuOCLhbfJOGLOoaG2&id=nikcio_lucenenet\r\n> \r\n> The scan is recommending to convert from [`protected internal`](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/protected-internal) to [`private protected`](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/private-protected). The former allows internal (public-like) access within the assembly and protected access outside of the assembly. The latter allows protected access within the assembly and **no access** outside of the assembly.\r\n> \r\n> I double-checked, and indeed it is possible to inherit `FieldCacheRangeFilter<T>` outside of the assembly.\r\n> \r\n> ```cs\r\n>     public class Foo : FieldCacheRangeFilter<double>\r\n>     {\r\n>         public Foo()\r\n>             : base(\"foo\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, lowerVal: 444.444, upperVal: 555.555, includeLower: true, includeUpper: true)\r\n>         {\r\n>         }\r\n> \r\n>         public override DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs)\r\n>         {\r\n>             throw new NotImplementedException();\r\n>         }\r\n>     }\r\n> ```\r\n> \r\n> Clearly the advice given by the scan is incorrect if we want this to remain a `protected` constructor outside of the assembly.\r\n> \r\n> That being said, checking with the [Lucene 4.8.0 source](https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.0/lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter.java#L59-L71) the constructor is actually declared `private`, so this is also a Java to C# translation bug and it should ultimately be made `private protected` as the scan indicated.\r\n> \r\n> > **NOTE:** `protected internal` was initially put on all `protected` APIs because in Java it is possible to call a protected member within the same package like it is public. However, `protected internal` is a big mess when it is combined with toggling on and off `InternalsVisibleToAttribute` as required. Once `InternalsVisibleToAttribute` is enabled, all of the subclasses need to be changed from `protected` to `protected internal` to match accessibility. Ideally, we would avoid `protected internal` and use `protected` when we can, but since some internal places use these APIs like they are public, we need it in those specific cases.\r\n\r\nI guess I am also going to have to state that this bug is probably going to be helpful to find all of the protected APIs that were translated from Java to C# wrong. So, we should wait until #677 is closed before we report it to SonarCloud.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1299613751/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1299678389","html_url":"https://github.com/apache/lucenenet/issues/648#issuecomment-1299678389","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/648","id":1299678389,"node_id":"IC_kwDOAAJ06c5Nd4S1","user":{"login":"nikcio","id":24605285,"node_id":"MDQ6VXNlcjI0NjA1Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/24605285?v=4","gravatar_id":"","url":"https://api.github.com/users/nikcio","html_url":"https://github.com/nikcio","followers_url":"https://api.github.com/users/nikcio/followers","following_url":"https://api.github.com/users/nikcio/following{/other_user}","gists_url":"https://api.github.com/users/nikcio/gists{/gist_id}","starred_url":"https://api.github.com/users/nikcio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikcio/subscriptions","organizations_url":"https://api.github.com/users/nikcio/orgs","repos_url":"https://api.github.com/users/nikcio/repos","events_url":"https://api.github.com/users/nikcio/events{/privacy}","received_events_url":"https://api.github.com/users/nikcio/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T07:11:24Z","updated_at":"2022-11-02T07:11:24Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I've just looked a bit on it and I don't think the rule is wrong. If you read the title it says it's because the class is marked abstract and therefore can't be instantiated: https://sonarcloud.io/organizations/nikcio/rules?open=csharpsquid%3AS3442&rule_key=csharpsquid%3AS3442\n\nTherefore, in the example it would make most sense to change the modifier to `protected` and not private. If you would maintain the same level of access and is not taking the Java source into account (as you stated the modifier is wrong and should be private)\n\nDo note that the rule specifics that the modifier shouldn't be public/internal not that it should always be private.😉","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1299678389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1299969105","html_url":"https://github.com/apache/lucenenet/issues/737#issuecomment-1299969105","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/737","id":1299969105,"node_id":"IC_kwDOAAJ06c5Ne_RR","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T09:59:37Z","updated_at":"2022-11-02T09:59:37Z","author_association":"CONTRIBUTOR","body":"> > And related to this, would it make sense to enable the Nullable feature across the project to give a informative public API for the developers using Lucene.NET? Here we could mark variables and parameters that can be null at some point. This should be possible to do step by step by adding the #nullable enable that I can see you've used in some files.\r\n\r\nWell, you've come to a similar conclusion that I have - nullable warnings, nullable reference types, guard clauses, and exception documentation comments are all intimately linked together. It is best if these are all dealt with together. Recently `OfflineSorter` was updated to include these in https://github.com/apache/lucenenet/pull/733/commits/c0ba34db214c7ca48c0914d2d80bc3b09abe12b9. The whole `Lucene.Net.Spatial` module was also done in https://github.com/apache/lucenenet/pull/619.\r\n\r\nBut it is a huge task because it requires careful analysis. If we average 30 minutes per file, it is about ~1500 hours of work.\r\n\r\nAlso, although this can technically be enabled one file at a time, it doesn't end up working out that way because anything a file is dependent upon that is newly `#nullable enable` is suddenly going to show warnings that would need to be addressed after the job was already \"done\" for a that file. It works out best to start at the base of the dependency tree and then work out to all of the submodules that depend on them.\r\n\r\nOf course, we also have some classes that are higher in priority than others. Certainly, all of the main APIs used in the demos are the most important ones to enable nullable reference types on. There are several APIs where `null` is allowed as a parameter, so this would make it easier to understand that it is a valid value just by looking at Intellisense.\r\n\r\nAll of that being said, we can break this up into chunks to make it easier to manage, for sure.\r\n\r\n\r\n> > Which is similar to the version we have which should therefore mean that the same issue is still present in the Java version too? Therefore I'm wondering what's the best approach for fixing these errors or if they should be fixed at all.\r\n\r\n## Asserts vs Guard Clauses\r\n\r\nIt is common in Java to simply let exceptions happen and then deal with them later. This is why most of the guard clauses are missing that would stop these null reference warnings showing up in the scan. Guard clauses are a thing in Java, but they are much less common than in .NET. \r\n\r\nIn Lucene, there are a ton of things that I would call \"guard clauses\" that were made into asserts ([example](https://github.com/apache/lucenenet/pull/733/commits/c0ba34db214c7ca48c0914d2d80bc3b09abe12b9#diff-42faf9ca5c301c1a1bae397b5a115db9f8d41d524359db26cd5e1a74637a54a0L580-L585)). Since asserts can be enabled or disabled in Java, this sort of makes sense - the performance of checking whether values are valid is mitigated in production when asserts are disabled. However, in conversations I have had with @rclabo, we both agree that it doesn't make much sense to expect .NET users to have to *enable* guard clauses. They should always be there.\r\n\r\nIMO, we should also add additional guard clauses that check for `null` even if they didn't exist in Lucene, which is a better approach to getting rid of these warnings than suppressing them. An `ArgumentNullException` or `InvalidOperationException` is an intentional design decision. A `NullReferenceException` is a bug.\r\n\r\n> **NOTE:** At least having an analyzer already pre-built that identifies these is one less custom analyzer we need to create to locate these issues, so that part of the job is done.\r\n\r\nOne more thing to consider is what impact changing the exception type might have on code that uses the API. We've done a review of exceptions in https://github.com/apache/lucenenet/pull/476/files, and I am fairly confident there won't be much impact with changing from `AssertionError` to `ArgumentException` or `ArgumentNullException`. `ArgumentOutOfRangeException` may take some additional care because in Java there are [3 different exceptions that map to 2 in .NET](https://github.com/apache/lucenenet/blob/c076e40b14d4c20e6fdfee4e28d0b3332cf6d0ce/src/Lucene.Net/Support/ExceptionHandling/ExceptionExtensions.cs#L220-L266). So, we will need pretty thorough testing on each section that is changed to ensure we aren't catching errors where we shouldn't be. The extension methods used in catch blocks take care of much of it, but they are not 100% thorough because the mapping isn't perfect, not every catch block has been converted, and sometimes we simply needed a design change to make it function.\r\n\r\n> **NOTE:** Some of the IO components are set up to always throw `ArgumentOutOfRangeException` instead of `ArgumentException` when checking `index` and `length` to ensure they are within the bounds of the array (as is typical in .NET) because in Java these would throw `IndexOutOfBoundsException`.\r\n\r\n## Inheritance\r\n\r\nAnother thing to consider is how heavily Lucene depends on inheritance and the fact that when you make a `#nullable` decision on the API of the base class, it is enforced for every class that inherits it. That can go against the grain of Lucene's design where a [base class](https://github.com/apache/lucenenet/blob/c076e40b14d4c20e6fdfee4e28d0b3332cf6d0ce/src/Lucene.Net.Queries/Function/ValueSource.cs#L61) has both [subclasses that do not accept `null`](https://github.com/apache/lucenenet/blob/c076e40b14d4c20e6fdfee4e28d0b3332cf6d0ce/src/Lucene.Net.Queries/Function/ValueSources/NormValueSource.cs#L52) and [subclasses that do accept `null`](https://github.com/apache/lucenenet/blob/c076e40b14d4c20e6fdfee4e28d0b3332cf6d0ce/src/Lucene.Net.Queries/Function/ValueSources/TermFreqValueSource.cs#L45). I haven't looked into this too thoroughly - there might be some way around it that I am unaware of.\r\n\r\n> An option under consideration for this particular case is simply to make them all allow `null`, but have them instantiate a new dictionary when `null` is passed to ensure it doesn't throw. This is an API design change, but would make the API easier to work with.\r\n>\r\n> This really ought to be a `IDictionary<TKey, TValue>` rather than `IDictionary`, also, but that is another project.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1299969105/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300448061","html_url":"https://github.com/apache/lucenenet/issues/737#issuecomment-1300448061","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/737","id":1300448061,"node_id":"IC_kwDOAAJ06c5Ng0M9","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T13:54:16Z","updated_at":"2022-11-02T13:54:16Z","author_association":"CONTRIBUTOR","body":"Man I don't know guys.  That's a mountain of work and I'm not sure it adds a lot of value.   It'd be one thing if we were experiencing lots of stability issues related to exceptions thrown due to dereferencing null references but that's just not the case.  The Nullable feature is a nice add-on to the C# language but just because it's been added to the language doesn't mean that we need to implement it in LuceneNET.  It would be really sad to see the LuceneNET production release delayed further to support the Nullable feature in my opinion.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300448061/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300484717","html_url":"https://github.com/apache/lucenenet/issues/737#issuecomment-1300484717","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/737","id":1300484717,"node_id":"IC_kwDOAAJ06c5Ng9Jt","user":{"login":"nikcio","id":24605285,"node_id":"MDQ6VXNlcjI0NjA1Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/24605285?v=4","gravatar_id":"","url":"https://api.github.com/users/nikcio","html_url":"https://github.com/nikcio","followers_url":"https://api.github.com/users/nikcio/followers","following_url":"https://api.github.com/users/nikcio/following{/other_user}","gists_url":"https://api.github.com/users/nikcio/gists{/gist_id}","starred_url":"https://api.github.com/users/nikcio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikcio/subscriptions","organizations_url":"https://api.github.com/users/nikcio/orgs","repos_url":"https://api.github.com/users/nikcio/repos","events_url":"https://api.github.com/users/nikcio/events{/privacy}","received_events_url":"https://api.github.com/users/nikcio/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T14:09:31Z","updated_at":"2022-11-02T14:09:31Z","author_association":"CONTRIBUTOR","body":"Yeah after the explanation above I think the same. It would be great to have at some point but it shouldn't be blocking any releases. And with an rough estimate of ~1500 as stated above it properly isn't something that would realistic to complete in a sensible timeframe without more time and funding added to the project. But I think it's great to have an issue tracking it so any progress can be referenced and so it can be used as a reference for new commers to the project.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300484717/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300537291","html_url":"https://github.com/apache/lucenenet/issues/737#issuecomment-1300537291","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/737","id":1300537291,"node_id":"IC_kwDOAAJ06c5NhJ_L","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T14:31:59Z","updated_at":"2022-11-02T14:31:59Z","author_association":"CONTRIBUTOR","body":"@nikcio  I'd agree with that.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300537291/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300594973","html_url":"https://github.com/apache/lucenenet/issues/644#issuecomment-1300594973","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/644","id":1300594973,"node_id":"IC_kwDOAAJ06c5NhYEd","user":{"login":"chenhh021","id":26926033,"node_id":"MDQ6VXNlcjI2OTI2MDMz","avatar_url":"https://avatars.githubusercontent.com/u/26926033?v=4","gravatar_id":"","url":"https://api.github.com/users/chenhh021","html_url":"https://github.com/chenhh021","followers_url":"https://api.github.com/users/chenhh021/followers","following_url":"https://api.github.com/users/chenhh021/following{/other_user}","gists_url":"https://api.github.com/users/chenhh021/gists{/gist_id}","starred_url":"https://api.github.com/users/chenhh021/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chenhh021/subscriptions","organizations_url":"https://api.github.com/users/chenhh021/orgs","repos_url":"https://api.github.com/users/chenhh021/repos","events_url":"https://api.github.com/users/chenhh021/events{/privacy}","received_events_url":"https://api.github.com/users/chenhh021/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T14:55:34Z","updated_at":"2022-11-02T14:55:34Z","author_association":"CONTRIBUTOR","body":"I find lucene ever fix the same bug via this [commit](https://github.com/apache/lucene/commit/26628b2717a73235db56fde94f7f5b64cbc5b8b2) . Although it was done for lucene 9.4, the changed code is shared by the present version of lucene.net. \r\n\r\nI have created a [PR](https://github.com/apache/lucenenet/pull/738) mimic that commit. What I have done include:\r\n\r\n1.Reimplement QuadPrefixTree's getCell method;\r\n2. Add a version check so the older versions still use the older implementation.\r\n\r\nCould anyone take a review?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300594973/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300740087","html_url":"https://github.com/apache/lucenenet/issues/737#issuecomment-1300740087","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/737","id":1300740087,"node_id":"IC_kwDOAAJ06c5Nh7f3","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T15:51:35Z","updated_at":"2022-11-02T15:51:35Z","author_association":"CONTRIBUTOR","body":"I don't think you guys appreciate the power that the scan gave us. It turned ~1500 hours of unspecified work with a vague notion of \"let's fix the main APIs first\" into a very targeted few dozen hours of work to hit the most problematic areas first. All while avoiding having to change exception behavior in a breaking way after the release.\r\n\r\nSure, this was near the bottom in terms of priority - and still is - but having a hard target to hit bumps it up a bit in my opinion. Clean up the squeaky wheels that the scan gave us, and then fix the rest at some point after the release (most notably, the APIs that allow null that the scan isn't showing us).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300740087/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300755603","html_url":"https://github.com/apache/lucenenet/issues/737#issuecomment-1300755603","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/737","id":1300755603,"node_id":"IC_kwDOAAJ06c5Nh_ST","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T15:57:34Z","updated_at":"2022-11-02T15:57:34Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Ok, I hear ya.  But consider this.  When was the last time you saw Lucene.NET throw an exception due to a null reference?  Personally I've been running it for a couple years now and NEVER encountered such an exception. Just sayin.  ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300755603/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300798260","html_url":"https://github.com/apache/lucenenet/issues/737#issuecomment-1300798260","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/737","id":1300798260,"node_id":"IC_kwDOAAJ06c5NiJs0","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T16:13:26Z","updated_at":"2022-11-02T16:13:26Z","author_association":"CONTRIBUTOR","body":"Well, that is because you know what you are doin' :).\r\n\r\nBut those mere mortals who allow a `null` to pass into one of our APIs might be chasing their tail for awhile because the null gets passed down through 5 or so more APIs before it hits the one that throws. A guard clause makes the stack trace much more explicit as to where the problem lies. And who knows how long they will chase their tail if they don't even have a vague notion that they can turn on asserts.\r\n\r\n> What has been most enlightening about the scan is that it is pointing us to very specific areas that have a small problem, and in several instances it led to finding a much bigger problem in the same area.  Even though the scan didn't pick it up the bigger problem as an issue.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300798260/reactions","total_count":4,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":1,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300962409","html_url":"https://github.com/apache/lucenenet/issues/732#issuecomment-1300962409","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/732","id":1300962409,"node_id":"IC_kwDOAAJ06c5Nixxp","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T17:20:39Z","updated_at":"2022-11-02T17:20:39Z","author_association":"CONTRIBUTOR","body":"Thanks.\r\n\r\nI am having trouble getting my VM up and running for Java debugging, but since I can read Thai, I reviewed the test and came up with a theory.\r\n\r\nThe original test is:\r\n\r\n```c#\r\nAssertAnalyzesTo(a, \"กล่องใส่รองเท้า ใส่ของอเนกประสงค์เปิดฝาด้านหน้า เนื้อพลาสติกแข็งชนิดเดียวกับแฟ้มหูหิ้ว\",\r\n                new string[] { \"กล่อง\", \"ใส่\", \"รองเท้า\", \"ใส่\", \"อเนกประสงค์\", \"ฝา\", \"หน้า\", \"เนื้อ\", \"พลาสติก\", \"แข็ง\", \"ชนิด\", \"แฟ้ม\", \"หู\", \"หิ้ว\" });\r\n```\r\n\r\nThe test passes if you put all of the words in it that are in the input:\r\n\r\n```c#\r\nAssertAnalyzesTo(a, \"กล่องใส่รองเท้า ใส่ของอเนกประสงค์เปิดฝาด้านหน้า เนื้อพลาสติกแข็งชนิดเดียวกับแฟ้มหูหิ้ว\",\r\n                new string[] { \"กล่อง\", \"ใส่\", \"รองเท้า\", \"ใส่\", \"ของ\", \"อเนกประสงค์\", \"เปิด\", \"ฝา\", \"ด้าน\", \"หน้า\", \"เนื้อ\", \"พลาสติก\", \"แข็ง\", \"ชนิด\", \"เดียว\", \"กับ\", \"แฟ้ม\", \"หู\", \"หิ้ว\" });\r\n```\r\n\r\nThe words that are being excluded are:\r\n\r\n- ของ (things/items)\r\n- เปิด (open)\r\n- ด้าน (side/area)\r\n- เดียว (also)\r\n- กับ (with)\r\n\r\nThese appear to be common stop words. One thing to note: a tokenizer is only 1 component of an analyzer. I suspect you have a `StopFilter` in the analyzer you are using that does not exist in the [analyzer for the test](https://github.com/apache/lucenenet/blob/c076e40b14d4c20e6fdfee4e28d0b3332cf6d0ce/src/Lucene.Net.Tests.Analysis.ICU/Analysis/Icu/Segmentation/TestICUTokenizer.cs#L76-L81).\r\n\r\n> **SIDE NOTE:** There does appear to be a discrepancy in that the tests indicate they are ported from 7.1.0 but the production code indicates it is ported from 8.6.1. I need to check, but it is entirely possible that this was just because we reviewed the production code and it hadn't changed between 7.1.0 and 8.6.1, but we should have done the tests as well. However, the [8.6.1 analyzer](https://github.com/apache/lucene/blob/releases/lucene-solr/8.6.1/lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer.java#L73-L79) is different from the [7.1.0 analyzer](https://github.com/apache/lucene/blob/releases/lucene-solr/8.6.1/lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer.java#L73-L79), which is what we are currently testing with. There is an extra `ICUNormalizer2Filter` in the 7.1.0 version of the test.\r\n\r\nIn any case, make sure your analyzer is built from the same components in both envirnoments.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300962409/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300978918","html_url":"https://github.com/apache/lucenenet/issues/732#issuecomment-1300978918","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/732","id":1300978918,"node_id":"IC_kwDOAAJ06c5Ni1zm","user":{"login":"krinsang","id":11673823,"node_id":"MDQ6VXNlcjExNjczODIz","avatar_url":"https://avatars.githubusercontent.com/u/11673823?v=4","gravatar_id":"","url":"https://api.github.com/users/krinsang","html_url":"https://github.com/krinsang","followers_url":"https://api.github.com/users/krinsang/followers","following_url":"https://api.github.com/users/krinsang/following{/other_user}","gists_url":"https://api.github.com/users/krinsang/gists{/gist_id}","starred_url":"https://api.github.com/users/krinsang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krinsang/subscriptions","organizations_url":"https://api.github.com/users/krinsang/orgs","repos_url":"https://api.github.com/users/krinsang/repos","events_url":"https://api.github.com/users/krinsang/events{/privacy}","received_events_url":"https://api.github.com/users/krinsang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T17:27:47Z","updated_at":"2022-11-02T17:27:47Z","author_association":"NONE","body":"Yes, you're correct about the `StopFilter`. The `StopFilter` is reflected isometrically between both .NET and Java. I've reviewed the results again without the `StopFilter` but I'm still running into issues. A specific example:\r\n.NET:\r\n```\r\nkeyword: กล่องใส่รองเท้า\r\ntokenized components: \"กลอง\", \"ใส\", \"รอง\", \"เทา\"\r\n```\r\nJava:\r\n```\r\nkeyword: กล่องใส่รองเท้า\r\ntokenized components: \"กล่อง\", \"ใส่\", \"รองเท้า\"\r\n```\r\n\r\nIt seems as if the ICUTokenizer in .NET seems to tokenize the keywords into small units which is not observed in Java.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300978918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300996655","html_url":"https://github.com/apache/lucenenet/issues/732#issuecomment-1300996655","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/732","id":1300996655,"node_id":"IC_kwDOAAJ06c5Ni6Iv","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T17:36:29Z","updated_at":"2022-11-02T17:36:29Z","author_association":"CONTRIBUTOR","body":"That looks like it could be a side effect of the `ICUNormalizer2Filter`.\r\n\r\n- เทา (grey)\r\n- เท้า (foot)\r\n- รองเท้า (shoes)\r\n\r\n\r\nRemoving the diacratics changes the meaning in Thai.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1300996655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1301013659","html_url":"https://github.com/apache/lucenenet/issues/732#issuecomment-1301013659","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/732","id":1301013659,"node_id":"IC_kwDOAAJ06c5Ni-Sb","user":{"login":"krinsang","id":11673823,"node_id":"MDQ6VXNlcjExNjczODIz","avatar_url":"https://avatars.githubusercontent.com/u/11673823?v=4","gravatar_id":"","url":"https://api.github.com/users/krinsang","html_url":"https://github.com/krinsang","followers_url":"https://api.github.com/users/krinsang/followers","following_url":"https://api.github.com/users/krinsang/following{/other_user}","gists_url":"https://api.github.com/users/krinsang/gists{/gist_id}","starred_url":"https://api.github.com/users/krinsang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krinsang/subscriptions","organizations_url":"https://api.github.com/users/krinsang/orgs","repos_url":"https://api.github.com/users/krinsang/repos","events_url":"https://api.github.com/users/krinsang/events{/privacy}","received_events_url":"https://api.github.com/users/krinsang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-02T17:52:23Z","updated_at":"2022-11-02T17:52:23Z","author_association":"NONE","body":"I am not using the `ICUNormalizer2Filter` anywhere in my code, and I'm not seeing that it's being referenced in the `ICUTokenizer` class.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1301013659/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1301635515","html_url":"https://github.com/apache/lucenenet/issues/732#issuecomment-1301635515","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/732","id":1301635515,"node_id":"IC_kwDOAAJ06c5NlWG7","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T04:47:11Z","updated_at":"2022-11-03T04:47:11Z","author_association":"CONTRIBUTOR","body":"Could you post the code for how you are constructing the analyzer including how you are setting up the `StopFilter`? Something in your token stream is filtering out diacratics. We are most likely looking at some sort of a gap between how .NET and Java handle localization or normalization, but this doesn't appear to be directly related to `ICUTokenizer` or `CharArraySet`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1301635515/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1301788992","html_url":"https://github.com/apache/lucenenet/issues/732#issuecomment-1301788992","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/732","id":1301788992,"node_id":"IC_kwDOAAJ06c5Nl7lA","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T08:41:14Z","updated_at":"2022-11-03T08:41:14Z","author_association":"CONTRIBUTOR","body":"Oh, and be sure to include the culture name (i.e. `en-US`) of the thread you are running this on.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1301788992/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302078346","html_url":"https://github.com/apache/lucenenet/pull/738#issuecomment-1302078346","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/738","id":1302078346,"node_id":"IC_kwDOAAJ06c5NnCOK","user":{"login":"chenhh021","id":26926033,"node_id":"MDQ6VXNlcjI2OTI2MDMz","avatar_url":"https://avatars.githubusercontent.com/u/26926033?v=4","gravatar_id":"","url":"https://api.github.com/users/chenhh021","html_url":"https://github.com/chenhh021","followers_url":"https://api.github.com/users/chenhh021/followers","following_url":"https://api.github.com/users/chenhh021/following{/other_user}","gists_url":"https://api.github.com/users/chenhh021/gists{/gist_id}","starred_url":"https://api.github.com/users/chenhh021/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chenhh021/subscriptions","organizations_url":"https://api.github.com/users/chenhh021/orgs","repos_url":"https://api.github.com/users/chenhh021/repos","events_url":"https://api.github.com/users/chenhh021/events{/privacy}","received_events_url":"https://api.github.com/users/chenhh021/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T13:05:30Z","updated_at":"2022-11-03T13:06:16Z","author_association":"CONTRIBUTOR","body":"Thanks for the review and telling the reasons that this PR cannot get accepted.  I'll try to fix the related problem in my own fork.\r\n\r\nI'm just wondering how to treat the related issue, is it okay that just let it open there?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302078346/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302103214","html_url":"https://github.com/apache/lucenenet/pull/738#issuecomment-1302103214","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/738","id":1302103214,"node_id":"IC_kwDOAAJ06c5NnISu","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T13:17:09Z","updated_at":"2022-11-03T13:17:09Z","author_association":"CONTRIBUTOR","body":"I agree with @NightOwl888 .  That said, @chenhh021 I'd also like to thank you for the PR.  While it doesn't make sense at this point to merge this into LuceneNET 4.8, having this PR linked from the related issue provides code that may help someone in the future if they run up against this issue in LuceneNET 4.8.  So your contribution may well end up helping others (even me!).  So it's very much appreciated.  Thank you.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302103214/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302254848","html_url":"https://github.com/apache/lucenenet/issues/732#issuecomment-1302254848","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/732","id":1302254848,"node_id":"IC_kwDOAAJ06c5NntUA","user":{"login":"krinsang","id":11673823,"node_id":"MDQ6VXNlcjExNjczODIz","avatar_url":"https://avatars.githubusercontent.com/u/11673823?v=4","gravatar_id":"","url":"https://api.github.com/users/krinsang","html_url":"https://github.com/krinsang","followers_url":"https://api.github.com/users/krinsang/followers","following_url":"https://api.github.com/users/krinsang/following{/other_user}","gists_url":"https://api.github.com/users/krinsang/gists{/gist_id}","starred_url":"https://api.github.com/users/krinsang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krinsang/subscriptions","organizations_url":"https://api.github.com/users/krinsang/orgs","repos_url":"https://api.github.com/users/krinsang/repos","events_url":"https://api.github.com/users/krinsang/events{/privacy}","received_events_url":"https://api.github.com/users/krinsang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T15:08:08Z","updated_at":"2022-11-03T15:08:08Z","author_association":"NONE","body":"[Analyzers.zip](https://github.com/apache/lucenenet/files/9930442/Analyzers.zip)\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302254848/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302465382","html_url":"https://github.com/apache/lucenenet/issues/732#issuecomment-1302465382","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/732","id":1302465382,"node_id":"IC_kwDOAAJ06c5Nogtm","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T17:46:56Z","updated_at":"2022-11-03T17:46:56Z","author_association":"CONTRIBUTOR","body":"Thanks. Still no luck getting the results you are seeing. I tried both `net5.0` and `net48` and even checked out the beta 14 tag to see if there was a difference, but no dice.\r\n\r\nOne thing of note: Thai has no concept of uppercase/lowercase, so if you are not analyzing text with other scripts in it that can be omitted. It will also improve performance.\r\n\r\nSo, for a repro we need to know more about your environment:\r\n\r\n1. Which runtime are you using? .NET Framework, .NET Core, Unity, Xamarin, Mono, etc? Which specific version?\r\n2. Which OS are you trying this on? Which specific version?\r\n3. What is the default culture set to on the OS?\r\n4. What is the culture of the current thread when you run this?\r\n\r\nIt would also be helpful if you could setup a basic test that fails in an environment such as GitHub Actions or Azure DevOps so we can rule out anything with your specific environment.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302465382/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302485501","html_url":"https://github.com/apache/lucenenet/issues/644#issuecomment-1302485501","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/644","id":1302485501,"node_id":"IC_kwDOAAJ06c5Noln9","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T18:03:52Z","updated_at":"2022-11-05T09:38:00Z","author_association":"CONTRIBUTOR","body":"This is a duplicate of [LUCENE-8755](https://issues.apache.org/jira/browse/LUCENE-8755), and will be fixed when we upgrade to 8.3.0. For now, we will be sticking with the 4.8.0 behavior.\r\n\r\nFor those who wish to have a patch before then, the `AbstractPrefixTreeFilter` and `SpatialPrefixTree` are both abstract and the `QuadPrefixTree` is not sealed and all members are virtual so it can be extended to include the patch, if necessary.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302485501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302489013","html_url":"https://github.com/apache/lucenenet/pull/738#issuecomment-1302489013","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/738","id":1302489013,"node_id":"IC_kwDOAAJ06c5Nome1","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T18:06:55Z","updated_at":"2022-11-03T18:07:17Z","author_association":"CONTRIBUTOR","body":"> Thanks for the review and telling the reasons that this PR cannot get accepted. I'll try to fix the related problem in my own fork.\r\n> \r\n> I'm just wondering how to treat the related issue, is it okay that just let it open there?\r\n\r\nBeing that this issue is technically a duplicate of [LUCENE-8755](https://issues.apache.org/jira/browse/LUCENE-8755) and will go away when we upgrade the port, I have just closed it. However, if you could work out how to extend `QuadPrefixTree` (or replace it, whichever is sensible) and share your final solution there, I am sure others looking for an answer to this would find it helpful.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302489013/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302612314","html_url":"https://github.com/apache/lucenenet/issues/732#issuecomment-1302612314","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/732","id":1302612314,"node_id":"IC_kwDOAAJ06c5NpEla","user":{"login":"krinsang","id":11673823,"node_id":"MDQ6VXNlcjExNjczODIz","avatar_url":"https://avatars.githubusercontent.com/u/11673823?v=4","gravatar_id":"","url":"https://api.github.com/users/krinsang","html_url":"https://github.com/krinsang","followers_url":"https://api.github.com/users/krinsang/followers","following_url":"https://api.github.com/users/krinsang/following{/other_user}","gists_url":"https://api.github.com/users/krinsang/gists{/gist_id}","starred_url":"https://api.github.com/users/krinsang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krinsang/subscriptions","organizations_url":"https://api.github.com/users/krinsang/orgs","repos_url":"https://api.github.com/users/krinsang/repos","events_url":"https://api.github.com/users/krinsang/events{/privacy}","received_events_url":"https://api.github.com/users/krinsang/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T20:10:29Z","updated_at":"2022-11-03T20:11:45Z","author_association":"NONE","body":"I've deduced the problem down to a difference in the way that the normalizer for Java and .NET were handling accented characters. While .NET's `System.String.Normalize` was able to detect and decompose the accented characters, the `Normalizer` class in `java.text` did not apply the same modifications to the original query. After removing the accent stripping function from both .NET and Java, now I am seeing that the problem that I was running into is not related to the ICUTokenizer. Thanks for the help!\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302612314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302615014","html_url":"https://github.com/apache/lucenenet/pull/709#issuecomment-1302615014","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/709","id":1302615014,"node_id":"IC_kwDOAAJ06c5NpFPm","user":{"login":"nikcio","id":24605285,"node_id":"MDQ6VXNlcjI0NjA1Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/24605285?v=4","gravatar_id":"","url":"https://api.github.com/users/nikcio","html_url":"https://github.com/nikcio","followers_url":"https://api.github.com/users/nikcio/followers","following_url":"https://api.github.com/users/nikcio/following{/other_user}","gists_url":"https://api.github.com/users/nikcio/gists{/gist_id}","starred_url":"https://api.github.com/users/nikcio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikcio/subscriptions","organizations_url":"https://api.github.com/users/nikcio/orgs","repos_url":"https://api.github.com/users/nikcio/repos","events_url":"https://api.github.com/users/nikcio/events{/privacy}","received_events_url":"https://api.github.com/users/nikcio/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-03T20:13:36Z","updated_at":"2022-11-03T20:13:36Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I see you've tested the workflow it seams the SONAR_TOKEN isn't added correctly yet\n\n`Sonar login is formated incorrectly` 😉","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1302615014/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1303013631","html_url":"https://github.com/apache/lucenenet/pull/709#issuecomment-1303013631","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/709","id":1303013631,"node_id":"IC_kwDOAAJ06c5Nqmj_","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-04T06:03:56Z","updated_at":"2022-11-04T06:03:56Z","author_association":"CONTRIBUTOR","body":"> @NightOwl888 I see you've tested the workflow it seams the SONAR_TOKEN isn't added correctly yet\r\n> \r\n> `Sonar login is formated incorrectly` 😉\r\n\r\n@nikcio\r\n\r\nActually, it is supposed to be SONARCLOUD_TOKEN. Infra finally provided a link to the official documentation, which is not SEO optimized: https://cwiki.apache.org/confluence/display/INFRA/SonarCloud+for+ASF+projects.\r\n\r\n> Side note: I sent you an email a couple of days ago to the address on your GitHub profile. While there is no rush, I just wanted to confirm you saw it and it didn't end up in your SPAM filter. If we need to have it sent to another email address because it bounced, please let me know the alternate address (you can send an email to the address in my profile to provide it).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1303013631/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304434125","html_url":"https://github.com/apache/lucenenet/pull/740#issuecomment-1304434125","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/740","id":1304434125,"node_id":"IC_kwDOAAJ06c5NwBXN","user":{"login":"sonarqubecloud[bot]","id":39514782,"node_id":"MDM6Qm90Mzk1MTQ3ODI=","avatar_url":"https://avatars.githubusercontent.com/in/12526?v=4","gravatar_id":"","url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D","html_url":"https://github.com/apps/sonarqubecloud","followers_url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D/followers","following_url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D/repos","events_url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/sonarqubecloud%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"created_at":"2022-11-05T07:46:44Z","updated_at":"2022-11-05T07:46:44Z","author_association":"NONE","body":"Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=apache_lucenenet&pullRequest=740)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=apache_lucenenet&pullRequest=740&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=apache_lucenenet&pullRequest=740&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=apache_lucenenet&pullRequest=740&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=apache_lucenenet&pullRequest=740&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=apache_lucenenet&pullRequest=740&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=apache_lucenenet&pullRequest=740&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=apache_lucenenet&pullRequest=740&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=apache_lucenenet&pullRequest=740&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=apache_lucenenet&pullRequest=740&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=apache_lucenenet&pullRequest=740&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=apache_lucenenet&pullRequest=740&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=apache_lucenenet&pullRequest=740&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=apache_lucenenet&pullRequest=740&metric=coverage&view=list) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=apache_lucenenet&pullRequest=740&metric=duplicated_lines_density&view=list) No Duplication information\n\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304434125/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304477381","html_url":"https://github.com/apache/lucenenet/pull/709#issuecomment-1304477381","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/709","id":1304477381,"node_id":"IC_kwDOAAJ06c5NwL7F","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-05T10:17:15Z","updated_at":"2022-11-05T10:17:15Z","author_association":"CONTRIBUTOR","body":"So, ran into a snag: Apache doesn't allow scans to be run from a PR from a fork. And only Apache committers are allowed to push to `apache/lucenenet` which is a rare thing, anyway. That basically makes the PR scan useless.\r\n\r\nI have looked at several of the projects at: https://sonarcloud.io/organizations/apache/projects, and indeed couldn't find a single one that has a PR count greater than 0.\r\n\r\nI took a look into the repositories, and some of them have switched to using CodeQL instead. I suspect this is because there is a `github/codeql/action/analyze` plugin officially released by GitHub, and therefore it is in Apache's approved list.\r\n\r\nExample: https://github.com/apache/commons-compress/blob/910bfc05f7ca693f87166ca376980107d13fa2b5/.github/workflows/codeql-analysis.yml\r\n\r\nThat being said, I am not sure how much mileage we will get out of this in PRs, anyway.\r\n\r\n1. This is going to make the checks for the PR run even longer.\r\n2. Diverging from the original Java code is discouraged, so PRs with large amounts of code changes are not likely to be accepted, anyway. A scan for code changes just isn't all that useful until we start working on the upgrade.\r\n3. We don't want existing problems showing up in scans for minor bug fixes or documentation changes that are contributed.\r\n\r\nIf we instead set this up as a nightly scan:\r\n\r\n1. We can take as much time as needed to do the scan.\r\n2. When the results are in, we can have an email sent to [the build mailing list](https://lucenenet.apache.org/contributing/mailing-lists.html#builds-builds) with a link to the scan report.\r\n3. We can set up a code coverage report.\r\n\r\nI found a doc that says there is no time limit for running Apache agents. Although, they only have 180 agents across 1200 projects, hanging onto 1 of them for 3-4 hours probably isn't that big of a deal.\r\n\r\nhttps://infra.apache.org/github-actions-secrets.html\r\n\r\n> **NOTE:**: We already have a  [nightly build set up on Azure DevOps](https://dev.azure.com/lucene-net/Lucene.NET/_build?definitionId=4), but there is a 1 hour time limit on each agent, so it is less than ideal for doing something like this. It occasionally fails because the original Lucene setup took about 4 hours and we had to cut down the number of iterations to get it under 1 hour. But there are still some slow random choices that it makes that put it over 1 hour - the test framework wasn't designed with a time limit in mind.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304477381/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304621387","html_url":"https://github.com/apache/lucenenet/issues/413#issuecomment-1304621387","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/413","id":1304621387,"node_id":"IC_kwDOAAJ06c5NwvFL","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-05T19:47:00Z","updated_at":"2022-11-05T19:47:00Z","author_association":"CONTRIBUTOR","body":"Closing this, as it is simply more unplanned work to do for the 4.8.0 release and will eventually be available when Lucene.NET is upgraded. Porting the implementation from Lucene 5.2 is likely possible for those who wish to have that version.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304621387/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304621691","html_url":"https://github.com/apache/lucenenet/issues/639#issuecomment-1304621691","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/639","id":1304621691,"node_id":"IC_kwDOAAJ06c5NwvJ7","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-05T19:49:11Z","updated_at":"2022-11-05T19:49:11Z","author_association":"CONTRIBUTOR","body":"Closing, as this appears to be resolved.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304621691/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304624546","html_url":"https://github.com/apache/lucenenet/issues/637#issuecomment-1304624546","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/637","id":1304624546,"node_id":"IC_kwDOAAJ06c5Nwv2i","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-05T19:58:35Z","updated_at":"2022-11-05T19:58:35Z","author_association":"CONTRIBUTOR","body":"Sorry for the delay. This isn't the right place to be asking user questions for Lucene.NET. We have a [user mailing list](https://lucenenet.apache.org/contributing/index.html#ask-a-question) for that, but you are probably more likely to get an answer on [StackOverflow](https://stackoverflow.com/questions/tagged/lucene.net) or by asking on the [Lucene Java-user mailing list](https://lucene.apache.org/core/discussion.html). Questions like this will have the same answer in both .NET and Java, so if you ask on StackOverflow be sure to add both the `lucene` and `lucene.net` tags.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304624546/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304625866","html_url":"https://github.com/apache/lucenenet/issues/643#issuecomment-1304625866","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/643","id":1304625866,"node_id":"IC_kwDOAAJ06c5NwwLK","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-05T20:03:50Z","updated_at":"2022-11-05T20:03:50Z","author_association":"CONTRIBUTOR","body":"Closing as this appears to be resolved.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304625866/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304644648","html_url":"https://github.com/apache/lucenenet/issues/648#issuecomment-1304644648","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/648","id":1304644648,"node_id":"IC_kwDOAAJ06c5Nw0wo","user":{"login":"nikcio","id":24605285,"node_id":"MDQ6VXNlcjI0NjA1Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/24605285?v=4","gravatar_id":"","url":"https://api.github.com/users/nikcio","html_url":"https://github.com/nikcio","followers_url":"https://api.github.com/users/nikcio/followers","following_url":"https://api.github.com/users/nikcio/following{/other_user}","gists_url":"https://api.github.com/users/nikcio/gists{/gist_id}","starred_url":"https://api.github.com/users/nikcio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikcio/subscriptions","organizations_url":"https://api.github.com/users/nikcio/orgs","repos_url":"https://api.github.com/users/nikcio/repos","events_url":"https://api.github.com/users/nikcio/events{/privacy}","received_events_url":"https://api.github.com/users/nikcio/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-05T21:25:16Z","updated_at":"2022-11-05T21:25:16Z","author_association":"CONTRIBUTOR","body":"As #709 has been merged and seems to be working I've updated the links in the open issues to link to the new sonar report: `https://sonarcloud.io/project/overview?id=apache_lucenenet` if you find links that have yet to be updated please help out updating them. 😄\r\n\r\nMostly the link is the same with a change in the `id=` query parameter to `id=apache_lucenenet` instead of `id=nikcio_lucenenet` if the link isn't specific to a single issue.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304644648/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304647370","html_url":"https://github.com/apache/lucenenet/issues/648#issuecomment-1304647370","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/648","id":1304647370,"node_id":"IC_kwDOAAJ06c5Nw1bK","user":{"login":"nikcio","id":24605285,"node_id":"MDQ6VXNlcjI0NjA1Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/24605285?v=4","gravatar_id":"","url":"https://api.github.com/users/nikcio","html_url":"https://github.com/nikcio","followers_url":"https://api.github.com/users/nikcio/followers","following_url":"https://api.github.com/users/nikcio/following{/other_user}","gists_url":"https://api.github.com/users/nikcio/gists{/gist_id}","starred_url":"https://api.github.com/users/nikcio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikcio/subscriptions","organizations_url":"https://api.github.com/users/nikcio/orgs","repos_url":"https://api.github.com/users/nikcio/repos","events_url":"https://api.github.com/users/nikcio/events{/privacy}","received_events_url":"https://api.github.com/users/nikcio/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-05T21:43:39Z","updated_at":"2022-11-05T21:43:39Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 As I have no power to change the states of the issues on the official sonarcloud issues it would be great if you could mark these two issues as won't fix as was done in prior conversations. \r\n\r\nThe issues viewed from my fork: https://sonarcloud.io/project/issues?resolutions=WONTFIX&id=nikcio_lucenenet\r\n\r\nIssue 1: https://sonarcloud.io/project/issues?issues=AYRH0UVF_qq9ReJdi5Au&open=AYRH0UVF_qq9ReJdi5Au&id=apache_lucenenet\r\n\r\nIssue 2: https://sonarcloud.io/project/issues?issues=AYRH0UO0_qq9ReJdi4_S&open=AYRH0UO0_qq9ReJdi4_S&id=apache_lucenenet","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304647370/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304827854","html_url":"https://github.com/apache/lucenenet/pull/650#issuecomment-1304827854","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/650","id":1304827854,"node_id":"IC_kwDOAAJ06c5NxhfO","user":{"login":"nikcio","id":24605285,"node_id":"MDQ6VXNlcjI0NjA1Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/24605285?v=4","gravatar_id":"","url":"https://api.github.com/users/nikcio","html_url":"https://github.com/nikcio","followers_url":"https://api.github.com/users/nikcio/followers","following_url":"https://api.github.com/users/nikcio/following{/other_user}","gists_url":"https://api.github.com/users/nikcio/gists{/gist_id}","starred_url":"https://api.github.com/users/nikcio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikcio/subscriptions","organizations_url":"https://api.github.com/users/nikcio/orgs","repos_url":"https://api.github.com/users/nikcio/repos","events_url":"https://api.github.com/users/nikcio/events{/privacy}","received_events_url":"https://api.github.com/users/nikcio/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-06T15:35:49Z","updated_at":"2022-11-06T15:35:49Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 @rclabo I've noticed that the only project still targeting a lower version than `net462` is `Lucene.Net.Replicator.AspNetCore` targeting  `net461` https://github.com/apache/lucenenet/blob/dfae964ce0a1b066fd808275fd81d90385cde3fe/src/dotnet/Lucene.Net.Replicator.AspNetCore/Lucene.Net.Replicator.AspNetCore.csproj#L28\r\n\r\nAs every project was updated to `net462` in this PR would it then make sense to have `Lucene.Net.Replicator.AspNetCore` targeting  `net462`  instead?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304827854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304848266","html_url":"https://github.com/apache/lucenenet/pull/650#issuecomment-1304848266","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/650","id":1304848266,"node_id":"IC_kwDOAAJ06c5NxmeK","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-06T17:10:19Z","updated_at":"2022-11-06T17:10:19Z","author_association":"CONTRIBUTOR","body":"@nikcio  I initially planned to remove Net461 and ran into a snag.  It turns out that to support one of the NetStandard targets we use Net461 for that build and more importantly need it to be a different framework version then any other build so that we can sense that NetStandand build by triggering on the targeted framework.  Doing something different was a bit of a rathole so I left it.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1304848266/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305024477","html_url":"https://github.com/apache/lucenenet/pull/650#issuecomment-1305024477","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/650","id":1305024477,"node_id":"IC_kwDOAAJ06c5NyRfd","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-07T03:10:16Z","updated_at":"2022-11-07T03:10:16Z","author_association":"CONTRIBUTOR","body":"@nikcio - Thanks for pointing that out. I just opened #747, since there is quite a bit to figuring out what to target and whether or not we need another package to include extension methods for wiring this up in AspNetCore across .NET Core and .NET Framework.\r\n\r\nThis is one of the few areas in the project that could be considered \"new\" development.\r\n\r\nI suspect that `net461` was picked here because one of the dependencies didn't have support for any target other than `netstandard2.0`, so we couldn't support anything lower than that.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305024477/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305099323","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-1305099323","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":1305099323,"node_id":"IC_kwDOAAJ06c5Nyjw7","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-07T05:22:42Z","updated_at":"2022-11-07T06:19:14Z","author_association":"CONTRIBUTOR","body":"@vvdb-architecture\r\n\r\nThanks. So that leaves the question - how do we enforce the [TokenStream workflow contract](https://lucenenet.apache.org/docs/4.8.0-beta00016/api/core/Lucene.Net.Analysis.TokenStream.html) in .NET?\r\n\r\nThe exception is meant to be a guide to help at development time to ensure all of the requirements of the contract are followed. Once the contract is being followed, this exception will never occur at runtime. So, that means the part that they are worried about - adding an exception handler inside a finally block - is not a thing that will ever need to happen.\r\n\r\nOne option I have considered is to build a Roslyn code analyzer to enforce this contract at design time, but I am not sure how complex it would be to analyze APIs of the user code no matter how they have it configured and ensure that all of the methods are called in the right sequence and the right number of times in the code. They could be building one or more abstractions that do some of the `TokenStream` operations while leaving the others somewhere else, or they may be in conditional parts of the code, for example.\r\n\r\nSome of [the rules](https://lucenenet.apache.org/docs/4.8.0-beta00015/api/core/Lucene.Net.Analysis.html#more-requirements-for-analysis-component-classes), such as enforcing the calls to `base.Reset()`, and `base.End()` when they are overridden would be easy to enforce, while others would take more work. The exception in the `Dispose()` method is definitely a simpler approach, but if we had an Roslyn code analyzer that worked reliably, it would help to speed up the development process by catching this sort of thing at design time instead of runtime.\r\n\r\nHowever, this still doesn't get us out of the situation we are in where `close()` then a call to `reset()` to start the `TokenStream` over from the beginning is allowed in Lucene - `Dispose()` is meant to be the final call that doesn't allow anything else to happen to the object. This is still a violation of the `Dispose()` contract in .NET, so we need to dig into whether `Close()` makes sense here, just to inform consumers that it is not actually a `Dispose()` operation. Or maybe `End()` is supposed to signify when the end of the stream is reached (after which case `Reset()` is allowed) and `Dispose()` is supposed to signify the end of the operation. In that case the [tight loop](https://github.com/apache/lucenenet/blob/081edeed35b190c1d535dcfdfeb91143f0ef818f/src/Lucene.Net/Index/DocFieldProcessor.cs#L280-L284) should be refactored never to call `Dispose()` inside of the loop and have a final loop at the end that calls `Dispose()` on all of the `TokenStreams` to ensure methods never are called after `Dispose()`.\r\n\r\nAccording to [this error message](https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.0/lucene/core/src/java/org/apache/lucene/analysis/Tokenizer.java#L110-L112), it is supposed to be invalid to call `reset()` multiple times. If that is really the case, then the [tight loop](https://github.com/apache/lucenenet/blob/081edeed35b190c1d535dcfdfeb91143f0ef818f/src/Lucene.Net/Index/DocFieldProcessor.cs#L280-L284) can be considered a bug that needs to be fixed, and we don't need to change `Dispose()` back to `Close()`. Although, the bug may boil down to the fact we added an [extra call to `Dispose()` in .NET](https://github.com/apache/lucenenet/blob/dfae964ce0a1b066fd808275fd81d90385cde3fe/src/Lucene.Net/Analysis/Tokenizer.cs#L76) and it shouldn't actually be there.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305099323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305117742","html_url":"https://github.com/apache/lucenenet/pull/745#issuecomment-1305117742","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/745","id":1305117742,"node_id":"IC_kwDOAAJ06c5NyoQu","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-07T05:50:32Z","updated_at":"2022-11-07T05:50:32Z","author_association":"CONTRIBUTOR","body":"Thanks. This will make a great addition, except I think we should hold off on merging it until after we have:\r\n\r\n1. Updated the CONTRIBUTING.md page to inform contributors not to submit PRs for random things out of the scan that we haven't decided whether or not we will fix.\r\n2. Added a [PR template](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates) indicating that only approved issues from SonarCloud will be accepted (approved being that they have been made into a GitHub issue). The PR templates would also allow us to put other guardrails in place so we don't have to reject PRs for people who were just trying to help out, but submitted something we cannot use in this version of Lucene.NET.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305117742/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305604942","html_url":"https://github.com/apache/lucenenet/pull/746#issuecomment-1305604942","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/746","id":1305604942,"node_id":"IC_kwDOAAJ06c5N0fNO","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-07T13:17:43Z","updated_at":"2022-11-07T13:17:43Z","author_association":"CONTRIBUTOR","body":"> ## Sidenote\r\n> Assuming the comment around this `Dispose` method is correct this issue can be removed as intended either in SonarCloud or in source: https://sonarcloud.io/project/issues?issues=AYRH0T17_qq9ReJdi40Q&open=AYRH0T17_qq9ReJdi40Q&id=apache_lucenenet\r\n\r\nIt looks like this was mainly done to prevent the end user from being able to override the default `Dispose(bool)` implementation and forget to call `base.Dispose(disposing);`. We can probably just make the protected `Dispose(bool)` into a virtual method and move the implementation there to address this warning as long as we include doc comments to always call the base implementation when overriding `Dispose(bool)`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305604942/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305623001","html_url":"https://github.com/apache/lucenenet/pull/746#issuecomment-1305623001","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/746","id":1305623001,"node_id":"IC_kwDOAAJ06c5N0jnZ","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-07T13:32:29Z","updated_at":"2022-11-07T13:32:29Z","author_association":"CONTRIBUTOR","body":"> ## `FSDirectory`\r\n> There's a commented `base.Disposing(disposed)` change in `FSDirectory` which when activated causes at least 140 tests to fail (I didn't run it all the way through when I noticed the error). Please validate that the `Dispose(bool)` method isn't supposed to call its base.\r\n\r\nI took a look and the only thing that `BufferedIndexOutput` does in its `Dispose(bool)` method is call `Flush()`. There is a comment at the top of `FSIndexOutput` that give some insight:\r\n\r\n```c#\r\n// LUCENENET specific: Since FileStream does its own buffering, this class was refactored\r\n// to do all checksum operations as well as writing to the FileStream. By doing this we elminate\r\n// the extra set of buffers that were only creating unnecessary memory allocations and copy operations.\r\n```\r\n\r\nSo, the inheritance chain was left unchanged (for consistency with Lucene), but we aren't actually using the functionality of the base class. Instead, we call `Flush()` on `FileStream` and dispose it.\r\n\r\nThe `BufferedIndexOutput` class doesn't actually have any `IDisposable` objects in it.\r\n\r\nThis looks fine.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305623001/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305633436","html_url":"https://github.com/apache/lucenenet/pull/746#issuecomment-1305633436","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/746","id":1305633436,"node_id":"IC_kwDOAAJ06c5N0mKc","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-07T13:40:45Z","updated_at":"2022-11-07T13:41:07Z","author_association":"CONTRIBUTOR","body":"> ## `base.Dispose(disposing)` referencing code\r\n> The `base.Dispose(disposing)` line in `BufferedCharFilter` references the dispose method in `Lucene.Net.Analysis.CharFilter`\r\n\r\nFYI - The `BufferedCharFilter` is a patch to fix `TextReader`, since .NET doesn't have a `BufferedTextReader`. So, we decorate a `TextReader` with this class in order to make it support the extra state and methods to make it \"buffered\".","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1305633436/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1306912515","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-1306912515","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":1306912515,"node_id":"IC_kwDOAAJ06c5N5ecD","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-08T09:38:02Z","updated_at":"2024-11-28T06:10:25Z","author_association":"CONTRIBUTOR","body":"After some research, I have determined the following:\r\n\r\n1. `Dispose()` doesn't actually throw anything. The failure happens when attempting to set up the next field using the same `TokenStream` instance.\r\n2. The reason why we get cascade failures in the tests when enforcing the dispose call is that the current `Dispose()` implementation both calls `TextReader.Dispose()` (which is good) and sets the state to an `ILLEGAL_STATE_READER` (which is bad). Ideally, we only close the open file handles if there is an exception somewhere in the middle that is interfering with our calls and leave the other state alone so the next test can pass.\r\n3. The design of the `close()` method being called multiple times per `TokenStream` instance is intentional. They are designed to be reused according to the `ReuseStrategy` used by the `Analyzer`. There is some discussion of this in [LUCENE-8651](https://issues.apache.org/jira/browse/LUCENE-8651).\r\n4. The bit that loops through the fields and calls the `TokenStream` methods `Reset()`, `IncrementToken()`, `End()`, and `Dispose()` is all in [DocInverterPerField](https://github.com/apache/lucenenet/blob/3a1ced448ed9e14264ec3b6af1cd093c28070287/src/Lucene.Net/Index/DocInverterPerField.cs#L107-L231).\r\n5. While `Analyzer` is `IDisposable`, it doesn't actually dispose any of its children (the state of the `ReuseStrategy` or any of its `TokenStreamComponents`), they are simply left to go out of scope.\r\n6. If we change `Dispose()` to `Close()` it only partially fixes the issue. The design doesn't allow for any long-lived or unmanaged state that is supposed to last the lifetime of the `TokenStream` instance. This makes it difficult to use anything that is expensive to set up in the implementation of a `TokenStream`. Something like that would need to be done in the `Analyzer` and passed into the `TokenStream` in the constructor in the call to `CreateComponents()`, which is not a clean separation of concerns.\r\n\r\nThe proposed solution to fix these issues is:\r\n\r\n- [x] Add a new interface `ICloseable` with a single method `Close()`. We clearly need to separate the concept of `Close()` (that can be reused) from `Dispose()` (where we are getting rid of the instance for good).\r\n- [x] Add back the `IOUtils.Close...` methods using the `ICloseable` interface. These are used in some places in a finally block to close a `TokenStream` and reset its state to `ILLEGAL_STATE_READER`.\r\n- [x] Change all current `Tokenizer`, `TokenStream`, and `TokenFilter` implementations from using `Dispose(bool)` to `Close()`.\r\n- [x] Add a `Dispose(bool)` method to the base `Tokenizer`, `TokenStream`, and `TokenFilter` implementation and possibly anything that needs to override it. The base implementation of `Dispose()` will differ from `Close()` only in that it will not use `ILLEGAL_STATE_READER`.\r\n- [ ] Track the `disposed` state of `Tokenizer`, `TokenStream`, and `TokenFilter` and throw `ObjectDisposedException` in all methods after `Dispose()` is called. This functionality will need to be disabled for the token stream tests, but we should have tests to verify it works in other cases. (needs more consideration)\r\n- [ ] Make `ReuseStrategy` implement `IDisposable` and have `Analyzer` dispose it in its `Dispose(bool)` method.\r\n- [ ] Make `TokenStreamComponents` implement `IDisposable` and have each `ReuseStrategy` implementation call each instance of it in its `Dispose(bool)` method. It can do this by calling `GetStoredValue(Analyzer)`, casting to the appropriate type, and calling `Dispose()` on all instances of `TokenStreamComponents` in the returned value.\r\n- [ ] Make `TokenStreamComponents.Dispose(bool)` cascade the call to its `Tokenizer` and `TokenStream`.\r\n- [ ] Change `BaseTokenStreamTestCase` to only call `TokenStream.Dispose()` in its finally block (a block that was added for .NET) rather than `Reset()`, `IncrementToken()`, `End()`, and `Close()`. This allows the test to dispose the open file handles without mutating the other state of the `TokenStream` that causes test failures.\r\n- Leave the existing runtime exceptions for misusing the [TokenStream workflow contract](https://lucenenet.apache.org/docs/4.8.0-beta00016/api/core/Lucene.Net.Analysis.TokenStream.html) or other [rules](https://lucenenet.apache.org/docs/4.8.0-beta00015/api/core/Lucene.Net.Analysis.html#more-requirements-for-analysis-component-classes) in place. This ensures we don't need to make any changes to the tests.\r\n- [ ] Create Roslyn code analyzers to ensure that the basics, such as cascading calls to `base.Reset()`, `base.End()`, `base.Close()` and `base.Dispose(bool)`, are enforced in subclasses. These should be set up to produce compile errors, not warnings. Ideally, they would be smart enough to identify when the user is delegating this responsibility to another class or method. Any gaps that we leave here will be caught by the existing Lucene runtime exceptions.\r\n\r\nThis neatly puts the lifetime of `Tokenizer`, `TokenStream`, and `TokenFilter` instances in sync with the `Analyzer` that creates them. So, if the user decides to create an `Analyzer` that has unmanaged resources to clean up, they simply need to change:\r\n\r\n```c#\r\nAnalyzer analyzer = new MyAnalyzer();\r\n```\r\n\r\nto \r\n\r\n```c#\r\nusing Analyzer analyzer = new MyAnalyzer();\r\n```\r\n\r\nAnalyzer won't need to be disposed during normal usage, only for cases where there are expensive long-lived components to dispose.\r\n\r\nI am toying with the idea of creating a `DoClose()` method that is shared between `Close()` and `Dispose()`, simply because cascading the call from `Close()` to `Dispose()` or from `Dispose()` to `Close()` violates the rules in both directions but we generally have common components to clean up in both methods. However, only those who need to implement their own `Dispose()` for long-lived components will need to deal with this duplication. In all other cases, the code will look almost exactly like it does in Lucene.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1306912515/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1307688666","html_url":"https://github.com/apache/lucenenet/pull/754#issuecomment-1307688666","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/754","id":1307688666,"node_id":"IC_kwDOAAJ06c5N8b7a","user":{"login":"iamcarbon","id":7537,"node_id":"MDQ6VXNlcjc1Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/7537?v=4","gravatar_id":"","url":"https://api.github.com/users/iamcarbon","html_url":"https://github.com/iamcarbon","followers_url":"https://api.github.com/users/iamcarbon/followers","following_url":"https://api.github.com/users/iamcarbon/following{/other_user}","gists_url":"https://api.github.com/users/iamcarbon/gists{/gist_id}","starred_url":"https://api.github.com/users/iamcarbon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iamcarbon/subscriptions","organizations_url":"https://api.github.com/users/iamcarbon/orgs","repos_url":"https://api.github.com/users/iamcarbon/repos","events_url":"https://api.github.com/users/iamcarbon/events{/privacy}","received_events_url":"https://api.github.com/users/iamcarbon/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-08T18:59:51Z","updated_at":"2022-11-08T18:59:51Z","author_association":"CONTRIBUTOR","body":"Ready for review.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1307688666/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1308040062","html_url":"https://github.com/apache/lucenenet/pull/753#issuecomment-1308040062","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/753","id":1308040062,"node_id":"IC_kwDOAAJ06c5N9xt-","user":{"login":"iamcarbon","id":7537,"node_id":"MDQ6VXNlcjc1Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/7537?v=4","gravatar_id":"","url":"https://api.github.com/users/iamcarbon","html_url":"https://github.com/iamcarbon","followers_url":"https://api.github.com/users/iamcarbon/followers","following_url":"https://api.github.com/users/iamcarbon/following{/other_user}","gists_url":"https://api.github.com/users/iamcarbon/gists{/gist_id}","starred_url":"https://api.github.com/users/iamcarbon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iamcarbon/subscriptions","organizations_url":"https://api.github.com/users/iamcarbon/orgs","repos_url":"https://api.github.com/users/iamcarbon/repos","events_url":"https://api.github.com/users/iamcarbon/events{/privacy}","received_events_url":"https://api.github.com/users/iamcarbon/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-09T00:48:17Z","updated_at":"2022-11-09T00:48:17Z","author_association":"CONTRIBUTOR","body":"Thanks for the review and context on why .NET5.0 is kept around! I'll submit a new PR with the scoped changes.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1308040062/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1312456109","html_url":"https://github.com/apache/lucenenet/pull/746#issuecomment-1312456109","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/746","id":1312456109,"node_id":"IC_kwDOAAJ06c5OOn2t","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-12T11:11:17Z","updated_at":"2022-11-12T11:11:17Z","author_association":"CONTRIBUTOR","body":"@nikcio - Thanks again for doing this. Your help is really appreciated.\r\n\r\nI went ahead and updated the comments to finish this up (for the most part). We will know what else needs to be done in the scan, and we are tracking #265 and we also have a plan to fix #271.\r\n\r\nI didn't do anything with `TaxononmyReader` yet. We need to get to the bottom of why we are seeing locking contention in the tests that didn't exist in Lucene before tackling that one.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1312456109/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1312459053","html_url":"https://github.com/apache/lucenenet/issues/717#issuecomment-1312459053","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/717","id":1312459053,"node_id":"IC_kwDOAAJ06c5OOokt","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-12T11:29:53Z","updated_at":"2022-11-12T11:29:53Z","author_association":"CONTRIBUTOR","body":"FYI - I upgraded the [Git Tools plugin](https://github.com/yysun/git-tools/pull/41) that I use to review working changes so it is compatible with VS2022. So, that clears the path for adding .NET 7 tests since I am finally able to move beyond VS2019, which has been out of support since April, 2022.\r\n\r\nThe plugin saves so much time during reviews that it simply wasn't worth it to upgrade Visual Studio without it.\r\n\r\nWe will have to phase out support for VS2019 (and update the [build instructions](https://github.com/apache/lucenenet/blob/dc2955699e2b8a2bf31813a819d17749eb7d4a4b/README.md#visual-studio) accordingly) in order to add support for .NET 7.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1312459053/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1313731612","html_url":"https://github.com/apache/lucenenet/issues/758#issuecomment-1313731612","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/758","id":1313731612,"node_id":"IC_kwDOAAJ06c5OTfQc","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-14T13:42:42Z","updated_at":"2022-11-14T13:42:42Z","author_association":"CONTRIBUTOR","body":"Lucene.NET does provide hooks for implementing index replication.  I was going to point you to [issue 401](https://github.com/apache/lucenenet/issues/401#issuecomment-759258652) to learn more but I see you participated in that discussion.  \r\n\r\nWhile I haven't done it personally, I would think that the `Replicator.Publish` approach documented in issue 401 would be near real time.  Is that not the case?  Are you seeing or experiencing something different?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1313731612/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319069514","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319069514","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319069514,"node_id":"IC_kwDOAAJ06c5On2dK","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T18:58:14Z","updated_at":"2022-11-17T18:58:14Z","author_association":"CONTRIBUTOR","body":"This is an exact duplicate of #485.\r\n\r\nWhile we do have a little better handle on locking contention since then, there are still known concurrency issues to track down in `Lucene.Net.Facet` and in the dictionary-based `BreakIterator` in [ICU4N](https://github.com/NightOwl888/ICU4N) (See #269).\r\n\r\nHowever, our goal of upgrading to a newer version of Lucene when the port is completed has not changed, and not only is this not part of that planned work but it is also something that could potentially slow down the upgrade process. Given the choice between async/await support and the latest Lucene features, I suspect most people would rather have the latter.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319069514/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319107489","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319107489","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319107489,"node_id":"IC_kwDOAAJ06c5On_uh","user":{"login":"tonyguo2022","id":111305003,"node_id":"U_kgDOBqJhKw","avatar_url":"https://avatars.githubusercontent.com/u/111305003?v=4","gravatar_id":"","url":"https://api.github.com/users/tonyguo2022","html_url":"https://github.com/tonyguo2022","followers_url":"https://api.github.com/users/tonyguo2022/followers","following_url":"https://api.github.com/users/tonyguo2022/following{/other_user}","gists_url":"https://api.github.com/users/tonyguo2022/gists{/gist_id}","starred_url":"https://api.github.com/users/tonyguo2022/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tonyguo2022/subscriptions","organizations_url":"https://api.github.com/users/tonyguo2022/orgs","repos_url":"https://api.github.com/users/tonyguo2022/repos","events_url":"https://api.github.com/users/tonyguo2022/events{/privacy}","received_events_url":"https://api.github.com/users/tonyguo2022/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T19:33:37Z","updated_at":"2022-11-17T19:33:37Z","author_association":"NONE","body":"I think we do need this feature. Not sure if this is rare. Maybe we can clone this repo and make change there. Thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319107489/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319142053","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319142053","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319142053,"node_id":"IC_kwDOAAJ06c5OoIKl","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T20:07:01Z","updated_at":"2022-11-17T20:07:01Z","author_association":"CONTRIBUTOR","body":"Well, being that we just started our 9th year porting Lucene 4.8.0, this isn't a priority.\r\n\r\nI still stand by what was said last year. The Lucene team is the place to submit this request. Let them work out at a high level how to make async/await work with the design. Then when we port the next version it will automatically be part of our TODO list, rather than something that is going to sidetrack us.\r\n\r\nIt might help to be very specific about which APIs need to be async. If you can narrow the focus it will be more likely something the Lucene team would consider doing.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319142053/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319152210","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319152210","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319152210,"node_id":"IC_kwDOAAJ06c5OoKpS","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T20:17:21Z","updated_at":"2022-11-17T20:17:21Z","author_association":"CONTRIBUTOR","body":"I totally agree with @NightOwl888 .  Also, I'm note even sure anything would be gained by adding `async` file system support.  The disk segments are written by a background thread.  So any thread that is writing docs to the index isn't waiting on disk IO anyway. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319152210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319212411","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319212411","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319212411,"node_id":"IC_kwDOAAJ06c5OoZV7","user":{"login":"tonyguo2022","id":111305003,"node_id":"U_kgDOBqJhKw","avatar_url":"https://avatars.githubusercontent.com/u/111305003?v=4","gravatar_id":"","url":"https://api.github.com/users/tonyguo2022","html_url":"https://github.com/tonyguo2022","followers_url":"https://api.github.com/users/tonyguo2022/followers","following_url":"https://api.github.com/users/tonyguo2022/following{/other_user}","gists_url":"https://api.github.com/users/tonyguo2022/gists{/gist_id}","starred_url":"https://api.github.com/users/tonyguo2022/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tonyguo2022/subscriptions","organizations_url":"https://api.github.com/users/tonyguo2022/orgs","repos_url":"https://api.github.com/users/tonyguo2022/repos","events_url":"https://api.github.com/users/tonyguo2022/events{/privacy}","received_events_url":"https://api.github.com/users/tonyguo2022/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T21:12:23Z","updated_at":"2022-11-17T21:12:23Z","author_association":"NONE","body":"@rclabo  Async wait could free the calling thread to do other tasks instead being waiting/blocked.\r\nPlease check reference: https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319212411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319220619","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319220619","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319220619,"node_id":"IC_kwDOAAJ06c5OobWL","user":{"login":"tonyguo2022","id":111305003,"node_id":"U_kgDOBqJhKw","avatar_url":"https://avatars.githubusercontent.com/u/111305003?v=4","gravatar_id":"","url":"https://api.github.com/users/tonyguo2022","html_url":"https://github.com/tonyguo2022","followers_url":"https://api.github.com/users/tonyguo2022/followers","following_url":"https://api.github.com/users/tonyguo2022/following{/other_user}","gists_url":"https://api.github.com/users/tonyguo2022/gists{/gist_id}","starred_url":"https://api.github.com/users/tonyguo2022/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tonyguo2022/subscriptions","organizations_url":"https://api.github.com/users/tonyguo2022/orgs","repos_url":"https://api.github.com/users/tonyguo2022/repos","events_url":"https://api.github.com/users/tonyguo2022/events{/privacy}","received_events_url":"https://api.github.com/users/tonyguo2022/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T21:21:10Z","updated_at":"2022-11-17T21:21:10Z","author_association":"NONE","body":"> It might help to be very specific about which APIs need to be async. If you can narrow the focus it will be more likely something the Lucene team would consider doing.\r\n\r\n@NightOwl888 , so far we need to update Lucene Index stored in the cloud. I think we need a few APIs(see below list)  to be async. We can clone this repo to another repo and invite you to review. Thanks.\r\n\r\nDataInput.ReadBytes\r\nDataInput.ReadByte\r\nIndexWriter.Commit\r\nIndexWriter.Merge\r\n\r\nThere maybe other functions needed along with the call stack.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319220619/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319313064","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319313064","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319313064,"node_id":"IC_kwDOAAJ06c5Oox6o","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T22:53:30Z","updated_at":"2022-11-17T22:53:30Z","author_association":"CONTRIBUTOR","body":"> Async wait could free the calling thread to do other tasks instead being waiting/blocked. Please check reference: https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model\r\n\r\n@tonyguo2022  sure, and while that is technically true, let's not forget that we are talking about a background thread here.  So unless for your use case you expect to run out of threads or hit thread starvation, why bother?  And to be clear, there is no code path from `IndexWriter.Commit` that writes to the disk, so adding a method like  `IndexWriter.CommitAsync` isn't gonna help.  The writing to storage is not done by the thread that calls  `IndexWriter.Commit`.  The writing to storage is done asynchronously by a background thread that is signaled by the fact that  `IndexWriter.Commit` was called on another thread earlier in time.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319313064/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319318903","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319318903","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319318903,"node_id":"IC_kwDOAAJ06c5OozV3","user":{"login":"tonyguo2022","id":111305003,"node_id":"U_kgDOBqJhKw","avatar_url":"https://avatars.githubusercontent.com/u/111305003?v=4","gravatar_id":"","url":"https://api.github.com/users/tonyguo2022","html_url":"https://github.com/tonyguo2022","followers_url":"https://api.github.com/users/tonyguo2022/followers","following_url":"https://api.github.com/users/tonyguo2022/following{/other_user}","gists_url":"https://api.github.com/users/tonyguo2022/gists{/gist_id}","starred_url":"https://api.github.com/users/tonyguo2022/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tonyguo2022/subscriptions","organizations_url":"https://api.github.com/users/tonyguo2022/orgs","repos_url":"https://api.github.com/users/tonyguo2022/repos","events_url":"https://api.github.com/users/tonyguo2022/events{/privacy}","received_events_url":"https://api.github.com/users/tonyguo2022/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T23:00:14Z","updated_at":"2022-11-17T23:00:14Z","author_association":"NONE","body":"@rclabo our debug shows indexWriter.Commit call ReadBytes in same thread:\r\n\r\n```\r\n>\tMetadataIndexFileInput.ReadBytes(byte[] b, int offset, int len) Line 47\tC#\r\n \tLucene.Net.Store.DataOutput.CopyBytes(Lucene.Net.Store.DataInput input, long numBytes)\tUnknown\r\n \tLucene.Net.Store.Directory.Copy(Lucene.Net.Store.Directory to, string src, string dest, Lucene.Net.Store.IOContext context)\tUnknown\r\n \tLucene.Net.Store.TrackingDirectoryWrapper.Copy(Lucene.Net.Store.Directory to, string src, string dest, Lucene.Net.Store.IOContext context)\tUnknown\r\n \tLucene.Net.Index.IndexWriter.CreateCompoundFile(Lucene.Net.Util.InfoStream infoStream, Lucene.Net.Store.Directory directory, Lucene.Net.Index.CheckAbort checkAbort, Lucene.Net.Index.SegmentInfo info, Lucene.Net.Store.IOContext context)\tUnknown\r\n \tLucene.Net.Index.DocumentsWriterPerThread.SealFlushedSegment(Lucene.Net.Index.DocumentsWriterPerThread.FlushedSegment flushedSegment)\tUnknown\r\n \tLucene.Net.Index.DocumentsWriterPerThread.Flush()\tUnknown\r\n \tLucene.Net.Index.DocumentsWriter.DoFlush(Lucene.Net.Index.DocumentsWriterPerThread flushingDWPT)\tUnknown\r\n \tLucene.Net.Index.DocumentsWriter.FlushAllThreads(Lucene.Net.Index.IndexWriter indexWriter)\tUnknown\r\n \tLucene.Net.Index.IndexWriter.PrepareCommitInternal()\tUnknown\r\n \tLucene.Net.Index.IndexWriter.CommitInternal()\tUnknown\r\n \tLucene.Net.Index.IndexWriter.Commit()\tUnknown\r\n\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319318903/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319345574","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319345574","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319345574,"node_id":"IC_kwDOAAJ06c5Oo52m","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T23:29:48Z","updated_at":"2022-11-17T23:29:48Z","author_association":"CONTRIBUTOR","body":"@tonyguo2022 And that's great.  But that doesn't prove that the write to storage is done via that thread. And it's not.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319345574/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319350119","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319350119","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319350119,"node_id":"IC_kwDOAAJ06c5Oo69n","user":{"login":"tonyguo2022","id":111305003,"node_id":"U_kgDOBqJhKw","avatar_url":"https://avatars.githubusercontent.com/u/111305003?v=4","gravatar_id":"","url":"https://api.github.com/users/tonyguo2022","html_url":"https://github.com/tonyguo2022","followers_url":"https://api.github.com/users/tonyguo2022/followers","following_url":"https://api.github.com/users/tonyguo2022/following{/other_user}","gists_url":"https://api.github.com/users/tonyguo2022/gists{/gist_id}","starred_url":"https://api.github.com/users/tonyguo2022/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tonyguo2022/subscriptions","organizations_url":"https://api.github.com/users/tonyguo2022/orgs","repos_url":"https://api.github.com/users/tonyguo2022/repos","events_url":"https://api.github.com/users/tonyguo2022/events{/privacy}","received_events_url":"https://api.github.com/users/tonyguo2022/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T23:35:28Z","updated_at":"2022-11-17T23:35:28Z","author_association":"NONE","body":"@rclabo It is same for write. \r\n\r\n```\r\n>\tMetadataIndexFileOutput.WriteByte(byte b) Line 55\tC#\r\n \tLucene.Net.Store.DataOutput.WriteInt32(int i)\tUnknown\r\n \tLucene.Net.Codecs.CodecUtil.WriteFooter(Lucene.Net.Store.IndexOutput out)\tUnknown\r\n \tLucene.Net.Store.CompoundFileWriter.Dispose()\tUnknown\r\n \tLucene.Net.Store.CompoundFileDirectory.Dispose(bool disposing)\tUnknown\r\n \tLucene.Net.Store.Directory.Dispose()\tUnknown\r\n \tLucene.Net.Util.IOUtils.Dispose(System.IDisposable[] objects)\tUnknown\r\n \tLucene.Net.Index.IndexWriter.CreateCompoundFile(Lucene.Net.Util.InfoStream infoStream, Lucene.Net.Store.Directory directory, Lucene.Net.Index.CheckAbort checkAbort, Lucene.Net.Index.SegmentInfo info, Lucene.Net.Store.IOContext context)\tUnknown\r\n \tLucene.Net.Index.DocumentsWriterPerThread.SealFlushedSegment(Lucene.Net.Index.DocumentsWriterPerThread.FlushedSegment flushedSegment)\tUnknown\r\n \tLucene.Net.Index.DocumentsWriterPerThread.Flush()\tUnknown\r\n \tLucene.Net.Index.DocumentsWriter.DoFlush(Lucene.Net.Index.DocumentsWriterPerThread flushingDWPT)\tUnknown\r\n \tLucene.Net.Index.DocumentsWriter.FlushAllThreads(Lucene.Net.Index.IndexWriter indexWriter)\tUnknown\r\n \tLucene.Net.Index.IndexWriter.PrepareCommitInternal()\tUnknown\r\n \tLucene.Net.Index.IndexWriter.CommitInternal()\tUnknown\r\n \tLucene.Net.Index.IndexWriter.Commit()\tUnknown\r\n\r\n```\r\n\r\nBut so far we don't really need async WriteByte. we can write to memory and do async after commit.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319350119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319355153","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319355153","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319355153,"node_id":"IC_kwDOAAJ06c5Oo8MR","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-17T23:42:39Z","updated_at":"2022-11-17T23:42:39Z","author_association":"CONTRIBUTOR","body":"@tonyguo2022 I'm surprised by that stack trace.  That's not my recollection.  But facts are facts.  Thank you for that.  I always appreciate learning something new. \r\n \r\nBut even still, it just shows that the new segment written to storage happened on the same thread as IndexWriter.Commit().  Unless you are using the `SerialMergeScheduler`, the heavy lifting of the storage writing will still be done on a background thread when the merging of segments happens.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319355153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319371313","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319371313","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319371313,"node_id":"IC_kwDOAAJ06c5OpAIx","user":{"login":"tonyguo2022","id":111305003,"node_id":"U_kgDOBqJhKw","avatar_url":"https://avatars.githubusercontent.com/u/111305003?v=4","gravatar_id":"","url":"https://api.github.com/users/tonyguo2022","html_url":"https://github.com/tonyguo2022","followers_url":"https://api.github.com/users/tonyguo2022/followers","following_url":"https://api.github.com/users/tonyguo2022/following{/other_user}","gists_url":"https://api.github.com/users/tonyguo2022/gists{/gist_id}","starred_url":"https://api.github.com/users/tonyguo2022/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tonyguo2022/subscriptions","organizations_url":"https://api.github.com/users/tonyguo2022/orgs","repos_url":"https://api.github.com/users/tonyguo2022/repos","events_url":"https://api.github.com/users/tonyguo2022/events{/privacy}","received_events_url":"https://api.github.com/users/tonyguo2022/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-18T00:05:49Z","updated_at":"2022-11-18T00:05:49Z","author_association":"NONE","body":"After Merge() operation, we immediately collect the output files and store them to cloud storage.  Seems the Lucene Index is valid already and we can run query against it successfully. So, there should be no required post write operations.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319371313/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319683616","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319683616","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319683616,"node_id":"IC_kwDOAAJ06c5OqMYg","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-18T08:19:48Z","updated_at":"2022-11-18T08:19:48Z","author_association":"CONTRIBUTOR","body":"@tonyguo2022 this is really appreciated, but at this limits we cannot go behind the library frame (in the repo)\r\nbecause the main goal of this project was port from the java version.\r\n\r\nasync / await is only one piece in a big  puzzle.\r\none option i can see is to optimize the port in another repository, but i doubt how many people will contribute, especially when this contribution for this port is very limited. (yes we're totally lucky we have @NightOwl888 who's willing to give his efforts and time.\r\n\r\nthe downside that it won't be compatible to future upgrades.\r\nalso, as we all know, lucene is very complex project. many of the design had big thoughts and the talented developers who want to get into it are very limited. \r\n\r\nlet's hope in the future the library will be upgraded to match the java version and it will perform better.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319683616/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319966984","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1319966984","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1319966984,"node_id":"IC_kwDOAAJ06c5OrRkI","user":{"login":"rclabo","id":6945499,"node_id":"MDQ6VXNlcjY5NDU0OTk=","avatar_url":"https://avatars.githubusercontent.com/u/6945499?v=4","gravatar_id":"","url":"https://api.github.com/users/rclabo","html_url":"https://github.com/rclabo","followers_url":"https://api.github.com/users/rclabo/followers","following_url":"https://api.github.com/users/rclabo/following{/other_user}","gists_url":"https://api.github.com/users/rclabo/gists{/gist_id}","starred_url":"https://api.github.com/users/rclabo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rclabo/subscriptions","organizations_url":"https://api.github.com/users/rclabo/orgs","repos_url":"https://api.github.com/users/rclabo/repos","events_url":"https://api.github.com/users/rclabo/events{/privacy}","received_events_url":"https://api.github.com/users/rclabo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-18T13:03:10Z","updated_at":"2022-11-18T13:03:10Z","author_association":"CONTRIBUTOR","body":"> After Merge() operation, we immediately collect the output files and store them to cloud storage. Seems the Lucene Index is valid already and we can run query against it successfully. So, there should be no required post write operations.\r\n\r\nI'm not sure I fully understand.  When you call `IndexWriter.Commit` that thread writes a new index segment to storage, handled at a top level by `DocumentsWriterPerThread` (which I had forgot was introduced in Lucene 4).  That index segment on disk will be fairly small given that it had to fit in RAM in it's entirety before being written to disk.  \r\n\r\nThen, in the default configuration, the [ConcurrentMergeScheduler](https://lucenenet.apache.org/docs/4.8.0-beta00016/api/core/Lucene.Net.Index.ConcurrentMergeScheduler.html) will run on background threads and merge that tiny segment with other segments to create a new larger segment.  This process repeats itself over and over as new documents are written to the index and committed.  \r\n\r\n [This video](https://www.youtube.com/watch?v=YW0bOvLp72E ) shows  the segment writing and merging that happens as Java Lucene indexes Wikipedia.  It creates a nice visual of the process we are talking about.  You can see all the small initial segments being written as various commits are called and then see the segments getting combined into larger segments by the background workers.  And eventually those larger segments get combined to create even larger segments and so on.\r\n\r\nSo when you say \"After Merge() operation, we immediately collect the output files and store them to cloud storage.\" That would only work well if there is no need to add additional documents to the index.  Otherwise, without ongoing merging, the number of segments will grow very large and search times will become slower and slower due to the number of segments that must be searched.\r\n\r\nI hope this information is helpful.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1319966984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1320374984","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1320374984","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1320374984,"node_id":"IC_kwDOAAJ06c5Os1LI","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-18T18:18:17Z","updated_at":"2022-11-18T18:36:26Z","author_association":"CONTRIBUTOR","body":"For the record, there are already existing Lucene directory implementations for various cloud platforms and products. Some would need to be ported to .NET, others might already exist on .NET (some of which don't yet support 4.8.0).\r\n\r\nhttps://github.com/apache/lucenenet/issues/631#issuecomment-1086764962\r\nhttps://github.com/azure-contrib/AzureDirectory\r\nhttps://github.com/tomlm/Lucene.Net.Store.Azure\r\nhttps://stackoverflow.com/a/59381272\r\nhttps://github.com/albogdano/lucene-s3directory\r\nhttps://docs.jboss.org/author/display/ISPN50/Infinispan%20as%20a%20Directory%20for%20Lucene.html\r\nhttps://cwiki.apache.org/confluence/display/lucene/AvailableLockFactories\r\n\r\nLucene is highly optimized to use a local file system. Swapping the directory implementation is one way to extend Lucene, but it will come at a pretty significant performance penalty to write to a blob storage provider (as you can see by the notes on each implementation). There are existing cloud products that emulate a local file system that may or may not do the job better of moving your index off of the server it runs on.\r\n\r\nHowever, rolling your own `Directory` implementation is a major job that will take a significant amount of effort to perform well and be stable enough to use.\r\n\r\nNote that there is a [Lucene.Net.Replicator](https://lucenenet.apache.org/docs/4.8.0-beta00016/api/replicator/Lucene.Net.Replicator.html) module that is designed to synchronize an index across multiple servers by hosting a listener on a server and having each client request a copy periodically. I haven't tried, but I suspect there is a way to utilize it to safely copy the index to cloud storage at periodic intervals. I wouldn't recommend copying the index outside of a locking context, though, because Lucene.NET may lock the files at unpredictable times and it may not be practical to copy them without getting copy errors.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1320374984/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1320806602","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1320806602","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1320806602,"node_id":"IC_kwDOAAJ06c5OuejK","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-19T05:25:52Z","updated_at":"2022-11-19T05:25:52Z","author_association":"CONTRIBUTOR","body":"I was just closing some browser tabs, and came across this topic that goes into detail about how to call synchronous methods asynchronously: https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously. \r\n\r\nJust sayin', it seems like a simpler fix than punching async methods all the way through and expecting them to \"just work\". Lucene throws exceptions in background threads that are re-thrown on the calling thread and are expected to be a specific exception type to get caught in the right handler (which will fire a re-try). Any async code that is added would need to respect (and duplicate) that behavior.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1320806602/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322012531","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322012531","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322012531,"node_id":"IC_kwDOAAJ06c5OzE9z","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-21T12:42:56Z","updated_at":"2022-11-21T12:42:56Z","author_association":"CONTRIBUTOR","body":"> Note that there is a [Lucene.Net.Replicator](https://lucenenet.apache.org/docs/4.8.0-beta00016/api/replicator/Lucene.Net.Replicator.html) module that is designed to synchronize an index across multiple servers by hosting a listener on a server and having each client request a copy periodically. I haven't tried, but I suspect there is a way to utilize it to safely copy the index to cloud storage at periodic intervals. I wouldn't recommend copying the index outside of a locking context, though, because Lucene.NET may lock the files at unpredictable times and it may not be practical to copy them without getting copy errors.\r\n\r\nThe Replicator can probably do that but I don't think it's needed at all to do a feature like that, however the replicator holds the answer to how so it's worth looking at the code.\r\n\r\nBut it should be as simple as using the SnapshotDeletionPolicy (Also required by the Replicator) then at intervals do a snapshot by calling the `Snapshot` method which returns a `IndexCommit` then copy all the files of that commit.\r\n\r\nWe do that targeting the local file system to make dated snapshots of our index. Going from building snapshots targeting the local file system to putting them into cloud storage shouldn't be much of a challenge.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322012531/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322066724","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322066724","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322066724,"node_id":"IC_kwDOAAJ06c5OzSMk","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-21T13:28:45Z","updated_at":"2022-11-21T20:39:50Z","author_association":"CONTRIBUTOR","body":"Furthermore, now that I looked a bit around in the code which would be involved in the above, it might actually not be completely unfeasibly to introduce async into lucene at this layer for such scenarios as a \"Addin\" to Lucene.NET, that means we are talking code outside of lucene itself that extends the appropriate classes (e.g. SimpleFSDirectory, NIOFSDirectory, MMapDirectory etc.) or making \"Mirrors\" of them and then providing the asynchronous overloads on those and their associated Input/Output classes. And then you can use those during replication allowing you to use async patterns when copying the files from the disk etc. From there it will require a bit of Type checking/casting, but other than that it should be doable... Lets mark that as **OPTION-A**.\r\n\r\nIt COULD possibly also be introduced into Lucene it self by marking the involved classes here as partial classes and then implement the Async behaviors there, that might allow us to introduce it without breaking with the principle of sticking close to the Java side as we could then add it into Lucene.Net specific async files that can clearly be marked as \"Lucene.Net Specific\" - that should in theory mean that all we have to do in future ports is again to open up these ported classes by marking them as partial. Ofc. Breaking changes can occur in the stack that means we have to do major rework on the Async parts, but it see it as more manageable. Lets mark that as **OPTION-B**.\r\n\r\nWhile **OPTION-B** could be interesting to investigate as it might have to opportunity to introduce async/await into Lucene.NET gradually if anyone wishes to give that a shot, to begin with the use will be very limited and probably specifically only to scenarios outlined here, it would not affect the core itself which would still use the blocking API's and I can't say how far up the stack this could be done without hitting a wall where we can't go further without actually compromising on the principle of having a port as close to the java source as possible to make furture ports easier. I REALLY doubt that we could get all the way out to making a `IndexWriter.UpdateDocumentAsync(...)` without hitting that problem, but I can't say for sure.\r\n\r\nSo I am not sure **OPTION-B** is worth the effort considering that **OPTION-A** is probably feasible and it's only downside is the requirement of casts/type checks. And even IF we would find that worth it, I don't think anyone in the team sees it as a priority over getting a stable 4.8 out and possibly also beginning to port the next version.\r\n\r\nBut feel free to share what you guys think.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322066724/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322497950","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322497950","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322497950,"node_id":"IC_kwDOAAJ06c5O07ee","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-21T18:44:50Z","updated_at":"2022-11-21T18:44:50Z","author_association":"CONTRIBUTOR","body":"no one said that async operation isn't needed. IO (network / disk) is async operation by definition.\r\nso yes, this is totally agreed that the correct way to access IO is async all the way.\r\n\r\nno need to say that this will impact much higher throughput to the system / index. even that lucene is \"highly optimized to use a local file system\".\r\na local FS on the cloud is not always what you think in terms of FS, not always fast.\r\nbut even if its local, it's still in order of magnitude slower than cpu/L1 cache.\r\nso while a thread waiting for IO, it can be freed and do another work or serve other queries.\r\n\r\nso to summarize, it's not a question if async should be supported. it's clearly as the sun.\r\nour problem is the scope and how and when can it be done.\r\n\r\nI really don't see how you can do it without breaking all the components. \r\neven with partial classes, the async operations should seep from the ground basic operations (Lucene.Net.Store.DataOutput) all the way up to the public api.\r\n\r\nso in some way, i can truly understand this is disappointing because we aren't utilizing the modern technology and the tools we already have.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322497950/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322507945","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322507945","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322507945,"node_id":"IC_kwDOAAJ06c5O096p","user":{"login":"tonyguo2022","id":111305003,"node_id":"U_kgDOBqJhKw","avatar_url":"https://avatars.githubusercontent.com/u/111305003?v=4","gravatar_id":"","url":"https://api.github.com/users/tonyguo2022","html_url":"https://github.com/tonyguo2022","followers_url":"https://api.github.com/users/tonyguo2022/followers","following_url":"https://api.github.com/users/tonyguo2022/following{/other_user}","gists_url":"https://api.github.com/users/tonyguo2022/gists{/gist_id}","starred_url":"https://api.github.com/users/tonyguo2022/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tonyguo2022/subscriptions","organizations_url":"https://api.github.com/users/tonyguo2022/orgs","repos_url":"https://api.github.com/users/tonyguo2022/repos","events_url":"https://api.github.com/users/tonyguo2022/events{/privacy}","received_events_url":"https://api.github.com/users/tonyguo2022/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-21T18:54:20Z","updated_at":"2022-11-21T18:54:20Z","author_association":"NONE","body":"> So when you say \"After Merge() operation, we immediately collect the output files and store them to cloud storage.\" That would only work well if there is no need to add additional documents to the index. Otherwise, without ongoing merging, the number of segments will grow very large and search times will become slower and slower due to the number of segments that must be searched.\r\n\r\n\r\n@rclabo \r\nWe actually do indexWriter.ForceMerge() and indexWriter.Commit() when the number of segments has exceeded a threshold.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322507945/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322514788","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322514788","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322514788,"node_id":"IC_kwDOAAJ06c5O0_lk","user":{"login":"tonyguo2022","id":111305003,"node_id":"U_kgDOBqJhKw","avatar_url":"https://avatars.githubusercontent.com/u/111305003?v=4","gravatar_id":"","url":"https://api.github.com/users/tonyguo2022","html_url":"https://github.com/tonyguo2022","followers_url":"https://api.github.com/users/tonyguo2022/followers","following_url":"https://api.github.com/users/tonyguo2022/following{/other_user}","gists_url":"https://api.github.com/users/tonyguo2022/gists{/gist_id}","starred_url":"https://api.github.com/users/tonyguo2022/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tonyguo2022/subscriptions","organizations_url":"https://api.github.com/users/tonyguo2022/orgs","repos_url":"https://api.github.com/users/tonyguo2022/repos","events_url":"https://api.github.com/users/tonyguo2022/events{/privacy}","received_events_url":"https://api.github.com/users/tonyguo2022/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-21T19:01:20Z","updated_at":"2022-11-21T19:01:20Z","author_association":"NONE","body":"@NightOwl888 thanks for the research and references. We can definitely wrap asyn cloud API within sync Lucene.NET API as the most of the references have done. But if Lucene.net support async call natively, I think there could be benefits.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322514788/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322516254","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322516254","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322516254,"node_id":"IC_kwDOAAJ06c5O0_8e","user":{"login":"tonyguo2022","id":111305003,"node_id":"U_kgDOBqJhKw","avatar_url":"https://avatars.githubusercontent.com/u/111305003?v=4","gravatar_id":"","url":"https://api.github.com/users/tonyguo2022","html_url":"https://github.com/tonyguo2022","followers_url":"https://api.github.com/users/tonyguo2022/followers","following_url":"https://api.github.com/users/tonyguo2022/following{/other_user}","gists_url":"https://api.github.com/users/tonyguo2022/gists{/gist_id}","starred_url":"https://api.github.com/users/tonyguo2022/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tonyguo2022/subscriptions","organizations_url":"https://api.github.com/users/tonyguo2022/orgs","repos_url":"https://api.github.com/users/tonyguo2022/repos","events_url":"https://api.github.com/users/tonyguo2022/events{/privacy}","received_events_url":"https://api.github.com/users/tonyguo2022/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-21T19:02:50Z","updated_at":"2022-11-21T19:02:50Z","author_association":"NONE","body":"@eladmarg Love these options. Thanks. We also planned to change current code as less as possible, similar to option A. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322516254/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322649394","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322649394","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322649394,"node_id":"IC_kwDOAAJ06c5O1gcy","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-21T21:12:56Z","updated_at":"2022-11-21T21:12:56Z","author_association":"CONTRIBUTOR","body":"> I really don't see how you can do it without breaking all the components.\r\n> even with partial classes, the async operations should seep from the ground basic operations (Lucene.Net.Store.DataOutput) all the way up to the public api.\r\n\r\nAs I said, making it all the way up to `IndexWriter.UpdateDocumentAsync(...)` I am having a hard time believing can be done without running into trouble as well, however for replication purposes, working with Lucene on the lover levels (DataInputs/DataOutputs) does actually not look to hard, In an OPTION-B scenario it might even be easier that I initially thought as it's actually only the DataInput/DataOutput that needs additions in partial classes for now to lift the async operations into the replication code.\r\n\r\nHere I did run into some classes which raises a question from a efficiency perspective. E.g. InputStreamDataInput that takes a Stream in it's constructor and immediately wraps that stream in a BinaryReader but I can't see for what reason. If the concern is that the underlying stream is not buffered, then perhaps a BufferedStream would be more appropriate. The Java version takes a InputStream in the constructor and just uses that as is, so I am not sure why this differs. (At least for the Java version I currently have checked out)\r\n\r\nFor OPTION-A which I would point to for now (due to priorities) the Directory classes has to be mirrored as well to return these new implementations.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322649394/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322793010","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322793010","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322793010,"node_id":"IC_kwDOAAJ06c5O2Dgy","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-21T23:27:08Z","updated_at":"2022-11-21T23:27:08Z","author_association":"CONTRIBUTOR","body":"> Furthermore, now that I looked a bit around in the code which would be involved in the above, it might actually not be completely unfeasibly to introduce async into lucene at this layer for such scenarios as a \"Addin\" to Lucene.NET, that means we are talking coud outside of lucene itself that extends the appropriate classes (e.g. SimpleFSDirectory, NIOFSDirectory, MMapDirectory etc.) or making \"Mirrors\" of them and then providing the asynchronous overloads on those and their associated Input/Output classes. And then you can use those during replication allowing you to use async patterns when copying the files from the disk etc. From there it will require a bit of Type checking/casting, but other than that it should be doable... Lets mark that as **OPTION-A**.\r\n> \r\n> It COULD possibly also be introduced into Lucene it self by marking the involved classes here as partial classes and then implement the Async behaviors there, that might allow us to introduce it without breaking with the principle of sticking close to the Java side as we could then add it into Lucene.Net specific async files that can clearly be marked as \"Lucene.Net Specific\" - that should in theory mean that all we have to do in future ports is again to open up these ported classes by marking them as partial. Ofc. Breaking changes can occur in the stack that means we have to do major rework on the Async parts, but it see it as more manageable. Lets mark that as **OPTION-B**.\r\n> \r\n> While **OPTION-B** could be interesting to investigate as it might have to opportunity to introduce async/await into Lucene.NET gradually if anyone wishes to give that a shot, to begin with the use will be very limited and probably specifically only to scenarios outlined here, it would not affect the core itself which would still use the blocking API's and I can't say how far up the stack this could be done without hitting a wall where we can't go further without actually compromising on the principle of having a port as close to the java source as possible to make furture ports easier. I REALLY doubt that we could get all the way out to making a `IndexWriter.UpdateDocumentAsync(...)` without hitting that problem, but I can't say for sure.\r\n> \r\n> So I am not sure **OPTION-B** is worth the effort considering that **OPTION-A** is probably feasible and it's only downside is the requirement of casts/type checks. And even IF we would find that worth it, I don't think anyone in the team sees it as a priority.\r\n> \r\n> But feel free to share what you guys think.\r\n\r\n## Partial Classes\r\n\r\nI am not sure I totally understand the difference between **OPTION-A** and **OPTION-B**. Partial classes are a compiler feature that makes it easier to organize code, but at the end of the day they get compiled into 1 class. Both partial classes have access to all of the private state of the class.\r\n\r\nAnd if we add code to the codebase that is not part of Lucene, it should **all** be in partial classes and put into the Support folder. For example, to extend `IndexWriter` with async code, the original `IndexWriter` class would be marked as a partial class. Then we would add a partial class named `IndexWriter` below the Support folder to extend it with non-Java ported code.\r\n\r\n### File Location Lucene.Net/Index/IndexWriter.cs\r\n\r\n```c#\r\nnamespace Lucene.Net.Index\r\n{\r\n     public partial class IndexWriter : IDisposable, ITwoPhaseCommit\r\n     {\r\n         // Implementation...\r\n     }\r\n}\r\n```\r\n\r\n### File Location Lucene.Net/Support/Index/IndexWriter.cs\r\n\r\n```c#\r\nnamespace Lucene.Net.Index\r\n{\r\n     public partial class IndexWriter // Leave off all of the interfaces/base classes\r\n     {\r\n         // Code that was not part of Lucene 4.8.0 (or our best interpretation of it)...\r\n     }\r\n}\r\n```\r\n\r\n## Exceptions\r\n\r\nBut, that is the easy part. The problem is that everyone involved in this conversation is thinking like a .NET developer: we only throw exceptions when something exceptional happens. But in the Java world, exceptions are frequently used as a signaling mechanism. Indeed, Lucene does this also. We don't have a detailed map of what every exception means or when an exception is thrown in one piece of code, who (if anybody) will catch it and attempt to handle it. It is easy to look at the primary path and lose sight of all of the exceptions that are flying over our head that are being handled in specialized ways.\r\n\r\nThe `ThreadJob` class handles re-throwing exceptions that are thrown in a background thread. I never did figure out how that works in Java, but this is the behavior that we are seeing in the Lucene tests and clearly what is expected by code.\r\n\r\nSo, if we complete the primary path through to make something async, we have only started the job. We need to deal with the exceptions that are thrown. Our parallel tasks run, some of them fail, and we end up with an `AggregateException` type. What do we do with it?\r\n\r\nIn every case, the answer will probably be something a bit different. Lucene often expects the exception to fly up the stack to a handler to deal with it. Or, depending on the exception type, it may just let it fly up to the original caller, or perhaps swallow and ignore it. To make things more complicated, there may be a different handler in a different part of the call stack expecting it depending on which type of exception it is. And many parts are pluggable, so the set of handlers and how they are expected to deal with the exception may be different in each pluggable piece. Certain questions need to be answered for every case:\r\n\r\n1. Which upstream handlers are expected to catch the exception from this piece of code?\r\n2. Are there potential exceptions that are thrown from a downstream piece of code? If so, what exception types?\r\n3. Is the exception required to be caught somewhere for the task that launched it to successfully complete?\r\n4. Is something upstream keeping track of which tasks succeeded and which failed?\r\n5. Does an exception handler reschedule the task at a later time?\r\n6. Is the exception allowed to propagate back to the caller (outside of Lucene)?\r\n7. Is the exception swallowed?\r\n8. Is this or any upstream piece of code pluggable or virtual, and what happens with the exception handlers when alternative implementation is plugged in? \r\n9. If this or another pluggable piece may be swapped by the end user with a custom implementation, how are they expected to handle exceptions in the custom code? \r\n\r\nOne thing seems obvious to me: The existing exception handlers might not be compatible with the async code and may need to either be *duplicated* or *redesigned* to function when running async. This is particularly true when we have an `AggregateException` type and are expected to fire the code in multiple handlers because we have multiple exception types. We can't exactly throw multiple exceptions from a synchronous piece of code to get to the existing handlers.\r\n\r\nIt took a month of work just to figure out how to (mostly) [correctly map each exception in Java to its counterpart in .NET](https://github.com/apache/lucenenet/pull/476), including changing the exception handlers to ignore the difference in inheritance between the exception types and re-map it to how Java inherits exceptions. That said, we [don't really know for certain how some exceptions should be handled if they are thrown](https://github.com/apache/lucenenet/pull/476).\r\n\r\nTBH - I have no idea how the Lucene team keeps track of the complicated dance of exceptions that are thrown and caught in this application. They must have a technical document somewhere that details it, but if not, this is a document that would need to be created and maintained on our end before we even started on such a task - at least for the part of the picture that we would need to see to maintain the async code that is added. This document would need to detail the entire stack when the application is running to fully understand where exceptions of specific types are thrown and where they are handled.\r\n\r\nThere is a [TestIndexWriterExceptions](https://github.com/apache/lucenenet/blob/a654eb1f84e0f1e2bcb21fc8cab78169485cd651/src/Lucene.Net.Tests/Index/TestIndexWriterExceptions.cs) test that goes through some of what is expected, but it would need to be analyzed in combination with [our exception mapping logic](https://github.com/apache/lucenenet/blob/a654eb1f84e0f1e2bcb21fc8cab78169485cd651/src/Lucene.Net/Support/ExceptionHandling/ExceptionExtensions.cs) for it to make sense. There are also several tests that [analyze the stack trace](https://github.com/apache/lucenenet/blob/a654eb1f84e0f1e2bcb21fc8cab78169485cd651/src/Lucene.Net.TestFramework/Support/StackTraceHelper.cs) to ensure a specific caller exists in the call stack. Further evidence that the Lucene team is working from the perspective of the call stack at a high level when dealing with these.\r\n\r\nThis is why I maintain my original position: This is a job for the Lucene designers to figure out, since they have the inside knowledge of what each exception type means and who is supposed to handle it. And this is taken into consideration when new features are added to Lucene.\r\n\r\nIf we add async code on our end and are expected to maintain it across releases, it will be a tremendous amount of work. If we just add async functionality without creating a plan on how to upgrade it (including any exception logic that changes in future versions of Lucene), we may have no choice but to remove it since it will be blocking the effort to upgrade. Then not only is it a huge amount of time spent adding it to 4.8.0, it is a huge amount of time wasted because it will be gone from all future versions. Fortunately, we can see into the future versions of Lucene, so we can at least mitigate some of this.\r\n\r\nBut I wouldn't consider a contribution like this without a commitment from someone to help to maintain it over the long run (dealing with future bug reports, incompatibilities, upgrading, and creating detailed technical documentation so others can understand it). Otherwise, it will just be relegated to the same fate as [TaskMergeScheduler](https://github.com/apache/lucenenet/issues/354): fundamentally broken, deprecated and slated for deletion. And a total waste of everyone's time.\r\n\r\nIf Lucene adds async support, then it will always be something that will be considered as part of the entire application and something that is more straightforward to port and debug. Most importantly, it is not something we have to document and maintain ourselves.\r\n\r\nOf course, the first step is to [start a conversation with the Lucene team](https://lucene.apache.org/core/discussion.html) to determine whether this is something they are willing to do. Or at least willing to accept as a contribution that they will then maintain.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322793010/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322829882","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322829882","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322829882,"node_id":"IC_kwDOAAJ06c5O2Mg6","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T00:21:17Z","updated_at":"2022-11-22T00:21:17Z","author_association":"CONTRIBUTOR","body":"> Here I did run into some classes which raises a question from a efficiency perspective. E.g. InputStreamDataInput that takes a Stream in it's constructor and immediately wraps that stream in a BinaryReader but I can't see for what reason. If the concern is that the underlying stream is not buffered, then perhaps a BufferedStream would be more appropriate. The Java version takes a InputStream in the constructor and just uses that as is, so I am not sure why this differs. (At least for the Java version I currently have checked out)\r\n\r\nLooks like you have spotted yet another weird thing that was done during the initial port. In Lucene, the passed-in stream was used without wrapping it in anything.\r\n\r\nIt was changed like this in https://github.com/apache/lucenenet/commit/3bcd980f0244af667a885eb14e6144510af591e0#diff-5cbde6cbc3ee23bdc1d699d185ccae736530a7129bb2f2a844be24155fa9e9cd, and I don't see any valid reason for changing it like this.\r\n\r\nCare to submit a patch? Also, a null guard clause can be added to the constructor because clearly this class cannot function with a null stream.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322829882/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322839488","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1322839488","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1322839488,"node_id":"IC_kwDOAAJ06c5O2O3A","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T00:33:16Z","updated_at":"2022-11-22T00:33:16Z","author_association":"CONTRIBUTOR","body":"> > I really don't see how you can do it without breaking all the components.\r\n> > even with partial classes, the async operations should seep from the ground basic operations (Lucene.Net.Store.DataOutput) all the way up to the public api.\r\n> \r\n> As I said, making it all the way up to `IndexWriter.UpdateDocumentAsync(...)` I am having a hard time believing can be done without running into trouble as well, however for replication purposes, working with Lucene on the lover levels (DataInputs/DataOutputs) does actually not look to hard, In an OPTION-B scenario it might even be easier that I initially thought as it's actually only the DataInput/DataOutput that needs additions in partial classes for now to lift the async operations into the replication code.\r\n> \r\n> Here I did run into some classes which raises a question from a efficiency perspective. E.g. InputStreamDataInput that takes a Stream in it's constructor and immediately wraps that stream in a BinaryReader but I can't see for what reason. If the concern is that the underlying stream is not buffered, then perhaps a BufferedStream would be more appropriate. The Java version takes a InputStream in the constructor and just uses that as is, so I am not sure why this differs. (At least for the Java version I currently have checked out)\r\n> \r\n> For OPTION-A which I would point to for now (due to priorities) the Directory classes has to be mirrored as well to return these new implementations.\r\n\r\n@jeme - Looks like `OutputStreamDataOutput` has the same issue.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1322839488/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323214681","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1323214681","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1323214681,"node_id":"IC_kwDOAAJ06c5O3qdZ","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T07:15:27Z","updated_at":"2022-12-02T12:51:22Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Sure I can try to submit a PR for that, I can't build the source as it stands right now due to missing .NET 4.6.2, ~~AFAIK 4.6.2 is an implementation of .NET Standard 2.0, is there a specific reason that the project targets both?~~\r\n\r\n~~(https://learn.microsoft.com/en-us/dotnet/standard/net-standard?tabs=net-standard-2-0)~~\r\n\r\nStrike that, there certainly is reasons to support both, so disregard the question above. I was pointed to some scenarios in a different project that makes sense, you live and you learn i guess :).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323214681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323219794","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1323219794","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1323219794,"node_id":"IC_kwDOAAJ06c5O3rtS","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T07:21:36Z","updated_at":"2022-11-22T07:21:36Z","author_association":"CONTRIBUTOR","body":"I went down a rabbit how and checked what BinaryReaderDataInput was used for as I could not seem to find an equivalent in Java, so I am not sure why that exists. I ended up in the OfflineSorter class which seems to have quite a few differences between .NET and Java, I couldn't really make heads or tails of it and in the end why the BinaryReaderDataInput existed.\r\n\r\nNot sure if you have any insights here?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323219794/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323361243","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1323361243","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1323361243,"node_id":"IC_kwDOAAJ06c5O4OPb","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T09:28:40Z","updated_at":"2022-11-22T10:27:25Z","author_association":"CONTRIBUTOR","body":"> I am not sure I totally understand the difference between **OPTION-A** and **OPTION-B**. Partial classes are a compiler feature that makes it easier to organize code, but at the end of the day they get compiled into 1 class. Both partial classes have access to all of the private state of the class.\r\n\r\n**OPTION-A** is something that the team does not have to get involved with directly, it can be a 3rd party contribution that lives elsewhere, the team COULD open up a few things to make it a bit easier to copy and extend the Directory and Input/Output classes, e.g. exposing internally used helper methods if that turns out to be helpful as one go deeper.\r\n\r\nBut I think the confusion here is how far up the stack this goes, I am only focusing on the replication scenarios and similar scenarios that works on that level. As I said and tried to re-iterate is that I don't think we can get all the way up to `IndexWriter.UpdateDocumentAsync(...)` without problems - This also sets the two options very much apart because if we were even to Attempt to go that far, that had to be done within the Lucene Source (I think I can state that with a 100% certainty, if not then a 99.9999% certainty), where for replication purposes etc. We don't need to go that far up the stack, and because of that, this can be done as a custom implementation.\r\n\r\nA SUPER DIRTY POC of **OPTION-A** can be seen here: https://github.com/jeme/LuceneAsyncInputsPoc/tree/main/src/LuceneAsyncInputsPoc/LuceneAsyncInputsPoc/CustomDirectory\r\n\r\n> And if we add code to the codebase that is not part of Lucene, it should **all** be in partial classes and put into the Support folder.\r\n\r\nI didn't know that was already a convention in place, then everything I said about partial files can be ignored as that is already the convention :-)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323361243/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323374601","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1323374601","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1323374601,"node_id":"IC_kwDOAAJ06c5O4RgJ","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T09:39:02Z","updated_at":"2022-11-22T09:49:27Z","author_association":"CONTRIBUTOR","body":"@jeme \r\n\r\nLooks like `BinaryReaderDataInput` was used only in the [constructor of `OfflineSorter.ByteSequencesReader`](https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.0/lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java#L501-L503) to replace the [`DataInputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/DataInputStream.html) for .NET. But I see why you went down this rabbit hole. The constructor wraps `FileStream` in a `BinaryReader` when `BinaryReaderDataInput` actually could be swapped for `InputStreamDataInput` and use the `FileStream` directly. We can then delete the `BinaryReaderDataInput` from the codebase because it is the only place it is used.\r\n\r\nSame goes for `BinaryWriterDataOutput`.\r\n\r\n`OfflineSorter` also has another problem. It uses [FileSupport.CreateTempFile()](https://github.com/apache/lucenenet/blob/4e49612d6867194440694b77db95fd0ed756c9a9/src/Lucene.Net/Util/OfflineSorter.cs#L305) to get a `FileInfo` object. Then attempts to open the file afterward in `MergePartitions`. There is a non-zero chance on Windows that the operating system hasn't closed the handle on the file and we get a \"file in use by another process\" error.\r\n\r\nI was considering using some low-level APIs to create a file handle and wrap it in a subclass of [System.IO.FileSystemInfo](https://learn.microsoft.com/en-us/dotnet/api/system.io.filesysteminfo?view=net-7.0) (which `FileInfo` subclasses) and returning that from `FileSupport.CreateTempFile()`. But now that I look again, maybe we should just change `FileSupport.CreateTempFile()` to allow passing in the flags for creating and returning the `FileStream` instance that is used to create the file. It looks like every place that is using it immediately opens a stream afterwards, anyway. `OfflineSorter` could be changed to accept streams instead of `FileInfo` objects in its `Sort` method.\r\n\r\nNeeds some more analysis. Looks like some places actually need the name of the file, which `FileStream` doesn't provide access to.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323374601/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323440052","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1323440052","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1323440052,"node_id":"IC_kwDOAAJ06c5O4he0","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T10:28:36Z","updated_at":"2022-11-22T10:28:36Z","author_association":"CONTRIBUTOR","body":"> > I am not sure I totally understand the difference between **OPTION-A** and **OPTION-B**. Partial classes are a compiler feature that makes it easier to organize code, but at the end of the day they get compiled into 1 class. Both partial classes have access to all of the private state of the class.\r\n> \r\n> **OPTION-A** is something that the team does not have to get involved with directly, it can be a 3rd party contribution that lives elsewhere, the team COULD open up a few things to make it a bit easier to copy and extend the Directory and Input/Output classes, e.g. exposing internally used helper methods if that turns out to be helpful as one go deeper.\r\n> \r\n> But I think the confusion here is how far up the stack this goes, I am only focusing on the replication scenarios and similar scenarios that works on that level. As I said and tried to re-iterate is that I don't think we can get all the way up to `IndexWriter.UpdateDocumentAsync(...)` without problems - This also sets the two options very much apart because if we were even to Attempt to go that far, that had to be done within the Lucene Source (I think I can state that with a 100% certainty, if not then a 99.9999% certainty), where for replication purposes etc. We don't need to go that far up the stack, and because of that, this can be done as a custom implementation.\r\n> \r\n> A SUPER DIRTY POC of **OPTION-A** can be seen here: https://github.com/jeme/LuceneAsyncInputsPoc/tree/main/src/LuceneAsyncInputsPoc/LuceneAsyncInputsPoc/CustomDirectory\r\n\r\nGotcha.\r\n\r\nI don't think there is such an issue if we limit the scope like this. In fact, when upgrading the replicator tests, I left some [`LUCENENET TODO`s about making it async](https://github.com/apache/lucenenet/blob/4e49612d6867194440694b77db95fd0ed756c9a9/src/Lucene.Net.Tests.Replicator/Http/ReplicationServlet.cs#L86) so it fits together with ASP.NET Core better.\r\n\r\n Making stuff public that never was meant to be is probably not a good idea, so it would be preferable to fix this using partial classes (**OPTION-B**). But I agree that trying to fix `IndexWriter.UpdateDocument()` is probably not worth the effort.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323440052/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323477867","html_url":"https://github.com/apache/lucenenet/pull/769#issuecomment-1323477867","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/769","id":1323477867,"node_id":"IC_kwDOAAJ06c5O4qtr","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T10:49:49Z","updated_at":"2022-11-22T10:49:49Z","author_association":"CONTRIBUTOR","body":"Oh, as for being blind, we now have the tests running automatically when you submit a PR, so you can see the build and tests happen without running them locally.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323477867/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323652154","html_url":"https://github.com/apache/lucenenet/issues/763#issuecomment-1323652154","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/763","id":1323652154,"node_id":"IC_kwDOAAJ06c5O5VQ6","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T13:07:29Z","updated_at":"2022-11-22T13:07:29Z","author_association":"CONTRIBUTOR","body":"> @jeme\r\n> \r\n> Looks like `BinaryReaderDataInput` was used only in the [constructor of `OfflineSorter.ByteSequencesReader`](https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.0/lucene/core/src/java/org/apache/lucene/util/OfflineSorter.java#L501-L503) to replace the [`DataInputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/DataInputStream.html) for .NET. But I see why you went down this rabbit hole. The constructor wraps `FileStream` in a `BinaryReader` when `BinaryReaderDataInput` actually could be swapped for `InputStreamDataInput` and use the `FileStream` directly. We can then delete the `BinaryReaderDataInput` from the codebase because it is the only place it is used.\r\n> \r\n> Same goes for `BinaryWriterDataOutput`.\r\n> \r\n\r\n\r\nOkay, I see where we went wrong for `ByteSequencesReader` and `ByteSequencesWriter`. Their constructors accept a reference to `java.io.DataInput` and `java.io.DataOutput` interfaces. During the port, we transposed these with Lucene's `DataInput` and `DataOutput` abstract classes. So, we are plugging this together wrong.\r\n\r\nAlthough we have ported over the `DataInputStream` and `DataOutputStream`, according to the J2N docs, it is better to use the `BinaryReader` and `BinaryWriter` if the modified UTF-8 format used in Java is not required. And indeed, we don't use that format here. `BinaryReader` and `BinaryWriter` don't have any interfaces, but both of them are not sealed and have virtual members (except for a few odd ones). So, I am not seeing too much of an issue with changing the constructors to accept `BinaryReader` and `BinaryWriter` instead of `DataInput` and `DataOutput`.\r\n\r\n\r\n> `OfflineSorter` also has another problem. It uses [FileSupport.CreateTempFile()](https://github.com/apache/lucenenet/blob/4e49612d6867194440694b77db95fd0ed756c9a9/src/Lucene.Net/Util/OfflineSorter.cs#L305) to get a `FileInfo` object. Then attempts to open the file afterward in `MergePartitions`. There is a non-zero chance on Windows that the operating system hasn't closed the handle on the file and we get a \"file in use by another process\" error.\r\n> \r\n> I was considering using some low-level APIs to create a file handle and wrap it in a subclass of [System.IO.FileSystemInfo](https://learn.microsoft.com/en-us/dotnet/api/system.io.filesysteminfo?view=net-7.0) (which `FileInfo` subclasses) and returning that from `FileSupport.CreateTempFile()`. But now that I look again, maybe we should just change `FileSupport.CreateTempFile()` to allow passing in the flags for creating and returning the `FileStream` instance that is used to create the file. It looks like every place that is using it immediately opens a stream afterwards, anyway. `OfflineSorter` could be changed to accept streams instead of `FileInfo` objects in its `Sort` method.\r\n> \r\n> Needs some more analysis. Looks like some places actually need the name of the file, which `FileStream` doesn't provide access to.\r\n\r\nLooks like I was wrong - `FileStream` does have a `Name` property, so we have access to the underlying filename. There are a couple of callers that seem to fit better with using the `FileInfo` and they are both in the test framework.  All of the other callers use it in conjunction with `OfflineSorter`. So, creating overloads named `CreateTempFileAsStream()` seem to be the way to go here. The existing overloads can easily call `CreateTempFileAsStream()` and return a `FileInfo` so we can reuse logic.\r\n\r\nIt gets a bit mangled in `OfflineSorter` because it is set up to delete its files, but we can specify in the docs when calling `Sort()` that it should be passed a `FileStream` with the [FileOptions.DeleteOnClose](https://learn.microsoft.com/en-us/dotnet/api/system.io.fileoptions?view=net-7.0#fields) option set or else delete it explicitly. It will have to accept `FileStream` rather than `Stream`, but since it was only designed to work with files, I don't see that as an issue.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1323652154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324064975","html_url":"https://github.com/apache/lucenenet/issues/770#issuecomment-1324064975","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/770","id":1324064975,"node_id":"IC_kwDOAAJ06c5O66DP","user":{"login":"laimis","id":911757,"node_id":"MDQ6VXNlcjkxMTc1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/911757?v=4","gravatar_id":"","url":"https://api.github.com/users/laimis","html_url":"https://github.com/laimis","followers_url":"https://api.github.com/users/laimis/followers","following_url":"https://api.github.com/users/laimis/following{/other_user}","gists_url":"https://api.github.com/users/laimis/gists{/gist_id}","starred_url":"https://api.github.com/users/laimis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/laimis/subscriptions","organizations_url":"https://api.github.com/users/laimis/orgs","repos_url":"https://api.github.com/users/laimis/repos","events_url":"https://api.github.com/users/laimis/events{/privacy}","received_events_url":"https://api.github.com/users/laimis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T18:09:23Z","updated_at":"2022-11-22T18:09:23Z","author_association":"CONTRIBUTOR","body":"We follow Java version for this logic and it looks like they convert it to single letters:\r\n\r\nhttps://github.com/apache/lucene/blob/8ac26737913d0c1555019e93bc6bf7db1ab9047e/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.java","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324064975/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324070159","html_url":"https://github.com/apache/lucenenet/issues/770#issuecomment-1324070159","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/770","id":1324070159,"node_id":"IC_kwDOAAJ06c5O67UP","user":{"login":"ab-tools","id":1347603,"node_id":"MDQ6VXNlcjEzNDc2MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1347603?v=4","gravatar_id":"","url":"https://api.github.com/users/ab-tools","html_url":"https://github.com/ab-tools","followers_url":"https://api.github.com/users/ab-tools/followers","following_url":"https://api.github.com/users/ab-tools/following{/other_user}","gists_url":"https://api.github.com/users/ab-tools/gists{/gist_id}","starred_url":"https://api.github.com/users/ab-tools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ab-tools/subscriptions","organizations_url":"https://api.github.com/users/ab-tools/orgs","repos_url":"https://api.github.com/users/ab-tools/repos","events_url":"https://api.github.com/users/ab-tools/events{/privacy}","received_events_url":"https://api.github.com/users/ab-tools/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T18:14:25Z","updated_at":"2022-11-22T18:14:25Z","author_association":"NONE","body":"Thanks for the quick reply, Laimonas, appreciated.\r\n\r\nAs this feels simply incorrect as a German native speaker (especially if there are other characters that are converted to more than one character) I will just create a related ticket in the Java version.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324070159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324071326","html_url":"https://github.com/apache/lucenenet/issues/770#issuecomment-1324071326","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/770","id":1324071326,"node_id":"IC_kwDOAAJ06c5O67me","user":{"login":"ab-tools","id":1347603,"node_id":"MDQ6VXNlcjEzNDc2MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1347603?v=4","gravatar_id":"","url":"https://api.github.com/users/ab-tools","html_url":"https://github.com/ab-tools","followers_url":"https://api.github.com/users/ab-tools/followers","following_url":"https://api.github.com/users/ab-tools/following{/other_user}","gists_url":"https://api.github.com/users/ab-tools/gists{/gist_id}","starred_url":"https://api.github.com/users/ab-tools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ab-tools/subscriptions","organizations_url":"https://api.github.com/users/ab-tools/orgs","repos_url":"https://api.github.com/users/ab-tools/repos","events_url":"https://api.github.com/users/ab-tools/events{/privacy}","received_events_url":"https://api.github.com/users/ab-tools/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T18:15:33Z","updated_at":"2022-11-22T18:15:33Z","author_association":"NONE","body":"OK, I just see there is no need to create a ticket as this bug has been reported already:\r\nhttps://github.com/apache/lucene/issues/11733","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324071326/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324079279","html_url":"https://github.com/apache/lucenenet/issues/770#issuecomment-1324079279","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/770","id":1324079279,"node_id":"IC_kwDOAAJ06c5O69iv","user":{"login":"laimis","id":911757,"node_id":"MDQ6VXNlcjkxMTc1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/911757?v=4","gravatar_id":"","url":"https://api.github.com/users/laimis","html_url":"https://github.com/laimis","followers_url":"https://api.github.com/users/laimis/followers","following_url":"https://api.github.com/users/laimis/following{/other_user}","gists_url":"https://api.github.com/users/laimis/gists{/gist_id}","starred_url":"https://api.github.com/users/laimis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/laimis/subscriptions","organizations_url":"https://api.github.com/users/laimis/orgs","repos_url":"https://api.github.com/users/laimis/repos","events_url":"https://api.github.com/users/laimis/events{/privacy}","received_events_url":"https://api.github.com/users/laimis/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T18:23:14Z","updated_at":"2022-11-22T18:23:14Z","author_association":"CONTRIBUTOR","body":"Sounds good, I will go ahead and close this ticket then, and we can follow the java version lead with what they decide.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324079279/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324083016","html_url":"https://github.com/apache/lucenenet/issues/770#issuecomment-1324083016","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/770","id":1324083016,"node_id":"IC_kwDOAAJ06c5O6-dI","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T18:26:48Z","updated_at":"2022-11-22T18:26:48Z","author_association":"CONTRIBUTOR","body":"I'd suggest trying the [ICUFoldingFilter](https://lucenenet.apache.org/docs/4.8.0-beta00016/api/icu/Lucene.Net.Analysis.Icu.ICUFoldingFilter.html). Alternatively, if you just need a straight case fold the [ICUNormalizer2Filter has a constructor with that option](https://lucenenet.apache.org/docs/4.8.0-beta00016/api/icu/Lucene.Net.Analysis.Icu.ICUNormalizer2CharFilter.html#Lucene_Net_Analysis_Icu_ICUNormalizer2CharFilter__ctor_System_IO_TextReader_), which is the strict interpretation of Unicode.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324083016/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324092420","html_url":"https://github.com/apache/lucenenet/issues/770#issuecomment-1324092420","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/770","id":1324092420,"node_id":"IC_kwDOAAJ06c5O7AwE","user":{"login":"ab-tools","id":1347603,"node_id":"MDQ6VXNlcjEzNDc2MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1347603?v=4","gravatar_id":"","url":"https://api.github.com/users/ab-tools","html_url":"https://github.com/ab-tools","followers_url":"https://api.github.com/users/ab-tools/followers","following_url":"https://api.github.com/users/ab-tools/following{/other_user}","gists_url":"https://api.github.com/users/ab-tools/gists{/gist_id}","starred_url":"https://api.github.com/users/ab-tools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ab-tools/subscriptions","organizations_url":"https://api.github.com/users/ab-tools/orgs","repos_url":"https://api.github.com/users/ab-tools/repos","events_url":"https://api.github.com/users/ab-tools/events{/privacy}","received_events_url":"https://api.github.com/users/ab-tools/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-22T18:35:07Z","updated_at":"2022-11-22T18:35:07Z","author_association":"NONE","body":"Thanks, both of you!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1324092420/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1325875666","html_url":"https://github.com/apache/lucenenet/issues/772#issuecomment-1325875666","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/772","id":1325875666,"node_id":"IC_kwDOAAJ06c5PB0HS","user":{"login":"mpdunlop","id":1008468,"node_id":"MDQ6VXNlcjEwMDg0Njg=","avatar_url":"https://avatars.githubusercontent.com/u/1008468?v=4","gravatar_id":"","url":"https://api.github.com/users/mpdunlop","html_url":"https://github.com/mpdunlop","followers_url":"https://api.github.com/users/mpdunlop/followers","following_url":"https://api.github.com/users/mpdunlop/following{/other_user}","gists_url":"https://api.github.com/users/mpdunlop/gists{/gist_id}","starred_url":"https://api.github.com/users/mpdunlop/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mpdunlop/subscriptions","organizations_url":"https://api.github.com/users/mpdunlop/orgs","repos_url":"https://api.github.com/users/mpdunlop/repos","events_url":"https://api.github.com/users/mpdunlop/events{/privacy}","received_events_url":"https://api.github.com/users/mpdunlop/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-24T02:41:57Z","updated_at":"2022-11-24T02:41:57Z","author_association":"NONE","body":"I suspect this is being caused by my local timezone being GMT+8. If this is now adjusted to UTC in the latest beta, this would fall below DateTime.MinValue.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1325875666/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1328075439","html_url":"https://github.com/apache/lucenenet/pull/773#issuecomment-1328075439","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/773","id":1328075439,"node_id":"IC_kwDOAAJ06c5PKNKv","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-26T16:28:04Z","updated_at":"2022-11-26T16:28:04Z","author_association":"CONTRIBUTOR","body":"Thanks for the great contribution! Love it.\r\n\r\nSuggestion for Part 6: Build a custom analyzer and use Lucene.Net.TestFramework to test the implementation. The test framework is underutilized IMO. There aren't many tools out there that come with their own tests that can be used to ensure you build extensions correctly. Of course, the extension doesn't have to be an analyzer, but I think that is one of the most common ones. It would also potentially help us find any usability issues with the test framework, since NUnit is nothing like JUnit so we had to pave our own way to porting it.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1328075439/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1328076666","html_url":"https://github.com/apache/lucenenet/pull/773#issuecomment-1328076666","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/773","id":1328076666,"node_id":"IC_kwDOAAJ06c5PKNd6","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-26T16:37:01Z","updated_at":"2022-11-26T16:37:01Z","author_association":"CONTRIBUTOR","body":"The changes are now live: https://lucenenet.apache.org/contributing/community-links.html. I love automation.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1328076666/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1328077499","html_url":"https://github.com/apache/lucenenet/issues/772#issuecomment-1328077499","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/772","id":1328077499,"node_id":"IC_kwDOAAJ06c5PKNq7","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-26T16:42:24Z","updated_at":"2022-11-26T16:42:24Z","author_association":"CONTRIBUTOR","body":"Thanks for the report.\r\n\r\nYea, looks like you are right. I have confirmed this is a bug, although I am not sure what the solution is, yet.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1328077499/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1328714526","html_url":"https://github.com/apache/lucenenet/issues/772#issuecomment-1328714526","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/772","id":1328714526,"node_id":"IC_kwDOAAJ06c5PMpMe","user":{"login":"mpdunlop","id":1008468,"node_id":"MDQ6VXNlcjEwMDg0Njg=","avatar_url":"https://avatars.githubusercontent.com/u/1008468?v=4","gravatar_id":"","url":"https://api.github.com/users/mpdunlop","html_url":"https://github.com/mpdunlop","followers_url":"https://api.github.com/users/mpdunlop/followers","following_url":"https://api.github.com/users/mpdunlop/following{/other_user}","gists_url":"https://api.github.com/users/mpdunlop/gists{/gist_id}","starred_url":"https://api.github.com/users/mpdunlop/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mpdunlop/subscriptions","organizations_url":"https://api.github.com/users/mpdunlop/orgs","repos_url":"https://api.github.com/users/mpdunlop/repos","events_url":"https://api.github.com/users/mpdunlop/events{/privacy}","received_events_url":"https://api.github.com/users/mpdunlop/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-28T08:33:33Z","updated_at":"2022-11-28T08:34:45Z","author_association":"NONE","body":"I'd like to change DateTools.cs to more closely match the Java source, but there's quite a few differences that I don't want to remove without confirming the project's approach to porting first.\r\n\r\nIs it right to have additional public methods in Lucene.net that aren't present in the Java source? I ask because there's public methods in Lucene.net DateTools which accept TimeZone as a parameter, which aren't present in Java Lucene 4.8.\r\n\r\nFor example, in the Java source there is only:\r\n\r\n```java\r\npublic static String dateToString(Date date, Resolution resolution)\r\n```\r\n\r\nBut in Lucene.net there are two:\r\n\r\n```c#\r\npublic static string DateToString(DateTime date, DateResolution resolution)\r\n```\r\nand\r\n```c#\r\npublic static string DateToString(DateTime date, TimeZoneInfo timeZone, DateResolution resolution)\r\n```\r\n\r\nLooking at https://github.com/apache/lucene/blob/releases/lucene-solr/4.8.0/lucene/core/src/java/org/apache/lucene/document/DateTools.java, it looks like DateTools.Resolution contains both the TimeZone and the resolution to return the time in, and the TimeZone is always assumed to be in GMT:\r\n\r\n```java\r\n    Resolution(int formatLen) {\r\n      this.formatLen = formatLen;\r\n      // formatLen 10's place:                     11111111\r\n      // formatLen  1's place:            12345678901234567\r\n      this.format = new SimpleDateFormat(\"yyyyMMddHHmmssSSS\".substring(0,formatLen),Locale.ROOT);\r\n      this.format.setTimeZone(GMT);\r\n    }\r\n```\r\n\r\nAdditionally, in commit 46e2437166385837962e809a1675532953e6092b, the DateTools.Resolution enum was denested and renamed DateResolution, but it remains as DateTools.Resolution in the Java source. I'm not sure that this is necessarily a problem, but it is a departure from the source so I wanted to confirm that this was intentional before making any modifications.\r\n\r\nThere's also some tests in Lucene.net's TestDateTools.cs which aren't in the Lucene 4.8 source (e.g. TestDateToolsUTC_Ticks). These tests fail when I restore the old logic. I don't think there's a problem with adding additional tests, but I need to either remove or adjust these so they no longer fail if we assume everything is in UTC.\r\n\r\nTo summarise:\r\n- I'd like to change DateTools.cs to remove any method TimeZone parameters, remove any DateTimeOffset adjustmentsand assume all input dates are UTC, as per the Java Lucene source.\r\n- I'd like to remove the tests present in Lucene.net's TestDateTools.cs that aren't present in TestDateTools.java that fail after making the above changes.\r\n- I'd like to add an additional test as per the original issue to ensure that DateToString does not throw AggregateException when the input DateTime is 01-01-0001, the DateTime.Kind is Local and and the local timezone is ahead of UTC.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1328714526/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1329023673","html_url":"https://github.com/apache/lucenenet/issues/772#issuecomment-1329023673","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/772","id":1329023673,"node_id":"IC_kwDOAAJ06c5PN0q5","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-28T12:46:20Z","updated_at":"2022-11-28T12:46:20Z","author_association":"CONTRIBUTOR","body":"The time zone parameter was recently added. This is to align with the Java DateFormat which allows for the time zone to be changed. We don't have a complete port of DateFormat (not very sensible in .NET), but the flexible QueryParser uses [`NumericDateFormat`](https://github.com/apache/lucenenet/blob/master/src/Lucene.Net.QueryParser/Flexible/Standard/Config/NumberDateFormat.cs) to convert the date to a number, which uses this format. In Lucene, this accepted a DateFormat as a parameter, but we made a hybrid implementation instead since .NET has no such animal. There is DateTimeFormatInfo, but it doesn't provide the expected functionality. I also attempted to make `DateTime` work, but `DateTimeOffset` seems to be the only thing in .NET that lets you specify a timezone other than Local or UTC and then converted into the expected string.\r\n\r\nRefer to https://github.com/dotnet/runtime/issues/62247 to understand the limitations of the .NET time zone feature.\r\n\r\nThe problem you are seeing is that in .NET the `DateTime` defaults to 0001-01-0001, but in Java the Date class defaults to 1970-01-01 (both midnight UTC). The default .NET date cannot be represented with a time zone because time zones hadn't been invented yet (they are political, not geographical). But in Java, the default works fine because it is within the expected range.\r\n\r\nThe answer to solving this lies in the .NET source code. I see there is an enum value that allows suppression of an invalid time zone so it doesn't throw. We need to use the same validation logic to ensure we don't call the time zone conversion functions when it is out of range. What to do instead isn't quite clear to me yet. But a guess would be to call the date.ToString() method like we did [in beta 00015](https://github.com/apache/lucenenet/blob/Lucene.Net_4_8_0_beta00015/src/Lucene.Net/Document/DateTools.cs). However, that doesn't shift the time zone appropriately.\r\n\r\nPerhaps we should do the time zone conversion on the current date to get a timespan (difference from UTC), then use that to create a new DateTimeOffset(date, offset).ToString(CultureInfo.InvariantCulture) on that. That is, only in the case where it is out of range to be considered a valid timezone. When it is in range, the current code works fine.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1329023673/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1329053439","html_url":"https://github.com/apache/lucenenet/issues/772#issuecomment-1329053439","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/772","id":1329053439,"node_id":"IC_kwDOAAJ06c5PN77_","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-28T13:02:39Z","updated_at":"2022-11-28T13:02:39Z","author_association":"CONTRIBUTOR","body":"As for de-nesting the enum, see [CA1034: Nested types should not be visible](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1034). While we aren't strictly following this rule everywhere, in this case it made sense to make the enum more discoverable.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1329053439/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1329067396","html_url":"https://github.com/apache/lucenenet/issues/772#issuecomment-1329067396","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/772","id":1329067396,"node_id":"IC_kwDOAAJ06c5PN_WE","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-11-28T13:10:58Z","updated_at":"2022-11-28T13:10:58Z","author_association":"CONTRIBUTOR","body":"> The answer to solving this lies in the .NET source code. I see there is an enum value that allows suppression of an invalid time zone so it doesn't throw. We need to use the same validation logic to ensure we don't call the time zone conversion functions when it is out of range. What to do instead isn't quite clear to me yet. But a guess would be to call the date.ToString() method like we did [in beta 00015](https://github.com/apache/lucenenet/blob/Lucene.Net_4_8_0_beta00015/src/Lucene.Net/Document/DateTools.cs). However, that doesn't shift the time zone appropriately.\r\n\r\n>\r\n> Perhaps we should do the time zone conversion on the current date to get a timespan (difference from UTC), then use that to create a new DateTimeOffset(date, offset).ToString(CultureInfo.InvariantCulture) on that. That is, only in the case where it is out of range to be considered a valid timezone. When it is in range, the current code works fine.\r\n\r\nOn second thought, whatever they are doing in the .NET source code when they suppress the error is probably the right answer for what we need to do. Again, only in the case where we are out of range.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1329067396/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1339394106","html_url":"https://github.com/apache/lucenenet/pull/776#issuecomment-1339394106","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/776","id":1339394106,"node_id":"IC_kwDOAAJ06c5P1Yg6","user":{"login":"chenhh021","id":26926033,"node_id":"MDQ6VXNlcjI2OTI2MDMz","avatar_url":"https://avatars.githubusercontent.com/u/26926033?v=4","gravatar_id":"","url":"https://api.github.com/users/chenhh021","html_url":"https://github.com/chenhh021","followers_url":"https://api.github.com/users/chenhh021/followers","following_url":"https://api.github.com/users/chenhh021/following{/other_user}","gists_url":"https://api.github.com/users/chenhh021/gists{/gist_id}","starred_url":"https://api.github.com/users/chenhh021/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chenhh021/subscriptions","organizations_url":"https://api.github.com/users/chenhh021/orgs","repos_url":"https://api.github.com/users/chenhh021/repos","events_url":"https://api.github.com/users/chenhh021/events{/privacy}","received_events_url":"https://api.github.com/users/chenhh021/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-12-06T13:30:54Z","updated_at":"2022-12-06T13:30:54Z","author_association":"CONTRIBUTOR","body":"Sorry that I forget to clear contain of the last PR.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1339394106/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1339436989","html_url":"https://github.com/apache/lucenenet/pull/776#issuecomment-1339436989","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/776","id":1339436989,"node_id":"IC_kwDOAAJ06c5P1i-9","user":{"login":"chenhh021","id":26926033,"node_id":"MDQ6VXNlcjI2OTI2MDMz","avatar_url":"https://avatars.githubusercontent.com/u/26926033?v=4","gravatar_id":"","url":"https://api.github.com/users/chenhh021","html_url":"https://github.com/chenhh021","followers_url":"https://api.github.com/users/chenhh021/followers","following_url":"https://api.github.com/users/chenhh021/following{/other_user}","gists_url":"https://api.github.com/users/chenhh021/gists{/gist_id}","starred_url":"https://api.github.com/users/chenhh021/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chenhh021/subscriptions","organizations_url":"https://api.github.com/users/chenhh021/orgs","repos_url":"https://api.github.com/users/chenhh021/repos","events_url":"https://api.github.com/users/chenhh021/events{/privacy}","received_events_url":"https://api.github.com/users/chenhh021/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-12-06T14:03:26Z","updated_at":"2022-12-06T14:03:26Z","author_association":"CONTRIBUTOR","body":"Sorry that the cleaning is not thorough, my IDE auto fix some blanks. Commit history is somehow chaos too. I'll recreate PR if needed.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1339436989/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1339537974","html_url":"https://github.com/apache/lucenenet/pull/776#issuecomment-1339537974","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/776","id":1339537974,"node_id":"IC_kwDOAAJ06c5P17o2","user":{"login":"chenhh021","id":26926033,"node_id":"MDQ6VXNlcjI2OTI2MDMz","avatar_url":"https://avatars.githubusercontent.com/u/26926033?v=4","gravatar_id":"","url":"https://api.github.com/users/chenhh021","html_url":"https://github.com/chenhh021","followers_url":"https://api.github.com/users/chenhh021/followers","following_url":"https://api.github.com/users/chenhh021/following{/other_user}","gists_url":"https://api.github.com/users/chenhh021/gists{/gist_id}","starred_url":"https://api.github.com/users/chenhh021/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chenhh021/subscriptions","organizations_url":"https://api.github.com/users/chenhh021/orgs","repos_url":"https://api.github.com/users/chenhh021/repos","events_url":"https://api.github.com/users/chenhh021/events{/privacy}","received_events_url":"https://api.github.com/users/chenhh021/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-12-06T15:16:48Z","updated_at":"2022-12-06T15:16:48Z","author_association":"CONTRIBUTOR","body":"PR recreated, see [here](https://github.com/apache/lucenenet/pull/777). Omit this one.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1339537974/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1339542704","html_url":"https://github.com/apache/lucenenet/issues/775#issuecomment-1339542704","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/775","id":1339542704,"node_id":"IC_kwDOAAJ06c5P18yw","user":{"login":"chenhh021","id":26926033,"node_id":"MDQ6VXNlcjI2OTI2MDMz","avatar_url":"https://avatars.githubusercontent.com/u/26926033?v=4","gravatar_id":"","url":"https://api.github.com/users/chenhh021","html_url":"https://github.com/chenhh021","followers_url":"https://api.github.com/users/chenhh021/followers","following_url":"https://api.github.com/users/chenhh021/following{/other_user}","gists_url":"https://api.github.com/users/chenhh021/gists{/gist_id}","starred_url":"https://api.github.com/users/chenhh021/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chenhh021/subscriptions","organizations_url":"https://api.github.com/users/chenhh021/orgs","repos_url":"https://api.github.com/users/chenhh021/repos","events_url":"https://api.github.com/users/chenhh021/events{/privacy}","received_events_url":"https://api.github.com/users/chenhh021/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-12-06T15:20:12Z","updated_at":"2022-12-06T15:20:12Z","author_association":"CONTRIBUTOR","body":"Sorry for created a PR containing irrelevant file changes. Please see the latest one. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1339542704/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1340627062","html_url":"https://github.com/apache/lucenenet/issues/778#issuecomment-1340627062","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/778","id":1340627062,"node_id":"IC_kwDOAAJ06c5P6Fh2","user":{"login":"nikcio","id":24605285,"node_id":"MDQ6VXNlcjI0NjA1Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/24605285?v=4","gravatar_id":"","url":"https://api.github.com/users/nikcio","html_url":"https://github.com/nikcio","followers_url":"https://api.github.com/users/nikcio/followers","following_url":"https://api.github.com/users/nikcio/following{/other_user}","gists_url":"https://api.github.com/users/nikcio/gists{/gist_id}","starred_url":"https://api.github.com/users/nikcio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikcio/subscriptions","organizations_url":"https://api.github.com/users/nikcio/orgs","repos_url":"https://api.github.com/users/nikcio/repos","events_url":"https://api.github.com/users/nikcio/events{/privacy}","received_events_url":"https://api.github.com/users/nikcio/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-12-07T09:13:10Z","updated_at":"2022-12-07T09:13:10Z","author_association":"CONTRIBUTOR","body":"This question is similar to what is found in: https://github.com/apache/lucenenet/issues/437#issuecomment-992014580\r\n\r\nBut I too would like to know which issues are blockers for a release version of Lucene 4.8.0. I see in the comment linked above there's some issues linked. But it might be an idea to have a pined issue with the roadmap/issue tracker for the next release version.\r\n\r\nI don't know if the milestone is up to date but if this is the preferred way to showcase issues needing to be solved before a release version then an issue could just be a short description followed by a link to the milestone.\r\n\r\nOtherwise an issue with a list of issue links would also be great. For example:\r\n\r\nTitle `Lucene 4.8.0 progress (Roadmap)`\r\nContent:\r\n```\r\nBlockers:\r\n- Issue 1\r\n- Issue 2\r\n\r\nHigh priority\r\n- Issue 1\r\n- Issue 2\r\n\r\nNormal priority\r\n.... And so on\r\n```\r\n\r\nWhat do you think @NightOwl888? I think this will be a recuring question until a non beta version is released 😄. Might also help other people find task to help out on?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1340627062/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1344114895","html_url":"https://github.com/apache/lucenenet/issues/778#issuecomment-1344114895","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/778","id":1344114895,"node_id":"IC_kwDOAAJ06c5QHZDP","user":{"login":"jeme","id":1609615,"node_id":"MDQ6VXNlcjE2MDk2MTU=","avatar_url":"https://avatars.githubusercontent.com/u/1609615?v=4","gravatar_id":"","url":"https://api.github.com/users/jeme","html_url":"https://github.com/jeme","followers_url":"https://api.github.com/users/jeme/followers","following_url":"https://api.github.com/users/jeme/following{/other_user}","gists_url":"https://api.github.com/users/jeme/gists{/gist_id}","starred_url":"https://api.github.com/users/jeme/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeme/subscriptions","organizations_url":"https://api.github.com/users/jeme/orgs","repos_url":"https://api.github.com/users/jeme/repos","events_url":"https://api.github.com/users/jeme/events{/privacy}","received_events_url":"https://api.github.com/users/jeme/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2022-12-09T10:15:41Z","updated_at":"2022-12-09T10:15:41Z","author_association":"CONTRIBUTOR","body":"AFAIK it is the milestone, @NightOwl888 has been trying to keep it under the milestone: https://github.com/apache/lucenenet/issues?q=is%3Aopen+is%3Aissue+milestone%3A4.8.0 \r\n\r\n@NightOwl888 Feel free to correct me if that is incorrect :)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/1344114895/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]