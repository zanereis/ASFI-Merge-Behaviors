[{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2524844734","html_url":"https://github.com/apache/lucenenet/issues/1062#issuecomment-2524844734","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1062","id":2524844734,"node_id":"IC_kwDOAAJ06c6WfhK-","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-07T03:34:16Z","updated_at":"2024-12-07T03:34:16Z","author_association":"CONTRIBUTOR","body":"A word of caution here. The first stab at implementing `Debugging.Assert()` used `Func<bool>`:\r\n\r\n- https://github.com/apache/lucenenet/pull/327\r\n\r\nWe found that using this approach was very detrimental to performance. At the time, it was presumed that this was due to the lambda capture allocations rather than the use of `Func<bool>` (which could be passed a method that returns `bool` instead) but no benchmark was done to determine which of these (or both) caused the performance degradation.\r\n\r\n- https://github.com/apache/lucenenet/pull/372\r\n- https://github.com/apache/lucenenet/pull/373\r\n\r\nThere was also an effort to factor out some hand coded classes. For example:\r\n\r\nhttps://github.com/apache/lucenenet/blob/d597a5f38a6a2d78e075545190368735596ddcab/src/Lucene.Net/Search/FieldCache.cs#L382\r\n\r\nThat effort was stopped as soon as we discovered that using lambdas was very costly, but we didn't go back and revert those to hand-coded classes, either. Maybe we wouldn't have to if we could pass it a function instead of a lambda, which may not incur the allocation overhead. Benchmarking is needed.\r\n\r\nGiving it a similar UX as Lucene is great, but if it incurs a significant performance penalty, we should stick with the hand-coded classes.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2524844734/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2524854405","html_url":"https://github.com/apache/lucenenet/issues/1062#issuecomment-2524854405","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1062","id":2524854405,"node_id":"IC_kwDOAAJ06c6WfjiF","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-07T04:01:48Z","updated_at":"2024-12-07T04:01:48Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Thanks for that context. Looking at the changes to fix the performance issues you mention, it was a difference between having a lambda that captures and a string interpolation, which is quite different than the scenario here.\r\n\r\nWhen data in the surrounding scope is captured, here it's the difference between having a custom AnonymousClass that captures the data in a field, and for a lambda, that is generated by the compiler as a class that captures the field, so they should be about identical in terms of heap allocation and performance. The compiler might be able to apply greater optimizations to lambdas that do not capture. I'll benchmark to be sure though.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2524854405/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2525082736","html_url":"https://github.com/apache/lucenenet/issues/279#issuecomment-2525082736","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/279","id":2525082736,"node_id":"IC_kwDOAAJ06c6WgbRw","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-07T11:45:10Z","updated_at":"2024-12-07T11:45:10Z","author_association":"CONTRIBUTOR","body":"`AbstractAppendingInt64Buffer` has a public iterator that could be converted.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2525082736/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2525228669","html_url":"https://github.com/apache/lucenenet/issues/1062#issuecomment-2525228669","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1062","id":2525228669,"node_id":"IC_kwDOAAJ06c6Wg-59","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-07T16:10:10Z","updated_at":"2024-12-07T16:10:10Z","author_association":"CONTRIBUTOR","body":"After running some benchmarks, there is a slight performance and allocation hit for using lambdas over \"AnonymousClasses\" that implement a functional interface, when the lambda captures, and when this is done one-shot and not many times. There is basically no difference if they do not capture, or when done many times.\r\n\r\nThe one-shot performance impact is worse if the lambda captures a variable instead of a field, so the impact can be mitigated by storing it in a field (or wrapping it in your own equivalent of an \"anonymous class\") if this is a concern. It also allocates slightly more bytes.\r\n\r\nI could go either way on this. The performance difference basically disappears at high enough usage, and I'd imagine Dynamic PGO would help this further. I don't know if 9 nanoseconds and 64 bytes for a one-shot call is enough to warrant harming the UX by making you create a custom class instead of passing a lambda to these APIs. I'm leaning towards still wanting this UX improvement.\r\n\r\nMicrosoft, if you're listening, please improve the performance and reduce the allocation of lambdas so that this is not a concern 😄 \r\n\r\n1 iteration:\r\n```\r\n| Method                                 | Iterations | Mean        | Error     | StdDev    | Gen0   | Allocated |\r\n|--------------------------------------- |----------- |------------:|----------:|----------:|-------:|----------:|\r\n| PredicateLambdaNoCapture               | 1          |   0.9096 ns | 0.0011 ns | 0.0009 ns |      - |         - |\r\n| PredicateLambdaCaptureVariable         | 1          | 238.5972 ns | 0.2876 ns | 0.2550 ns | 0.0253 |     160 B |\r\n| PredicateLambdaCaptureField            | 1          |   9.0264 ns | 0.0139 ns | 0.0123 ns | 0.0102 |      64 B |\r\n| PredicateAnonymousClassNoCapture       | 1          |   0.0000 ns | 0.0000 ns | 0.0000 ns |      - |         - |\r\n| PredicateAnonymousClassCaptureVariable | 1          | 229.3647 ns | 0.1341 ns | 0.1047 ns | 0.0153 |      96 B |\r\n| PredicateAnonymousClassCaptureField    | 1          |   2.6220 ns | 0.0054 ns | 0.0050 ns | 0.0038 |      24 B |\r\n```\r\n\r\n100k iterations:\r\n```\r\n| Method                                 | Iterations | Mean     | Error    | StdDev   | Allocated |\r\n|--------------------------------------- |----------- |---------:|---------:|---------:|----------:|\r\n| PredicateLambdaNoCapture               | 100000     | 31.36 us | 0.030 us | 0.027 us |         - |\r\n| PredicateLambdaCaptureVariable         | 100000     | 63.06 us | 0.046 us | 0.043 us |     160 B |\r\n| PredicateLambdaCaptureField            | 100000     | 62.70 us | 0.034 us | 0.032 us |      64 B |\r\n| PredicateAnonymousClassNoCapture       | 100000     | 31.33 us | 0.015 us | 0.012 us |         - |\r\n| PredicateAnonymousClassCaptureVariable | 100000     | 63.03 us | 0.041 us | 0.036 us |      96 B |\r\n| PredicateAnonymousClassCaptureField    | 100000     | 62.89 us | 0.348 us | 0.308 us |      24 B |\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2525228669/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2525247120","html_url":"https://github.com/apache/lucenenet/issues/1062#issuecomment-2525247120","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1062","id":2525247120,"node_id":"IC_kwDOAAJ06c6WhDaQ","user":{"login":"Shazwazza","id":1742685,"node_id":"MDQ6VXNlcjE3NDI2ODU=","avatar_url":"https://avatars.githubusercontent.com/u/1742685?v=4","gravatar_id":"","url":"https://api.github.com/users/Shazwazza","html_url":"https://github.com/Shazwazza","followers_url":"https://api.github.com/users/Shazwazza/followers","following_url":"https://api.github.com/users/Shazwazza/following{/other_user}","gists_url":"https://api.github.com/users/Shazwazza/gists{/gist_id}","starred_url":"https://api.github.com/users/Shazwazza/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Shazwazza/subscriptions","organizations_url":"https://api.github.com/users/Shazwazza/orgs","repos_url":"https://api.github.com/users/Shazwazza/repos","events_url":"https://api.github.com/users/Shazwazza/events{/privacy}","received_events_url":"https://api.github.com/users/Shazwazza/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-07T17:04:54Z","updated_at":"2024-12-07T17:04:54Z","author_association":"CONTRIBUTOR","body":"Non static lambdas are just object instances and will allocate. NET does\r\ntry to optimize this in many cases such as ConcurrentDictionary overloads\r\nlike GetOrAdd allowing passing parameters in to the value builder to be\r\nused in the lambda as a parameters instead of a capture/closure.\r\n\r\nAnytime you can declare a lambda as static you absolutely should. This\r\nprevents allocations but means it cannot be a closure. See\r\nhttps://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/static-anonymous-functions\r\n\r\nOn Sat, Dec 7, 2024, 9:10 a.m. Paul Irwin ***@***.***> wrote:\r\n\r\n> After running some benchmarks, there is a slight performance and\r\n> allocation hit for using lambdas over \"AnonymousClasses\" that implement a\r\n> functional interface, when the lambda captures, and when this is done\r\n> one-shot and not many times. There is basically no difference if they do\r\n> not capture, or when done many times.\r\n>\r\n> The one-shot performance impact is worse if the lambda captures a variable\r\n> instead of a field, so the impact can be mitigated by storing it in a field\r\n> (or wrapping it in your own equivalent of an \"anonymous class\") if this is\r\n> a concern. It also allocates slightly more bytes.\r\n>\r\n> I could go either way on this. The performance difference basically\r\n> disappears at high enough usage, and I'd imagine Dynamic PGO would help\r\n> this further. I don't know if 9 nanoseconds and 64 bytes for a one-shot\r\n> call is enough to warrant harming the UX by making you create a custom\r\n> class instead of passing a lambda to these APIs. I'm leaning towards still\r\n> wanting this UX improvement.\r\n>\r\n> Microsoft, if you're listening, please improve the performance and reduce\r\n> the allocation of lambdas so that this is not a concern 😄\r\n>\r\n> 1 iteration:\r\n>\r\n> | Method                                 | Iterations | Mean        | Error     | StdDev    | Gen0   | Allocated |\r\n> |--------------------------------------- |----------- |------------:|----------:|----------:|-------:|----------:|\r\n> | PredicateLambdaNoCapture               | 1          |   0.9096 ns | 0.0011 ns | 0.0009 ns |      - |         - |\r\n> | PredicateLambdaCaptureVariable         | 1          | 238.5972 ns | 0.2876 ns | 0.2550 ns | 0.0253 |     160 B |\r\n> | PredicateLambdaCaptureField            | 1          |   9.0264 ns | 0.0139 ns | 0.0123 ns | 0.0102 |      64 B |\r\n> | PredicateAnonymousClassNoCapture       | 1          |   0.0000 ns | 0.0000 ns | 0.0000 ns |      - |         - |\r\n> | PredicateAnonymousClassCaptureVariable | 1          | 229.3647 ns | 0.1341 ns | 0.1047 ns | 0.0153 |      96 B |\r\n> | PredicateAnonymousClassCaptureField    | 1          |   2.6220 ns | 0.0054 ns | 0.0050 ns | 0.0038 |      24 B |\r\n>\r\n> 100k iterations:\r\n>\r\n> | Method                                 | Iterations | Mean     | Error    | StdDev   | Allocated |\r\n> |--------------------------------------- |----------- |---------:|---------:|---------:|----------:|\r\n> | PredicateLambdaNoCapture               | 100000     | 31.36 us | 0.030 us | 0.027 us |         - |\r\n> | PredicateLambdaCaptureVariable         | 100000     | 63.06 us | 0.046 us | 0.043 us |     160 B |\r\n> | PredicateLambdaCaptureField            | 100000     | 62.70 us | 0.034 us | 0.032 us |      64 B |\r\n> | PredicateAnonymousClassNoCapture       | 100000     | 31.33 us | 0.015 us | 0.012 us |         - |\r\n> | PredicateAnonymousClassCaptureVariable | 100000     | 63.03 us | 0.041 us | 0.036 us |      96 B |\r\n> | PredicateAnonymousClassCaptureField    | 100000     | 62.89 us | 0.348 us | 0.308 us |      24 B |\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/apache/lucenenet/issues/1062#issuecomment-2525228669>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AANJOXLZSPM6SPITEDTKYWD2EMMX3AVCNFSM6AAAAABTFCDAWWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDKMRVGIZDQNRWHE>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2525247120/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2525267423","html_url":"https://github.com/apache/lucenenet/issues/1062#issuecomment-2525267423","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1062","id":2525267423,"node_id":"IC_kwDOAAJ06c6WhIXf","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-07T18:17:25Z","updated_at":"2024-12-07T18:21:20Z","author_association":"CONTRIBUTOR","body":"@Shazwazza Thanks, I made the no-capture lambda case static and it was the same result, so I'm guessing .NET was already optimizing it that way. The others I can't make static because they capture, like you said. It would be nice if .NET somehow could optimize a non-static lambda to not be more costly than an object that implements a functional interface...\r\n\r\nInspired by your comment about overloads, perhaps we could add overloads that take a delegate but then store it in a lucenenet-specific implementation of the interface that just calls the delegate, so that the underlying stored reference is the functional interface type instead of a delegate. This would probably be the best of both worlds: allow for ease of use in the API by passing a lambda if you're not concerned about a few ns/op or some extra bytes allocated, but allow for passing an object that implements the interface for more performance-critical scenarios. I'll experiment with this approach and see how it feels. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2525267423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526192125","html_url":"https://github.com/apache/lucenenet/issues/1063#issuecomment-2526192125","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1063","id":2526192125,"node_id":"IC_kwDOAAJ06c6WkqH9","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-08T15:53:10Z","updated_at":"2024-12-08T15:53:10Z","author_association":"CONTRIBUTOR","body":"I reviewed the AtomicInt64 code and it nicely wraps the Interlocked operations. I think we should use that. Given the amount of places listed above where we have to make this change, I think that would be a better option than having to remember to use Interlocked everywhere.\r\n\r\nLikewise, I think it would make sense to create an AtomicDouble in J2N like you mention.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526192125/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526279415","html_url":"https://github.com/apache/lucenenet/issues/1063#issuecomment-2526279415","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1063","id":2526279415,"node_id":"IC_kwDOAAJ06c6Wk_b3","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-08T17:42:53Z","updated_at":"2024-12-08T17:42:53Z","author_association":"CONTRIBUTOR","body":"Is it possible to make AtomicInt64 (and AtomicDouble) a struct instead of a class? (Or maybe introduce a new ValueAtomicInt64 if you don't want that breaking change?) That would help avoid another allocation. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526279415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526300931","html_url":"https://github.com/apache/lucenenet/issues/1063#issuecomment-2526300931","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1063","id":2526300931,"node_id":"IC_kwDOAAJ06c6WlEsD","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-08T18:19:11Z","updated_at":"2024-12-08T18:19:11Z","author_association":"CONTRIBUTOR","body":"Actually, no, that would not work. `Interlocked` operations require a stable memory location to work on unless we use unsafe code or pinning, which introduces complexity and potential risks.\r\n\r\nPer ChatGPT:\r\n\r\n## Structs and Atomic Operations\r\nIf you make your type a struct, using `Interlocked` to manipulate its internal `Value` field directly would not work as intended for the following reasons:\r\n\r\n1. Copy Semantics:\r\n\r\n    - Structs are value types, so when you access or modify them, you typically operate on a **copy**. This would break thread safety and atomicity because each thread could be working with independent copies of the struct.\r\n2. Interlocked Requires References:\r\n\r\n    - The `Interlocked` class operates on references to shared memory locations. For example, `Interlocked.Exchange` and `Interlocked.CompareExchange` require a `ref` to the field being modified. Structs cannot provide such a reference to a field within themselves.\r\n3. Struct Field Pinning:\r\n\r\n    - Even with unsafe code, it is challenging to guarantee safe and correct atomic operations on a field of a struct because the struct might be moved or copied by the runtime, breaking assumptions about its memory location.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526300931/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526316653","html_url":"https://github.com/apache/lucenenet/issues/1063#issuecomment-2526316653","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1063","id":2526316653,"node_id":"IC_kwDOAAJ06c6WlIht","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-08T18:38:04Z","updated_at":"2024-12-08T18:38:04Z","author_association":"CONTRIBUTOR","body":"However, if we don't want to introduce these new allocations, we can create properties to wrap the `Interlocked` and `BitConversion` calls, which would put them neatly in one place in the class they are declared in.\r\n\r\n```c#\r\npublic class IndexWriter\r\n{\r\n    // LUCENENET: Converted changeCount field to a property to make it interlocked (and volatile)\r\n    private long threadUnsafeChangeCount; // increments every time a change is completed\r\n    private long changeCount\r\n    {\r\n        get => Interlocked.Read(ref this.threadUnsafeChangeCount);\r\n        set => Interlocked.Exchange(ref this.threadUnsafeChangeCount, value);\r\n    }\r\n}\r\n```\r\n\r\nThen the rest of the code wouldn't need to change to read or write to the \"field\" (which is now a property).\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526316653/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526319231","html_url":"https://github.com/apache/lucenenet/issues/1063#issuecomment-2526319231","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1063","id":2526319231,"node_id":"IC_kwDOAAJ06c6WlJJ_","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-08T18:42:43Z","updated_at":"2024-12-08T18:42:43Z","author_association":"CONTRIBUTOR","body":"Unfortunately, that isn't a complete solution. For example, we wouldn't be able to do `changeCount++` in a thread safe way. We would have to call `Interlocked` in other places in the code outside of the property.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526319231/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526563445","html_url":"https://github.com/apache/lucenenet/issues/1063#issuecomment-2526563445","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1063","id":2526563445,"node_id":"IC_kwDOAAJ06c6WmEx1","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-09T00:52:38Z","updated_at":"2024-12-09T00:52:38Z","author_association":"CONTRIBUTOR","body":"> Actually, no, that would not work. `Interlocked` operations require a stable memory location to work on unless we use unsafe code or pinning, which introduces complexity and potential risks.\r\n> \r\n> Per ChatGPT:\r\n> ## Structs and Atomic Operations\r\n> \r\n> If you make your type a struct, using `Interlocked` to manipulate its internal `Value` field directly would not work as intended for the following reasons:\r\n> \r\n>     1. Copy Semantics:\r\n>        \r\n>        * Structs are value types, so when you access or modify them, you typically operate on a **copy**. This would break thread safety and atomicity because each thread could be working with independent copies of the struct.\r\n> \r\n>     2. Interlocked Requires References:\r\n>        \r\n>        * The `Interlocked` class operates on references to shared memory locations. For example, `Interlocked.Exchange` and `Interlocked.CompareExchange` require a `ref` to the field being modified. Structs cannot provide such a reference to a field within themselves.\r\n> \r\n>     3. Struct Field Pinning:\r\n>        \r\n>        * Even with unsafe code, it is challenging to guarantee safe and correct atomic operations on a field of a struct because the struct might be moved or copied by the runtime, breaking assumptions about its memory location.\r\n\r\nChatGPT is hallucinating a bit here, as it did for me before I asked the question. GPT-4o said to me that structs' values are copied atomically (wrong) and that you can solve the problem of atomically accessing a long by making the long field `volatile` (wrong again). 🙄 \r\n\r\nYou absolutely can use struct fields as `ref` arguments to Interlocked; I just confirmed this with a test. And a struct is even more stable of a memory location than a value in a class on the heap. It's closer to the original `long` field in terms of memory location. No pinning or unsafe code required.\r\n\r\nThe only thing we'd have to be careful about is to not pass the struct by value which would non-atomically copy the long field, but given that it's a field already we should be fine here (just need to not have any methods in the class that take a `ValueAtomicInt64` and pass the field to it unless if with `ref`, for example). We'd also have to look out for any naïve clones and ensure that we're properly atomically retrieving the long value and setting a new atomic struct value in the new clone. But this would allow us to not add extra allocations for this case.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2526563445/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2537777391","html_url":"https://github.com/apache/lucenenet/issues/1063#issuecomment-2537777391","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1063","id":2537777391,"node_id":"IC_kwDOAAJ06c6XQ2jv","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-12T04:16:35Z","updated_at":"2024-12-12T04:16:35Z","author_association":"CONTRIBUTOR","body":"I prototyped a ValueAtomicInt64 and it worked, but it was too difficult to prevent accidental copying, especially when exposed outside the type like in MergePolicy.OneMerge. So I think our best bet is going to be to stick with AtomicInt64 for now. I'm also creating an AtomicDouble class to wrap those bit-converting operations to/from long.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2537777391/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2537788219","html_url":"https://github.com/apache/lucenenet/issues/1063#issuecomment-2537788219","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1063","id":2537788219,"node_id":"IC_kwDOAAJ06c6XQ5M7","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-12T04:27:45Z","updated_at":"2024-12-12T04:27:45Z","author_association":"CONTRIBUTOR","body":"FYI, the ControlledRealTimeReopenThread fields are already synchronized with UninterruptibleMonitor (or one case outside of that with Interlocked), so those should not need AtomicInt64. I'll note that in a comment, though.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2537788219/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2539305263","html_url":"https://github.com/apache/lucenenet/issues/1063#issuecomment-2539305263","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1063","id":2539305263,"node_id":"IC_kwDOAAJ06c6XWrkv","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-12T15:35:46Z","updated_at":"2024-12-12T15:35:46Z","author_association":"CONTRIBUTOR","body":"> I prototyped a ValueAtomicInt64 and it worked, but it was too difficult to prevent accidental copying, especially when exposed outside the type like in MergePolicy.OneMerge. So I think our best bet is going to be to stick with AtomicInt64 for now. I'm also creating an AtomicDouble class to wrap those bit-converting operations to/from long.\r\n\r\nFor `MergePolicy.OneMerge`, only the getter of the `EstimatedMergeBytes` property is public, so we can just return `estimatedMergeBytes.Value`.\r\n\r\n`totalMergeBytes` has only 3 callers and only 1 of them writes (in `IndexWriter`). Given that it is adding in a loop, we should call the `OneMerge.totalMergeBytes.AddAndGet(info.GetSizeInBytes())` method. The readers can just use `OneMerge.totalMergeBytes.Value`.\r\n\r\nWe just need to leave some comments to explain why this changed from upstream (because we are lacking volatile for 64-bit). But this should be okay because we don't have a lot of callers and most of it is internal, anyway.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2539305263/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2540597340","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2540597340","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2540597340,"node_id":"IC_kwDOAAJ06c6XbnBc","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-13T05:42:34Z","updated_at":"2024-12-13T05:42:34Z","author_association":"CONTRIBUTOR","body":"I spent some time looking at this, and playing around with the APIs in both Lucene and Lucene.NET beta 17, and I've got a pretty good grasp on it now.\r\n\r\nThe problem boils down to not as much that the Lucene Java code uses wildcard generics, but that we're trying to force a _reified_ generics design on this API, when in Java the generics are type-erased. The generic methods where only the generic type parameter is used in the return type lets the caller pretend like it's any type they want, but it will fail unless it's the exact type that is hydrated at runtime. For example, Lucene/Java happily let you write unintelligible code like the following:\r\n\r\n```java\r\nTopGroups<System> topGroups = groupingSearch.search(searcher, query, 0, topNGroups);\r\n```\r\n\r\n(Yes, that System.) Since these types are erased, there's nothing telling `groupingSearch.search` what type to make (or expect to try to make) the group values. If the API took a `Class<T>` parameter, that would allow us to match it with .NET reified generics, but since it doesn't, our generics really can only just help ensure we don't have to cast everywhere to use the API as they're just doing the casting internally. i.e. if you try to pass `string` where it internally expects it to be a `BytesRef` it will fail, but that's not really different from what would happen in Lucene. It very easily could just be a non-generic API if we wanted to do that, where the group value would be of type `object`, but I think @NightOwl888's plan above is going to work. \r\n\r\nI've got the GroupingSearch class broken down into those three classes with a common abstract base class. The only failing test I'm chasing down now is that the Function tests are failing to cast from MutableValue to MutableValueStr (or Int32), so I have to figure out a solution to that.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2540597340/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2541718537","html_url":"https://github.com/apache/lucenenet/pull/1056#issuecomment-2541718537","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1056","id":2541718537,"node_id":"IC_kwDOAAJ06c6Xf4wJ","user":{"login":"eladmarg","id":3823205,"node_id":"MDQ6VXNlcjM4MjMyMDU=","avatar_url":"https://avatars.githubusercontent.com/u/3823205?v=4","gravatar_id":"","url":"https://api.github.com/users/eladmarg","html_url":"https://github.com/eladmarg","followers_url":"https://api.github.com/users/eladmarg/followers","following_url":"https://api.github.com/users/eladmarg/following{/other_user}","gists_url":"https://api.github.com/users/eladmarg/gists{/gist_id}","starred_url":"https://api.github.com/users/eladmarg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eladmarg/subscriptions","organizations_url":"https://api.github.com/users/eladmarg/orgs","repos_url":"https://api.github.com/users/eladmarg/repos","events_url":"https://api.github.com/users/eladmarg/events{/privacy}","received_events_url":"https://api.github.com/users/eladmarg/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-13T15:36:53Z","updated_at":"2024-12-13T15:38:28Z","author_association":"CONTRIBUTOR","body":"there is a big performance penalty for using this inside try/catch block.\r\nits much better to use this with TryParse and avoid this block for so hot-path function.\r\n\r\nok, i see it fixed. great","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2541718537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2541799469","html_url":"https://github.com/apache/lucenenet/pull/1056#issuecomment-2541799469","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1056","id":2541799469,"node_id":"IC_kwDOAAJ06c6XgMgt","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-13T16:20:29Z","updated_at":"2024-12-13T16:20:29Z","author_association":"CONTRIBUTOR","body":"> there is a big performance penalty for using this inside try/catch block. its much better to use this with TryParse and avoid this block for so hot-path function.\r\n> \r\n> ok, i see it fixed. great\r\n\r\nSorry, what are you referring to?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2541799469/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2541840394","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2541840394","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2541840394,"node_id":"IC_kwDOAAJ06c6XgWgK","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-13T16:43:25Z","updated_at":"2024-12-13T16:43:25Z","author_association":"CONTRIBUTOR","body":"> I've got the GroupingSearch class broken down into those three classes with a common abstract base class. The only failing test I'm chasing down now is that the Function tests are failing to cast from MutableValue to MutableValueStr (or Int32), so I have to figure out a solution to that.\r\n\r\nIt sounds like we probably need a `TGroupSearch` generic type parameter added to the `FunctionGroupingSearch` class and possibly elsewhere with a constraint that it must subclass `MutableValue`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2541840394/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543388273","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543388273","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543388273,"node_id":"IC_kwDOAAJ06c6XmQZx","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T00:25:49Z","updated_at":"2024-12-15T00:25:49Z","author_association":"CONTRIBUTOR","body":"An update: I have the GroupingSearch class split out, and many of the interfaces and covariance removed, I just have one failing unit test that I am having difficulty tracking down. You can track my progress at my branch: https://github.com/paulirwin/lucene.net/tree/issue/1059 - or I welcome if anyone can pull that down and see what the problem is.\r\n\r\nThe tests are a bit wonky as I have to create types that use `object` as the generic type parameter to mimic the previous covariance, since the tests randomly create either Term or Function versions based on a random boolean. Having an object-based wrapper class helps me get around needing covariance. The types BytesRef and MutableValue are already reference types, so converting them to object just for the tests is not a problem, it's just mildly annoying to have to cast them back out when needed.\r\n\r\nThe GroupingSearch class now has three helper factory methods, but you also could use the split-out classes directly if you wanted to. I'll add XML doc comments before I publish the PR, for now I'm focused on getting it working.\r\n\r\nOnce I get the failing test working, I'll finish removing the interfaces, then focus on converting IEnumerable back to ICollection and the other items on the list. ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543388273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543443244","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543443244","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543443244,"node_id":"IC_kwDOAAJ06c6Xmd0s","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T04:28:04Z","updated_at":"2024-12-15T04:28:25Z","author_association":"CONTRIBUTOR","body":"Re: \"Restore generic collections where we are currently using ICollection and IDictionary\", ICollection is no longer there, but IDictionary still is, because that requires Lucene.Net.Queries.Function.ValueSource to have a generic dictionary context argument to GetValues, and that would be a much larger change. I think that can be broken out as its own issue/PR as this is big enough as it is, and this being non-generic only affects the Function types, so the scope is pretty limited. \r\n\r\nI think we can safely replace IDictionary with `IDictionary<object, object>` in that case. Still loosely typed to object, but we kinda have to because it's designed to just be a form of a cache that is passed around. Some implementations (like ScaleFloatFunction) use non-string keys as well, so it's not safe to make it `IDictionary<string, object>`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543443244/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543445088","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543445088","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543445088,"node_id":"IC_kwDOAAJ06c6XmeRg","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T04:37:17Z","updated_at":"2024-12-15T04:37:17Z","author_association":"CONTRIBUTOR","body":"Also note that I had to add an extra `TGroupValue` generic type parameter to AbstractDistinctValuesCollector due to removing the interfaces/covariance. The signature is now:\r\n\r\n```c#\r\npublic abstract class AbstractDistinctValuesCollector<GC, TGroupValue> : ICollector\r\n    where GC : AbstractDistinctValuesCollector.GroupCount<TGroupValue>\r\n```\r\n\r\n(Note that I haven't yet looked at the Collector changes, still using ICollector for now.)\r\n\r\nThis is required because we can't make abstract types covariant, and the Function implementation uses MutableValue while Term uses BytesRef, and if you try to do something like `where GC : AbstractDistinctValuesCollector.GroupCount<object>`, that doesn't work because of the covariance issue. The only alternative is to add back the IGroupCount interface... I could go either way on that.\r\n\r\nSince most people will probably be using the Function or Term implementations and not creating their own, this likely won't affect much of anyone except for those that are needing to create their own grouping search classes.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543445088/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543445154","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543445154","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543445154,"node_id":"IC_kwDOAAJ06c6XmeSi","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T04:37:38Z","updated_at":"2024-12-15T04:37:38Z","author_association":"CONTRIBUTOR","body":"> An update: I have the GroupingSearch class split out, and many of the interfaces and covariance removed, I just have one failing unit test that I am having difficulty tracking down. You can track my progress at my branch: https://github.com/paulirwin/lucene.net/tree/issue/1059 - or I welcome if anyone can pull that down and see what the problem is.\r\n> \r\n> The tests are a bit wonky as I have to create types that use `object` as the generic type parameter to mimic the previous covariance, since the tests randomly create either Term or Function versions based on a random boolean. Having an object-based wrapper class helps me get around needing covariance. The types BytesRef and MutableValue are already reference types, so converting them to object just for the tests is not a problem, it's just mildly annoying to have to cast them back out when needed.\r\n> \r\n> The GroupingSearch class now has three helper factory methods, but you also could use the split-out classes directly if you wanted to. I'll add XML doc comments before I publish the PR, for now I'm focused on getting it working.\r\n> \r\n> Once I get the failing test working, I'll finish removing the interfaces, then focus on converting IEnumerable back to ICollection and the other items on the list.\r\n\r\n\r\n\r\nI took a look and this seems to be a common problem that we have had when porting generic types from Java. C# sees `FirstPassGroupingCollector<BytesRef>` and `FirstPassGroupingCollector<MutableValue>` as 2 distinct types, but in Java both types can be stored in a variable of type `FirstPassGroupingCollector<?>`. The solution we commonly use is to create a non-generic abstraction for `FirstPassGroupingCollector` that the generic type implements/subclasses.\r\n\r\n```c#\r\npublic abstract class FirstPassGroupingCollector<T> : FirstPassGroupingCollector\r\n{\r\n    // implementation\r\n}\r\n\r\npublic abstract class FirstPassGroupingCollector // Note this could be an interface or an abstract class\r\n     : ICollector\r\n{\r\n    private protected FirstPassGroupingCollector() {} // Only allow internal use\r\n\r\n    // implementation\r\n}\r\n```\r\n\r\nThis would allow the type to be referenced without being aware of its generic type.\r\n\r\n```c#\r\n        private AbstractFirstPassGroupingCollector CreateFirstPassCollector<T>(string groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector)\r\n        {\r\n            // LUCENENET specific - we need to look for our wrapper types\r\n            if (typeof(ObjectFirstPassGroupingCollector<BytesRef>).IsAssignableFrom(firstPassGroupingCollector.GetType()))\r\n            {\r\n                ValueSource vs = new BytesRefFieldSource(groupField);\r\n                return new FunctionFirstPassGroupingCollector<MutableValue>(vs, new Hashtable(), groupSort, topDocs);\r\n            }\r\n            else if (typeof(ObjectFirstPassGroupingCollector<MutableValue>).IsAssignableFrom(firstPassGroupingCollector.GetType()))\r\n            {\r\n                return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\r\n            }\r\n\r\n            fail();\r\n            return null;\r\n        }\r\n```\r\n\r\nIf you think about it, since we are having trouble testing it this way, it is very likely that users will need to be able to store these distinct types in a common variable type (after all, Java allows this), so making this a first class feature rather than a test mock is necessary.\r\n\r\nThis would eliminate the need to create an object wrapper type. There may still be the need to cast somewhere, but there may be ways to mitigate that cast (perhaps by calling a method or property on a class that already is aware of the generic type and can handle the cast internally).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543445154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543446056","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543446056","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543446056,"node_id":"IC_kwDOAAJ06c6Xmego","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T04:42:56Z","updated_at":"2024-12-15T04:42:56Z","author_association":"CONTRIBUTOR","body":"> Re: \"Restore generic collections where we are currently using ICollection and IDictionary\", ICollection is no longer there, but IDictionary still is, because that requires Lucene.Net.Queries.Function.ValueSource to have a generic dictionary context argument to GetValues, and that would be a much larger change. I think that can be broken out as its own issue/PR as this is big enough as it is, and this being non-generic only affects the Function types, so the scope is pretty limited.\r\n> \r\n> I think we can safely replace IDictionary with `IDictionary<object, object>` in that case. Still loosely typed to object, but we kinda have to because it's designed to just be a form of a cache that is passed around. Some implementations (like ScaleFloatFunction) use non-string keys as well, so it's not safe to make it `IDictionary<string, object>`.\r\n\r\nWould it make sense to add the closing types of `IDictionary<TKey, TValue>` to the classes that wrap them? It looks like we could cascade that down from `AbstractGroupingSearch<T, TKey, TValue>` down to the others like `AbstractFirstPassGroupingCollector<T, TKey, TValue>`, etc.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543446056/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543446402","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543446402","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543446402,"node_id":"IC_kwDOAAJ06c6XmemC","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T04:45:11Z","updated_at":"2024-12-15T04:45:11Z","author_association":"CONTRIBUTOR","body":"> > Re: \"Restore generic collections where we are currently using ICollection and IDictionary\", ICollection is no longer there, but IDictionary still is, because that requires Lucene.Net.Queries.Function.ValueSource to have a generic dictionary context argument to GetValues, and that would be a much larger change. I think that can be broken out as its own issue/PR as this is big enough as it is, and this being non-generic only affects the Function types, so the scope is pretty limited.\r\n> > I think we can safely replace IDictionary with `IDictionary<object, object>` in that case. Still loosely typed to object, but we kinda have to because it's designed to just be a form of a cache that is passed around. Some implementations (like ScaleFloatFunction) use non-string keys as well, so it's not safe to make it `IDictionary<string, object>`.\r\n> \r\n> Would it make sense to add the closing types of `IDictionary<TKey, TValue>` to the classes that wrap them? It looks like we could cascade that down from `AbstractGroupingSearch<T, TKey, TValue>` down to the others like `AbstractFirstPassGroupingCollector<T, TKey, TValue>`, etc.\r\n\r\nWait, it looks like that is only for `FunctionGroupingSearch`, so maybe `FunctionGroupingSearch<T, TKey, TValue>`? Of course, we should have generic type names than this.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543446402/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543446756","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543446756","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543446756,"node_id":"IC_kwDOAAJ06c6Xmerk","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T04:47:16Z","updated_at":"2024-12-15T04:47:16Z","author_association":"CONTRIBUTOR","body":"> If you think about it, since we are having trouble testing it this way, it is very likely that users will need to be able to store these distinct types in a common variable type (after all, Java allows this), so making this a first class feature rather than a test mock is necessary.\r\n\r\nI'm not so sure it's necessary, this is only a problem with using the low-level Abstract*Collector types. I don't think many people are going to be using those low-level types (instead using the types in the GroupingSearch file), and those that are further still are probably not going to need to be switching between them in the same variable like the test does, and further still if they really need to do that, they can do a workaround like we're doing here.\r\n\r\nWhat I don't want to have to do is expose object-based properties that are shadowed in the generic classes (or worse, i.e. `ICollection<object> Groups`  for a non-generic AbstractAllGroupsCollector base class). That seems like a cure that is worse than the disease, and I don't even know if it's feasible.\r\n\r\n> Would it make sense to add the closing types of IDictionary<TKey, TValue> to the classes that wrap them? It looks like we could cascade that down from AbstractGroupingSearch<T, TKey, TValue> down to the others like AbstractFirstPassGroupingCollector<T, TKey, TValue>, etc.\r\n\r\nNo, because ValueSource implementations treat it as `IDictionary<object, object>`. Different implementations use different types for the keys and values. Object is the only common type. We also don't know which particular ValueSource implementations will be used, so that's pretty much impossible. This dictionary is truly just a bag of key/value pairs, strongly typing it would not help anything and would require a significant deviation from upstream.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543446756/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543447274","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543447274","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543447274,"node_id":"IC_kwDOAAJ06c6Xmezq","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T04:50:34Z","updated_at":"2024-12-15T04:50:34Z","author_association":"CONTRIBUTOR","body":"Also note that a value source might even store/retrieve different key and value types in the context within the same method.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543447274/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543455901","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543455901","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543455901,"node_id":"IC_kwDOAAJ06c6Xmg6d","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T05:33:13Z","updated_at":"2024-12-15T05:33:13Z","author_association":"CONTRIBUTOR","body":"> > If you think about it, since we are having trouble testing it this way, it is very likely that users will need to be able to store these distinct types in a common variable type (after all, Java allows this), so making this a first class feature rather than a test mock is necessary.\r\n> \r\n> I'm not so sure it's necessary, this is only a problem with using the low-level Abstract*Collector types. I don't think many people are going to be using those low-level types (instead using the types in the GroupingSearch file), and those that are further still are probably not going to need to be switching between them in the same variable like the test does, and further still if they really need to do that, they can do a workaround like we're doing here.\r\n> \r\n> What I don't want to have to do is expose object-based properties that are shadowed in the generic classes (or worse, i.e. `ICollection<object> Groups` for a non-generic AbstractAllGroupsCollector base class). That seems like a cure that is worse than the disease, and I don't even know if it's feasible.\r\n> \r\n\r\nBut it is how we do it elsewhere (for example, in [FieldComparer](https://github.com/apache/lucenenet/blob/master/src/Lucene.Net/Search/FieldComparator.cs#L252)). Having the ability to store a collection of `AbstractXXXCollector<T>` without knowing the generic closing type is a useful thing to have. Furthermore, it is supported by Java, so there may be examples on blogs and elsewhere that are doing it that way.\r\n\r\nThat said, there doesn't seem to be a use case where it makes sense to do this for `AbstractAllGroupsCollector`. It looks like you neatly solved access to the `GroupCount` field using `IGroupCountCollector`, but the tests don't access the `Groups` property so there is no need to find a solution to cast it AFAICT. \r\n\r\n> > Would it make sense to add the closing types of IDictionary<TKey, TValue> to the classes that wrap them? It looks like we could cascade that down from AbstractGroupingSearch<T, TKey, TValue> down to the others like AbstractFirstPassGroupingCollector<T, TKey, TValue>, etc.\r\n> \r\n> No, because ValueSource implementations treat it as `IDictionary<object, object>`. Different implementations use different types for the keys and values. Object is the only common type. We also don't know which particular ValueSource implementations will be used, so that's pretty much impossible. This dictionary is truly just a bag of key/value pairs, strongly typing it would not help anything and would require a significant deviation from upstream.\r\n\r\nGotcha.\r\n\r\nPerhaps we are better off sticking with `IDictionary`, then. This allows the user to either use `IDictionary<object, object>` or have it strongly typed without having to do some weird cast or conversion to pass it in.\r\n\r\nNeed to think about this some more.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543455901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543921018","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543921018","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543921018,"node_id":"IC_kwDOAAJ06c6XoSd6","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T15:39:29Z","updated_at":"2024-12-15T15:39:29Z","author_association":"CONTRIBUTOR","body":"> It looks like you neatly solved access to the GroupCount field using IGroupCountCollector, but the tests don't access the Groups property so there is no need to find a solution to cast it AFAICT.\r\n\r\nI actually already removed that in lieu of having this do the same approach as the other collectors in the tests, so that we're not adding an unnecessary interface just for testing purposes. It's unlikely that someone would need just the group counts in the real world without also accessing the groups, so I figured it would be best to not pollute the public API with that interface when it was only used (read: not needed, just used as one approach) for test purposes.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543921018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543926321","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543926321","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543926321,"node_id":"IC_kwDOAAJ06c6XoTwx","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T15:54:24Z","updated_at":"2024-12-15T15:54:24Z","author_association":"CONTRIBUTOR","body":"I just had an idea, based on that last comment, if you're open to it. We could create non-generic interfaces (not abstract classes) that do not expose collections, but give you APIs to retrieve items. By using an interface instead of an abstract class, we wouldn't be forced to convert to/from object except for in the explicitly implemented methods. It also would not change the type hierarchy. For example:\r\n\r\n```c#\r\npublic interface IAllGroupsCollector : ICollector // NOTE: we'd need to keep this interface\r\n{\r\n    int GroupCount { get; }\r\n    object GetGroup(int index);\r\n}\r\n```\r\n\r\nWe would then explicitly implement the interface for the GetGroup method. I think that would be cleaner than exposing a non-generic ICollection, although I could be swayed on explicitly implementing that too. Thoughts?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543926321/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543953460","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543953460","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543953460,"node_id":"IC_kwDOAAJ06c6XoaY0","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T17:12:56Z","updated_at":"2024-12-15T17:12:56Z","author_association":"CONTRIBUTOR","body":"> > It looks like you neatly solved access to the GroupCount field using IGroupCountCollector, but the tests don't access the Groups property so there is no need to find a solution to cast it AFAICT.\r\n> \r\n> I actually already removed that in lieu of having this do the same approach as the other collectors in the tests, so that we're not adding an unnecessary interface just for testing purposes. It's unlikely that someone would need just the group counts in the real world without also accessing the groups, so I figured it would be best to not pollute the public API with that interface when it was only used (read: not needed, just used as one approach) for test purposes.\r\n\r\n-----------------\r\n\r\n> I just had an idea, based on that last comment, if you're open to it. We could create non-generic interfaces (not abstract classes) that do not expose collections, but give you APIs to retrieve items. By using an interface instead of an abstract class, we wouldn't be forced to convert to/from object except for in the explicitly implemented methods. It also would not change the type hierarchy. For example:\r\n> \r\n> ```cs\r\n> public interface IAllGroupsCollector : ICollector // NOTE: we'd need to keep this interface\r\n> {\r\n>     int GroupCount { get; }\r\n>     object GetGroup(int index);\r\n> }\r\n> ```\r\n> \r\n> We would then explicitly implement the interface for the GetGroup method. I think that would be cleaner than exposing a non-generic ICollection, although I could be swayed on explicitly implementing that too. Thoughts?\r\n\r\nThat is the reason why I said \"abstraction\" rather than \"abstract class\", because either would probably be fine. I just used abstract classes in most other places because it meant keeping the same syntax as the upstream code. For example:\r\n\r\n#### Java\r\n\r\n```java\r\nList<AbstractAllGroupsCollector> collectors = new ArrayList();\r\nValueSource vs = new BytesRefFieldSource(groupField);\r\ncollectors.add(new FunctionAllGroupHeadsCollector(vs, new Map(), sortWithinGroup));\r\ncollectors.add(TermAllGroupHeadsCollector.Create(groupField, sortWithinGroup));\r\n```\r\n\r\n#### C#\r\n\r\n```c#\r\nList<AbstractAllGroupsCollector> collectors = new List<AbstractAllGroupsCollector>();\r\nValueSource vs = new BytesRefFieldSource(groupField);\r\ncollectors.Add(new FunctionAllGroupHeadsCollector(vs, new Hashtable(), sortWithinGroup));\r\ncollectors.Add(TermAllGroupHeadsCollector.Create(groupField, sortWithinGroup));\r\n```\r\n\r\nWhere if we used an interface, it would be declared a bit different:\r\n\r\n```c#\r\nList<IAllGroupsCollector> collectors = new List<IAllGroupsCollector>();\r\n```\r\n\r\nThe main reason for doing this in other places was for being able to access constants and fields without having to specify the non-generic type (in which case the syntax stays the same as upstream).\r\n\r\nIt would also allow the use of the `Collector` abstract class, so the user could cast to that type just as they could in Java. Being that there are no methods on `ICollector` that wouldn't also exist on `Collector`, that is not such a big deal, though.\r\n\r\nThat being said, using an interface does have an advantage we may be able to take advantage of: it can be declared internal and used just for testing purposes. If we use an abstract class, it will have to be declared public in order for a public type to inherit it. Although, I am not entirely convinced that getting the `GroupCount` without having strongly-typed access to the groups is not a valid use case.\r\n\r\nAfter mulling this over a bit more, if the user needed to create a collection of mixed collectors, they could just declare it `object` or `ICollector` and then pass it through a set of cast tests upon usage. However, they would need to know all possible types that it could be cast to at compile time, which might not be possible for every use case.\r\n\r\n```c#\r\n//List<AbstractGroupingSearch> collectors = new List<AbstractGroupingSearch>();\r\nList<object> collectors = new List<object>();\r\n\r\ncollectors.Add(GroupingSearch.ByField(...));\r\ncollectors.Add(GroupingSearch.ByFunction<MutableValueStr>(...));\r\ncollectors.Add(GroupingSearch.ByFunction<MutableValueInt32>(...));\r\ncollectors.Add(GroupingSearch.ByDocBlock<string>(...));\r\ncollectors.Add(GroupingSearch.ByDocBlock<int>(...));\r\n\r\nforeach (object collector in collectors)\r\n{\r\n    if (collector is FieldGroupingSearch fieldGroupingSearch)\r\n        // do something with the collector\r\n    else if (collector is FunctionGroupingSearch<MutableValueStr> functionOnString)\r\n        // do something with the collector\r\n    else if (collector is FunctionGroupingSearch<MutableValueInt32> functionOnInt32)\r\n        // do something with the collector\r\n    else if (collector is DocBlockGroupingSearch<string> docBlockOnString)\r\n        // do something with the collector\r\n    else if (collector is DocBlockGroupingSearch<int> docBlockOnInt32)\r\n         // do something with the collector\r\n}\r\n```\r\n\r\nThis would be very cumbersome if all they want to do is read a field that is common among all of these types and even moreso if they wanted to do that for any custom subclass (which would probably require reflection).\r\n\r\nI am not opposed to keeping `ICollector`. The only thing that is kind of smelly about it is that there is one constant that is declared on `Collector` because interfaces in c# don't support constants. So, we need the `Collector` class whether it is made abstract or not. Since it is currently a static class, users could be confused that they cannot cast a collector type to `Collector` as is the case in Java.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543953460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543978868","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543978868","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543978868,"node_id":"IC_kwDOAAJ06c6Xogl0","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T17:53:59Z","updated_at":"2024-12-15T17:53:59Z","author_association":"CONTRIBUTOR","body":"> That being said, using an interface does have an advantage we may be able to take advantage of: it can be declared internal and used just for testing purposes.\r\n\r\nI think if you're saying that users have a valid use case of needing to store multiple of these different collectors in a variable or collection with different type parameters, we might as well make the interface public then. But as I noted above, I think interfaces instead of abstract classes have another advantage: being able to explicitly implement them in the generic abstract classes.\r\n\r\nIf we take the abstract class approach, you can't explicitly implement an abstract class. It will require shadowing the non-generic properties if they have the same name. I think an interface lets us have the best of both worlds: we can allow for this use case, while simplifying our testing code. I'll give it a try and see how it comes out.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543978868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543986222","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543986222","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543986222,"node_id":"IC_kwDOAAJ06c6XoiYu","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T18:15:51Z","updated_at":"2024-12-15T18:15:51Z","author_association":"CONTRIBUTOR","body":"> We would then explicitly implement the interface for the GetGroup method. I think that would be cleaner than exposing a non-generic ICollection, although I could be swayed on explicitly implementing that too. Thoughts?\r\n\r\nYeah, I definitely would stay away from a non-generic `ICollection`.\r\n\r\n> > That being said, using an interface does have an advantage we may be able to take advantage of: it can be declared internal and used just for testing purposes.\r\n> \r\n> I think if you're saying that users have a valid use case of needing to store multiple of these different collectors in a variable or collection with different type parameters, we might as well make the interface public then. But as I noted above, I think interfaces instead of abstract classes have another advantage: being able to explicitly implement them in the generic abstract classes.\r\n> \r\n> If we take the abstract class approach, you can't explicitly implement an abstract class. It will require shadowing the non-generic properties if they have the same name. I think an interface lets us have the best of both worlds: we can allow for this use case, while simplifying our testing code. I'll give it a try and see how it comes out.\r\n\r\nAgreed. I often use interfaces to separate members of the same name that only differ by return type. In fact, I made a fluent API generator that creates a builder class that implements interfaces to enforce complex business rules, such as only allowing a specific setting to be applied up to 3 times (after which it will return the builder instance cast to an interface that no longer declares the method for the setting).\r\n\r\nI would also like to see how that approach turns out. And I agree that there is more utility for this than just testing.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543986222/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543990389","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2543990389","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2543990389,"node_id":"IC_kwDOAAJ06c6XojZ1","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T18:24:23Z","updated_at":"2024-12-15T18:24:23Z","author_association":"CONTRIBUTOR","body":"This is going well so far, I'll have a commit soon. I'm creating adapter classes to adapt i.e. an `IList<GC>` to `IList<IGroupCount>` for use in AbstractDistinctValuesCollector and such, so that we can use the generic interfaces in a non-generic interface instead of having to use the non-generic ICollection/IList/etc, and without having to use LINQ to create new collections just to cast those values.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2543990389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544002469","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2544002469","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2544002469,"node_id":"IC_kwDOAAJ06c6XomWl","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T18:55:00Z","updated_at":"2024-12-15T18:55:00Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 This is pushed up to my branch, let me know what you think. This allowed me to remove the wrapping types so the test code is closer to Lucene. It required adding those \"Casting\" types to Lucene.Net.Support (as internal classes) to do the casting for the explicit interface implementations without having to allocate new collections (and perform O(n) operations to do so) or use LINQ.\r\n\r\nStill has one failing test, but I think it'll be easier to figure out what's wrong from the diff now that the test code has less changes.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544002469/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544004140","html_url":"https://github.com/apache/lucenenet/issues/1059#issuecomment-2544004140","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1059","id":2544004140,"node_id":"IC_kwDOAAJ06c6Xomws","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T19:00:22Z","updated_at":"2024-12-15T19:00:22Z","author_association":"CONTRIBUTOR","body":"Of course, as always happens, I realized what the problem was as soon as I posted that. Fixed, and the unit test passes now!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544004140/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544042375","html_url":"https://github.com/apache/lucenenet/pull/1057#issuecomment-2544042375","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1057","id":2544042375,"node_id":"IC_kwDOAAJ06c6XowGH","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-15T20:23:15Z","updated_at":"2024-12-15T20:23:15Z","author_association":"CONTRIBUTOR","body":"Publishing as ready for review as I am not aware of any other usages that need to be updated. Let me know if you find any.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544042375/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544233401","html_url":"https://github.com/apache/lucenenet/issues/964#issuecomment-2544233401","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/964","id":2544233401,"node_id":"IC_kwDOAAJ06c6Xpeu5","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-16T00:26:39Z","updated_at":"2024-12-16T00:26:39Z","author_association":"CONTRIBUTOR","body":"Hi @dongle-the-gadget, thanks for the detailed report and code sample. I was able to reproduce your findings. However, I regret to say that this is correct behavior, so the problem likely lies in how you're creating your index.\r\n\r\nI was able to reproduce the exact same behavior in Java Lucene 4.8.1, so this is not a bug in Lucene.NET. Java code below if you're curious.\r\n\r\nThe problem seems to be due to whatever Analyzer you're using breaking the name values into smaller \"terms.\" I opened the index with [Luke 4.8.0](https://github.com/DmitryKey/luke) and it shows the following terms for the name field: a, app, create, file, file2, from, mapping, moniker, and w. When using the GroupingSearch that takes a string in the constructor, that does a Term-based grouping, so it can only group by those terms. If you inspect the group value of each group, you'll see that the matches (the 4 you were seeing) were: file, mapping, w, and moniker.\r\n\r\nIf you want to group by the full field value, you will either need to index with an analyzer that does not break the value into those smaller terms, or potentially use a different grouping strategy.\r\n\r\n```java\r\npackage org.example;\r\n\r\nimport org.apache.lucene.index.DirectoryReader;\r\nimport org.apache.lucene.search.IndexSearcher;\r\nimport org.apache.lucene.search.PhraseQuery;\r\nimport org.apache.lucene.search.grouping.GroupingSearch;\r\nimport org.apache.lucene.search.grouping.TopGroups;\r\nimport org.apache.lucene.store.FSDirectory;\r\nimport org.apache.lucene.util.BytesRef;\r\n\r\nimport java.io.File;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        FSDirectory directory = FSDirectory.open(new File(\"LuceneIndex\"));\r\n        DirectoryReader reader = DirectoryReader.open(directory);\r\n        IndexSearcher searcher = new IndexSearcher(reader);\r\n\r\n        PhraseQuery query = new PhraseQuery();\r\n        query.add(new org.apache.lucene.index.Term(\"name\", \"create\"));\r\n        query.add(new org.apache.lucene.index.Term(\"name\", \"file\"));\r\n\r\n        var docs = searcher.search(query, 53);\r\n        boolean hasRequiredDoc = false;\r\n        for (var doc : docs.scoreDocs)\r\n        {\r\n            var document = searcher.doc(doc.doc);\r\n            if (document.get(\"name\").equals(\"CreateFileW\"))\r\n            {\r\n                hasRequiredDoc = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        GroupingSearch groupingSearch = new GroupingSearch(\"name\");\r\n        groupingSearch.setAllGroups(true);\r\n\r\n        TopGroups<BytesRef> groups = groupingSearch.search(searcher, query, 0, 10);\r\n        boolean hasRequiredGroup = false;\r\n\r\n        for (var group : groups.groups)\r\n        {\r\n            System.out.println(\"Group: \" + group.groupValue.utf8ToString());\r\n\r\n            var firstDoc = group.scoreDocs[0];\r\n            var doc = searcher.doc(firstDoc.doc);\r\n\r\n            if (doc.get(\"name\").equals(\"CreateFileW\"))\r\n            {\r\n                hasRequiredGroup = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        System.out.println(hasRequiredDoc);\r\n        System.out.println(hasRequiredGroup);\r\n    }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544233401/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544449385","html_url":"https://github.com/apache/lucenenet/issues/964#issuecomment-2544449385","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/964","id":2544449385,"node_id":"IC_kwDOAAJ06c6XqTdp","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-16T03:08:41Z","updated_at":"2024-12-16T03:46:16Z","author_association":"CONTRIBUTOR","body":"Note that [`KeywordAnalyzer`](https://github.com/apache/lucenenet/blob/7cfc4c340c384bd5af39f42d7591dbe45344fd24/src/Lucene.Net.Analysis.Common/Analysis/Core/KeywordAnalyzer.cs)/[`KeywordTokenizer`](https://github.com/apache/lucenenet/blob/7cfc4c340c384bd5af39f42d7591dbe45344fd24/src/Lucene.Net.Analysis.Common/Analysis/Core/KeywordTokenizer.cs) are suitable for the purpose of not splitting apart values like this.\r\n\r\nYou can use `PerFieldAnalyzerWrapper` in a custom analyzer to specify that the `name` field will use `KeywordAnalyzer` while all other fields will use `StandardAnalyzer`.\r\n\r\n```c#\r\nusing Lucene.Net.Analysis;\r\nusing Lucene.Net.Analysis.Core;\r\nusing Lucene.Net.Analysis.Standard;\r\nusing System.IO;\r\n\r\npublic class CustomAnalyzer : Analyzer\r\n{\r\n    private readonly Analyzer _defaultAnalyzer;\r\n    private readonly PerFieldAnalyzerWrapper _perFieldAnalyzerWrapper;\r\n\r\n    public CustomAnalyzer()\r\n    {\r\n        // Default analyzer for most fields\r\n        _defaultAnalyzer = new StandardAnalyzer(Lucene.Net.Util.LuceneVersion.LUCENE_48);\r\n\r\n        // Define the per-field analyzers\r\n        var perFieldAnalyzers = new Dictionary<string, Analyzer>\r\n        {\r\n            { \"name\", new KeywordAnalyzer() } // Use KeywordAnalyzer for \"name\"\r\n        };\r\n\r\n        // Combine default and per-field analyzers\r\n        _perFieldAnalyzerWrapper = new PerFieldAnalyzerWrapper(_defaultAnalyzer, perFieldAnalyzers);\r\n    }\r\n\r\n    protected override TokenStreamComponents CreateComponents(string fieldName, TextReader reader)\r\n    {\r\n        // Delegate to the PerFieldAnalyzerWrapper\r\n        return _perFieldAnalyzerWrapper.GetWrappedAnalyzer(fieldName).CreateComponents(fieldName, reader);\r\n    }\r\n\r\n    protected override TextReader InitReader(string fieldName, TextReader reader)\r\n    {\r\n        return _perFieldAnalyzerWrapper.InitReader(fieldName, reader);\r\n    }\r\n}\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2544449385/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2549026715","html_url":"https://github.com/apache/lucenenet/pull/1067#issuecomment-2549026715","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1067","id":2549026715,"node_id":"IC_kwDOAAJ06c6X7w-b","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-17T16:54:31Z","updated_at":"2024-12-17T19:46:26Z","author_association":"CONTRIBUTOR","body":"This diff is larger than I'd like it to be, so I'm going to update the scripts to deviate from Lucene's whitespace style to make the diff smaller and easier to review. (edit: this is done)","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2549026715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2551620616","html_url":"https://github.com/apache/lucenenet/pull/1068#issuecomment-2551620616","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1068","id":2551620616,"node_id":"IC_kwDOAAJ06c6YFqQI","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-18T15:29:07Z","updated_at":"2024-12-18T15:29:07Z","author_association":"CONTRIBUTOR","body":"Wouldn't this be categorized as a performance improvement rather than a bugfix?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2551620616/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2551782910","html_url":"https://github.com/apache/lucenenet/pull/1068#issuecomment-2551782910","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1068","id":2551782910,"node_id":"IC_kwDOAAJ06c6YGR3-","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-18T16:34:21Z","updated_at":"2024-12-18T16:34:21Z","author_association":"CONTRIBUTOR","body":"> Wouldn't this be categorized as a performance improvement rather than a bugfix?\r\n\r\nI'm not sure there would be any performance impact. Originally I had assumed that we needed to do this to avoid overflow exceptions, but I realized just now that our projects do not have the \"Check for arithmetic overflow\" compiler option checked, so that reasoning is not valid alone. Perhaps an argument could be made that it helps ensure best practices and might help users if they want to recompile the library with that option for some reason, as well as to be consistent with other places in the codebase where we were already using `unchecked` blocks in GetHashCode... but in terms of performance, it looks like it generates the same opcodes without these blocks (i.e. `add` vs  `add.ovf`), so there's no perf benefit here either. I'm not opposed to still moving forward with this PR for consistency's sake, but it's not the bugfix I thought it was. Perhaps \"notes:ignore\" would be a better label then.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2551782910/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2551852700","html_url":"https://github.com/apache/lucenenet/pull/1068#issuecomment-2551852700","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1068","id":2551852700,"node_id":"IC_kwDOAAJ06c6YGi6c","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-18T17:06:01Z","updated_at":"2024-12-18T17:06:01Z","author_association":"CONTRIBUTOR","body":"Aside: we seem to be more regularly be getting transient build failures downloading from nuget.org and MyGet again. This possibly is a result of adding the .NET 9 tests with an extra ~70 actions running in parallel. Fortunately the workaround is simple, to just choose the option to re-run failed jobs.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2551852700/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2552657461","html_url":"https://github.com/apache/lucenenet/pull/1068#issuecomment-2552657461","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1068","id":2552657461,"node_id":"IC_kwDOAAJ06c6YJnY1","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-19T02:41:58Z","updated_at":"2024-12-19T02:41:58Z","author_association":"CONTRIBUTOR","body":"> Aside: we seem to be more regularly be getting transient build failures downloading from nuget.org and MyGet again. This possibly is a result of adding the .NET 9 tests with an extra ~70 actions running in parallel. Fortunately the workaround is simple, to just choose the option to re-run failed jobs.\r\n\r\nI suspect this is due to extra holiday traffic, however, it would probably help if we enabled NuGet caching (#856 and #857). I am not convinced we need to generate an extra file and figure out how to maintain it just so we can update packages, though. Our first attempt at doing so (on Azure DevOps) didn't need to, but the key didn't include the `dependencies.props` file (which missed the entire point) and apparently the only way to fix that is to completely rename the cache key so it can include that file (it should include all `.props`, `.targets`, and '.*proj` files just to be on the safe side).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2552657461/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2554744175","html_url":"https://github.com/apache/lucenenet/issues/271#issuecomment-2554744175","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/271","id":2554744175,"node_id":"IC_kwDOAAJ06c6YRk1v","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-19T15:50:45Z","updated_at":"2024-12-19T15:50:45Z","author_association":"CONTRIBUTOR","body":"I spent more time looking at this last night and updated the BaseTokenStreamTestCase to be much closer to the original, mostly by removing some code that didn't exist upstream. The only thing that really differs from upstream is that `.Close()` is still called in the try/finally blocks, and I added Dispose to those as well, even though none of our implementations now use Dispose as of this PR. (https://github.com/apache/lucenenet/pull/1058)\r\n\r\nTestRandomChains still randomly fails (fairly reliably if you put a Repeat(100) on it), but it doesn't cause cascading failures, and I'm not convinced it's failing because of this issue. I'm not entirely sure where to go next from here, so I could use some help on this one with not only reviewing what I've got, but trying it out to figure out if more work needs to be done here or not.\r\n\r\nIf TestRandomChains randomly failing _is_ related to this issue, I'd appreciate some enlightenment as to why, as that isn't clear to me. If the core problem with this issue was that failing analysis tests (TestRandomChains or otherwise) caused other cascading failures, that does not seem to be the case anymore.\r\n\r\nI am 99% sure I've solved the issue of TokenStreams being reused after Close is called. Next up I'll make a test that tests to make sure Dispose is not called before reuse (as that should not be done in a reusable way), and make those two types mentioned above reusable (even though they aren't causing any failing tests).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2554744175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2558195235","html_url":"https://github.com/apache/lucenenet/issues/1062#issuecomment-2558195235","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1062","id":2558195235,"node_id":"IC_kwDOAAJ06c6YevYj","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-21T18:24:38Z","updated_at":"2024-12-21T18:24:38Z","author_association":"CONTRIBUTOR","body":"After some thought, given the performance concern, I'm going to move this to the Future milestone. I still think this will warrant consideration in the future, but I think it should be once we have good benchmarking infrastructure in place to ensure there are no performance regressions. In the meantime, this would just be a convenience and users can easily work around it by creating their own wrapper types, such as:\r\n\r\n```c#\r\npublic class DelegateReaderDisposedListener : IReaderDisposedListener\r\n{\r\n      private readonly Action<IndexReader> action;\r\n\r\n      public DelegateReaderDisposedListener(Action<IndexReader> action)\r\n      {\r\n          this.action = action;\r\n      }\r\n\r\n      public void OnDispose(IndexReader reader)\r\n      {\r\n          action(reader);\r\n      }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2558195235/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2558519066","html_url":"https://github.com/apache/lucenenet/pull/1067#issuecomment-2558519066","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1067","id":2558519066,"node_id":"IC_kwDOAAJ06c6Yf-ca","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-22T16:59:47Z","updated_at":"2024-12-22T16:59:47Z","author_association":"CONTRIBUTOR","body":"I'm renaming the GitHub workflow file. I think we should keep the current names because it more closely matches the Java file names. This can always be revisited later in a separate PR if desired.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2558519066/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2561483864","html_url":"https://github.com/apache/lucenenet/issues/1027#issuecomment-2561483864","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1027","id":2561483864,"node_id":"IC_kwDOAAJ06c6YrSRY","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-24T23:06:33Z","updated_at":"2024-12-24T23:06:33Z","author_association":"CONTRIBUTOR","body":"I have reviewed usages of Encoding (most commonly `Encoding.UTF8`), and determined that most usages do not need to be changed. The following cases do not result in a BOM being generated:\r\n\r\n- `Encoding.UTF8.GetBytes(string)`\r\n- `J2N.Text.StringExtensions.GetBytes(this string, Encoding)`\r\n- Use of `Encoding.Default` or `Encoding.GetEncoding(0)` which [uses a BOM-less UTF8 encoding on modern .NET, or the system current code page on .NET Framework](https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-text-encoding-default)\r\n\r\nThe following cases ignore a BOM if present, and do not fail if there is not a BOM, and thus do not need to be changed to a BOM-less Encoding:\r\n- Any TextReader use (such as StreamReader)\r\n- `IOUtils.GetDecodingReader(...)`\r\n- `Encoding.UTF8.GetString(byte[])`\r\n- FileStream with `FileAccess.Read`\r\n\r\nSo you'll see in the PR that the amount of changes to address BOM issues are not very many; that's because most fall into those buckets above.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2561483864/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2561580875","html_url":"https://github.com/apache/lucenenet/issues/918#issuecomment-2561580875","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/918","id":2561580875,"node_id":"IC_kwDOAAJ06c6Yrp9L","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-25T03:30:42Z","updated_at":"2024-12-25T03:30:42Z","author_association":"CONTRIBUTOR","body":"Most of the original text of this issue was better covered in #1059.\r\n\r\nThe Collector abstract class in 4.8 provides no actual abstract class value, as it purely consists of abstract methods. In addition, this type changed to an interface in later versions of Lucene. Combined, I think this justifies leaving the interface as the only abstraction here. We discussed this and decided that for now, we'll close this and leave it as-is. If anyone feels strongly about needing this abstract class (while retaining the interface as well), even though it will be removed in a future version once we match Lucene's changes, let us know here.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2561580875/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2562026227","html_url":"https://github.com/apache/lucenenet/pull/1058#issuecomment-2562026227","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1058","id":2562026227,"node_id":"IC_kwDOAAJ06c6YtWrz","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-25T23:48:25Z","updated_at":"2024-12-25T23:48:25Z","author_association":"CONTRIBUTOR","body":"I feel confident enough in this now that it is ready for review.\r\n\r\nThis PR achieves the original goals of #271, of not only ensuring that the original issue is fixed, but that we have implemented a design that allows for TokenStreams to be \"closed\" in a reusable way (via this new `ICloseable` interface to mirror Java) while also still allowing for an extensibility point for them to be \"disposed\" in a non-reusable way, such as if your TokenStream implementation needs to dispose of native resources or file handles. \r\n\r\nAdditionally, the code in BaseTokenStreamTestCase has been reviewed several times and is now much closer to the original implementation. I've left the try/finally calls, since they probably should have been in the original Java anyways, and it seems to possibly help cascading failures (although I haven't been able to reproduce those, possibly as a result of other previous fixes).\r\n\r\nWith all tests passing reliably, this design change implemented, and all concerns addressed in the original issue, I think it's time to wrap this up and call this 5+ year old issue complete.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2562026227/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2562788290","html_url":"https://github.com/apache/lucenenet/issues/1027#issuecomment-2562788290","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1027","id":2562788290,"node_id":"IC_kwDOAAJ06c6YwQvC","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-26T14:07:29Z","updated_at":"2024-12-26T14:07:29Z","author_association":"CONTRIBUTOR","body":"Looks like you missed `OfflineSorter`. The tests specifically failed when it was configured to use a BOM, although I didn't analyze it at a high level to find out why that was the case. No objections if you wish to investigate this, but it definitely makes a difference as far as the tests are concerned.\r\n\r\nIt has gone through several rounds of refactoring since then, but currently it has a [`DEFAULT_ENCODING`](https://github.com/apache/lucenenet/blob/85c01412946ed1e2632cd2dfae4c672efd38caba/src/Lucene.Net/Util/OfflineSorter.cs#L44-L48) field that we added to ensure the tests pass. So, we have a couple of options:\r\n\r\n1. Remove the `DEFAULT_ENCODING` field and replace it with `IOUtils.CHARSET_UTF_8`. Update the OfflineSorter documentation for `ByteSequencesReader` and `ByteSequencesWriter` to indicate that constructor overloads that accept `BinaryReader` and `BinaryWriter` should use `IOUtils.CHARSET_UTF_8`.\r\n2. Initialize the `DEFAULT_ENCODING` field with the same instance as `IOUtils.CHARSET_UTF_8`.\r\n\r\nGiven the fact that we added this field specifically because `OfflineSorter` requires there to be no `BOM` (which difers from the .NET default), this could go either way. Given that we recently changed `IOUtils.CHARSET_UTF_8` to remove the BOM, using it wasn't an option when the `DEFAULT_ENCODING` field was added. If it were, it would have been reused in this case and the field wouldn't have been added.\r\n\r\nSide note: perhaps we should also rename `IOUtils.CHARSET_UTF_8` because it is public and \"CharSet\" is Java nomenclature. `ENCODING_UTF8_NO_BOM` would be a better name.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2562788290/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2563862975","html_url":"https://github.com/apache/lucenenet/issues/1077#issuecomment-2563862975","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1077","id":2563862975,"node_id":"IC_kwDOAAJ06c6Y0XG_","user":{"login":"manognya-b","id":100461186,"node_id":"U_kgDOBfzqgg","avatar_url":"https://avatars.githubusercontent.com/u/100461186?v=4","gravatar_id":"","url":"https://api.github.com/users/manognya-b","html_url":"https://github.com/manognya-b","followers_url":"https://api.github.com/users/manognya-b/followers","following_url":"https://api.github.com/users/manognya-b/following{/other_user}","gists_url":"https://api.github.com/users/manognya-b/gists{/gist_id}","starred_url":"https://api.github.com/users/manognya-b/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manognya-b/subscriptions","organizations_url":"https://api.github.com/users/manognya-b/orgs","repos_url":"https://api.github.com/users/manognya-b/repos","events_url":"https://api.github.com/users/manognya-b/events{/privacy}","received_events_url":"https://api.github.com/users/manognya-b/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-27T16:43:17Z","updated_at":"2024-12-27T16:43:17Z","author_association":"CONTRIBUTOR","body":"can i take up this issue?","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2563862975/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2563903205","html_url":"https://github.com/apache/lucenenet/issues/1077#issuecomment-2563903205","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1077","id":2563903205,"node_id":"IC_kwDOAAJ06c6Y0g7l","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-27T17:41:32Z","updated_at":"2024-12-27T17:41:32Z","author_association":"CONTRIBUTOR","body":"> can i take up this issue?\n\nPlease! Keep us posted on your progress, let us know if you have any questions, and submit a PR when ready. Thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2563903205/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564151510","html_url":"https://github.com/apache/lucenenet/issues/1077#issuecomment-2564151510","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1077","id":2564151510,"node_id":"IC_kwDOAAJ06c6Y1djW","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-28T03:02:00Z","updated_at":"2024-12-28T03:02:00Z","author_association":"CONTRIBUTOR","body":"Using a Regex search might be helpful. I found several hits using this pattern: `typeof\\([^\\)]*\\)\\.Name`. There may be other, similar variations of this pattern, though.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564151510/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564174408","html_url":"https://github.com/apache/lucenenet/issues/846#issuecomment-2564174408","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/846","id":2564174408,"node_id":"IC_kwDOAAJ06c6Y1jJI","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-28T04:39:20Z","updated_at":"2024-12-28T04:39:20Z","author_association":"CONTRIBUTOR","body":"While investigating this, I needed to repeat these tests but with a new test/seed each time, and they use static values with OneTimeSetUp so I needed to repeat the entire `dotnet test` run. (Aside: I also temporarily, locally made these not-OneTime/static for adding a Repeat attribute as well, but still use the script below.) I whipped up this little Powershell script to re-run a specific test, without running build, over and over again until it fails. Hope this helps someone (or future me):\r\n\r\n```powershell\r\ndo { \r\n    dotnet test ./src/Lucene.Net.Tests.QueryParser/Lucene.Net.Tests.QueryParser.csproj -c Release --filter \"FullyQualifiedName=Lucene.Net.QueryParsers.Flexible.Standard.TestNumericQueryParser.TestInclusiveNumericRange\" --no-build \r\n} until (!$?)\r\n```\r\n\r\nMake sure to remove any fixed seed/culture in your test settings first (unless you're trying to track down a concurrency bug).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564174408/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564364810","html_url":"https://github.com/apache/lucenenet/issues/1077#issuecomment-2564364810","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1077","id":2564364810,"node_id":"IC_kwDOAAJ06c6Y2RoK","user":{"login":"manognya-b","id":100461186,"node_id":"U_kgDOBfzqgg","avatar_url":"https://avatars.githubusercontent.com/u/100461186?v=4","gravatar_id":"","url":"https://api.github.com/users/manognya-b","html_url":"https://github.com/manognya-b","followers_url":"https://api.github.com/users/manognya-b/followers","following_url":"https://api.github.com/users/manognya-b/following{/other_user}","gists_url":"https://api.github.com/users/manognya-b/gists{/gist_id}","starred_url":"https://api.github.com/users/manognya-b/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manognya-b/subscriptions","organizations_url":"https://api.github.com/users/manognya-b/orgs","repos_url":"https://api.github.com/users/manognya-b/repos","events_url":"https://api.github.com/users/manognya-b/events{/privacy}","received_events_url":"https://api.github.com/users/manognya-b/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-28T15:41:40Z","updated_at":"2024-12-28T15:41:40Z","author_association":"CONTRIBUTOR","body":"> Using a Regex search might be helpful. I found several hits using this pattern: `typeof\\([^\\)]*\\)\\.Name`. There may be other, similar variations of this pattern, though.\r\n\r\nThanks for the tip! As I understand it, `typeof(SomeType).Name` has to be moved to `nameof(SomeType)` for all all relevant files in the repository? If this is correct, I will go ahead and use regex to filter out usages and change them appropriately. Thanks! ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564364810/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564383168","html_url":"https://github.com/apache/lucenenet/issues/1077#issuecomment-2564383168","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1077","id":2564383168,"node_id":"IC_kwDOAAJ06c6Y2WHA","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-28T17:12:41Z","updated_at":"2024-12-28T17:12:41Z","author_association":"CONTRIBUTOR","body":"That's correct, and be on the lookout for any other similar opportunities to use `nameof` instead of something off `typeof` (or `.GetType()` for i.e. sealed types that cannot be something else at runtime).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564383168/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564613521","html_url":"https://github.com/apache/lucenenet/issues/846#issuecomment-2564613521","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/846","id":2564613521,"node_id":"IC_kwDOAAJ06c6Y3OWR","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-29T04:57:29Z","updated_at":"2024-12-29T04:57:29Z","author_association":"CONTRIBUTOR","body":"After many, many attempts, finally was able to reproduce a failure on Linux x64:\r\n\r\n> Query <+INT32:[\"0\" TO \"2104943488\"] +INT64:[\"0\" TO \"8987044613491660800\"] +SINGLE:[\"0\" TO \"0.074273415\"] +DOUBLE:[\"0\" TO \"0.8280274472269546\"] +date:[\"1970/1/1 4:00:00 +4 西元 0 +04:00 1970\" TO \"2004/11/12 1:42:19 +3 西元 19 +03:00 2004\"]> retrieved 1 document(s), 2 document(s) expected.\r\n\r\ntest settings:\r\n```json\r\n{\r\n  \"tests\": {\r\n     \"seed\": \"0xc700d5224e7f9ffc\",\r\n     \"culture\": \"ff-Latn-SL\"\r\n  }\r\n}\r\n```\r\n\r\nThe common thread seems to be cultures with \"西元\" as the era name (akin to \"AD\" in en-US). These cultures on my Linux machine are:\r\n\r\n- yue\r\n- yue-Hans\r\n- yue-Hans-CN\r\n- yue-Hant \r\n- yue-Hant-HK\r\n- zh-Hant\r\n- zh-Hant-TW\r\n\r\nmacOS also has these additional cultures with that era name:\r\n\r\n- zh-Hant-CN\r\n- zh-Hant-JP\r\n\r\nNote that the culture in the test settings is effectively ignored, a random culture is picked for these tests based on the random seed. Also this cannot be reproduced on macOS with the same seed, likely because the list of cultures is different.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2564613521/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566110261","html_url":"https://github.com/apache/lucenenet/issues/846#issuecomment-2566110261","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/846","id":2566110261,"node_id":"IC_kwDOAAJ06c6Y87w1","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-31T03:54:10Z","updated_at":"2024-12-31T03:54:10Z","author_association":"CONTRIBUTOR","body":"I am happy to report that I have definitively found the source of the failures from this original issue. It occurs only for the zh-Hant-TW culture, for any time zones with a negative offset, and only on .NET 6-8 on Linux and macOS.\r\n\r\nThe root cause is that that culture's CultureInfo is missing the `tt` AM/PM designator from the format strings in `DateTimeFormat.LongTimePattern` (as well as `FullDateTimePattern`, but we aren't using that). So the following code:\r\n\r\n```c#\r\nusing System.Globalization;\r\nvar ci = CultureInfo.GetCultureInfo(\"zh-Hant-TW\");\r\nConsole.WriteLine(ci.DateTimeFormat.LongDatePattern + \" \" + ci.DateTimeFormat.LongTimePattern);\r\nConsole.WriteLine(new DateTime(1969, 12, 31, 20, 0, 0).ToString(ci.DateTimeFormat.LongDatePattern + \" \" + ci.DateTimeFormat.LongTimePattern, ci));\r\n```\r\n\r\n... results in the following on .NET 6-8 on Linux and macOS:\r\n\r\n```\r\nyyyy年M月d日 dddd h:mm:ss\r\n1969年12月31日 星期三 8:00:00\r\n```\r\n\r\n... whereas it results in the following on .NET 9, because it includes the `tt` format before the hour:\r\n```\r\nyyyy年M月d日 dddd tth:mm:ss\r\n1969年12月31日 星期三 下午8:00:00\r\n```\r\n\r\nWithout the 下午, this gets parsed as 8:00 am on the day before the unix epoch (in this case, at a -4:00 offset time zone), rather than 8:00 pm, which when adjusted for the timezone offset is the unix epoch exactly. Because the time is 12 hours before the epoch, the documents do not match the date queries, and the expected number of results is not returned, thus the test assertion fails. This is only a problem with negative offsets, because with zero or positive offsets, it is a number on or after midnight which will correctly get parsed as AM without the designator.\r\n\r\nI wrote a small program to go through and verify all cultures to see if any others were a problem like this, and it seems to only be zh-Hant-TW, and only net6.0-net8.0. The .NET team seems to have fixed this (possibly unintentionally by upgrading ICU) in .NET 9.\r\n\r\nI am going to fix this by adding another form of \"sanity\" check for the culture/time zone combinations that ensures that the unix epoch can round-trip ToString/Parse with the given format string. If it fails, then it'll iterate again and find a new random culture/time zone that works.\r\n\r\nAdditionally, I found another failure through many repeated random runs, that had not been reported yet. For cultures that use a decimal comma, such as sv-FI, small decimal values can fail due to a J2N round-trip formatting/parsing bug when there is a decimal comma and exponential notation. That has been filed as https://github.com/NightOwl888/J2N/issues/128.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566110261/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566122866","html_url":"https://github.com/apache/lucenenet/issues/846#issuecomment-2566122866","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/846","id":2566122866,"node_id":"IC_kwDOAAJ06c6Y8-1y","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-31T04:28:44Z","updated_at":"2024-12-31T04:28:44Z","author_association":"CONTRIBUTOR","body":"Update: it fails on Windows on net6.0-net8.0 as well, and is fixed on net9.0 there too. I had just missed this because I had only previously tested that on net9.0, and had not yet made the connection to this being a .NET version-specific bug. (And, it fails on net5.0 as well, but did not test those earlier since we no longer have that test framework target.) ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566122866/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566131017","html_url":"https://github.com/apache/lucenenet/pull/1075#issuecomment-2566131017","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1075","id":2566131017,"node_id":"IC_kwDOAAJ06c6Y9A1J","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-31T04:52:50Z","updated_at":"2024-12-31T04:52:50Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I assume this comment on the issue was really for this PR instead: https://github.com/apache/lucenenet/issues/1027#issuecomment-2562788290\r\n\r\nI went ahead and took option 1 to remove the field, and renamed `CHARSET_UTF_8` as you noted as well. For consistency with use elsewhere and in Lucene, I left an underscore between \"UTF\" and \"8\" as `ENCODING_UTF_8_NO_BOM`.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566131017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566690600","html_url":"https://github.com/apache/lucenenet/issues/827#issuecomment-2566690600","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/827","id":2566690600,"node_id":"IC_kwDOAAJ06c6Y_Jco","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-31T20:09:37Z","updated_at":"2024-12-31T20:09:37Z","author_association":"CONTRIBUTOR","body":"> @NightOwl888 Can you provide more information on how to reproduce this one? As written, I inferred this to mean that if you have an environment variable named `tests:crashmode` that it would throw an exception, and I don't experience that behavior. The environment variable is just ignored, since it doesn't have the `lucene:` prefix. It also doesn't seem to be an issue if you accidentally request a SystemProperties key _with_ the prefix (where it should not have the prefix in code), it just won't have the value. Can you provide a stack trace of where this is coming from, or steps to reproduce? Maybe I'm just not understanding something.\r\n\r\nI took a look at this before, but I couldn't figure out how to reproduce it again.\r\n\r\nBut do note that the environment variables were being specified as part of the `ProcessStartInfo` for `System.Process` when I was doing the testing in the `TestIndexWriterOnJRECrash` test. This would be retrieved using `SystemProperties.GetPropertyAsBoolean()` inside of Lucene.Net.\r\n\r\n> NOTE: System properties are currently being passed on the command line, which would need to be removed to add them as environment variables in the `ProcessStartInfo` instance.\r\n\r\nThe production `IConfigurationFactory` setup is to use a custom environment variables provider (which I think works), but during testing it injects the `TestConfigurationFactory` which uses the stock `Microsoft.Extensions.Configuration.EnvironmentVariables` implementation, which in turn may have led to this error.\r\n\r\nHowever, feel free to close this if the error is not reproducible.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566690600/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566735749","html_url":"https://github.com/apache/lucenenet/issues/846#issuecomment-2566735749","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/846","id":2566735749,"node_id":"IC_kwDOAAJ06c6Y_UeF","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2024-12-31T22:24:12Z","updated_at":"2024-12-31T22:24:12Z","author_association":"CONTRIBUTOR","body":"Status update. To recap, there are two issues that have caused failing QueryParser Flexible tests here. Fix PRs are available for each:\r\n\r\n1. The zh-Hant-TW issue mentioned in detail above, fixed by #1078 \r\n2. The J2N parsing round-trip issue, fixed by https://github.com/NightOwl888/J2N/pull/129\r\n\r\nThe latter will require an update to the J2N dependency when an updated version with that fix is available. We'll consider this issue fixed when both of these are merged/updated.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566735749/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566763928","html_url":"https://github.com/apache/lucenenet/issues/827#issuecomment-2566763928","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/827","id":2566763928,"node_id":"IC_kwDOAAJ06c6Y_bWY","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-01T00:11:33Z","updated_at":"2025-01-01T00:11:33Z","author_association":"CONTRIBUTOR","body":"I changed the ProcessStartInfo in TestIndexWriterOnJRECrash to pass the test parameters as environment variables instead of via the command-line arguments, and the test passed. I'm going to close this for now as not reproducible. Thanks for the info!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2566763928/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567149427","html_url":"https://github.com/apache/lucenenet/pull/1079#issuecomment-2567149427","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1079","id":2567149427,"node_id":"IC_kwDOAAJ06c6ZA5dz","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-01T21:18:16Z","updated_at":"2025-01-01T22:44:25Z","author_association":"CONTRIBUTOR","body":"Converted to draft; I'm going to include the related #679 changes as well.\r\n\r\nUpdate: this is complete.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567149427/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567172861","html_url":"https://github.com/apache/lucenenet/pull/1079#issuecomment-2567172861","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1079","id":2567172861,"node_id":"IC_kwDOAAJ06c6ZA_L9","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-01T22:56:40Z","updated_at":"2025-01-01T22:56:40Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I'm iffy on `ExtractWikipedia.Count`. It's clearly internally mutable, and in Lucene it's possible to mutate it externally, but I don't think it's really supposed to be externally mutable (or even externally readable for that matter). It's pretty low priority to fix this, as this is just in benchmark code so not likely used in the real world, but let me know what you would do here. I could either make it have a private setter, or make it just a private static field instead of public. I also didn't change the increment to use Interlocked since this is not likely to be called so often in a multi-threaded way to where that would be an issue, but I could.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567172861/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567257919","html_url":"https://github.com/apache/lucenenet/issues/898#issuecomment-2567257919","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/898","id":2567257919,"node_id":"IC_kwDOAAJ06c6ZBT8_","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-02T03:38:32Z","updated_at":"2025-01-02T03:38:32Z","author_association":"CONTRIBUTOR","body":"After reviewing this, I think we should remove this attribute.\r\n\r\nIn Lucene's [TemporaryFilesCleanupRule](https://github.com/apache/lucene/blob/f01152a5909fa6059f4f1d4aeb4e14968ef1d8c2/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java#L2493-L2498), if this annotation is present and removing the temporary files fails, then it just swallows the exception and logs a warning rather than rethrowing. This annotation is only used by some Solr tests in 4.8.1 (no Lucene tests), and is not used in any Lucene tests in latest Lucene master either. The \"BugUrl\" property is so that when it logs the warning, it can log which bug is tracking the known issue of it not releasing the temporary files. This indicates that it's for buggy tests; not for useful regular test behavior.\r\n\r\nSince we do not have any tests that fail like this, and there weren't any Lucene tests that fail this way anyways, I think we should remove the attribute from test framework. This does not encourage good habits by just swallowing the exception if any test framework users actually would have a need to use this attribute. IMHO, any users in this situation should either fix the bug, use `[AwaitsFix]` to not attempt to run the test at all, or solve this manually outside of test framework.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567257919/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567268674","html_url":"https://github.com/apache/lucenenet/issues/898#issuecomment-2567268674","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/898","id":2567268674,"node_id":"IC_kwDOAAJ06c6ZBWlC","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-02T04:08:58Z","updated_at":"2025-01-02T04:08:58Z","author_association":"CONTRIBUTOR","body":"Actually, we are effectively treating _all_ tests as if they have this attribute, as we are [logging that warning and swallowing the exception](https://github.com/apache/lucenenet/blob/dbc602c7f872189516dc132045f1cc2b69d5ca7e/src/Lucene.Net.TestFramework/Util/LuceneTestCase.cs#L3129-L3134) regardless of if it has the attribute. So my previous comment about \"Since we do not have any tests that fail like this\" may not be correct if it is in fact swallowing these exceptions. That doesn't change the fact that no Lucene tests use this attribute, though. I'll try rethrowing and see if any tests fail.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567268674/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567277939","html_url":"https://github.com/apache/lucenenet/issues/898#issuecomment-2567277939","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/898","id":2567277939,"node_id":"IC_kwDOAAJ06c6ZBY1z","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-02T04:33:59Z","updated_at":"2025-01-02T04:33:59Z","author_association":"CONTRIBUTOR","body":"Okay, so all tests pass with it rethrowing, so no tests need this attribute. I still am open to removing this, but I also found that this could be pretty easily implemented. I would still strongly discourage using this attribute if we keep it, but I'll get a PR up that finishes this implementation just in case we want to keep it.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2567277939/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568530481","html_url":"https://github.com/apache/lucenenet/issues/923#issuecomment-2568530481","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/923","id":2568530481,"node_id":"IC_kwDOAAJ06c6ZGKox","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-02T23:50:06Z","updated_at":"2025-01-02T23:50:06Z","author_association":"CONTRIBUTOR","body":"I looked into this yesterday, and the only place where the test class name seems to be \"reported\" is in the stack trace. I don't believe we can easily manipulate the stack traces to include the child class name.\r\n\r\nWe could look into modifying the NUnit test naming pattern, although they [strongly discourage modifying that](https://docs.nunit.org/articles/nunit/running-tests/Template-Based-Test-Naming.html). I will give it a try, though.\r\n\r\nIf that doesn't work or causes issues with the IDE, I think perhaps our best option, per our other discussions about having an internal analyzer project, could be to create an analyzer with quick fix that looks for tests defined in a base class that haven't been overridden in the derived class, and have the quick fix scaffold out the overrides. While this wouldn't solve the issue as originally defined, it would help solve the \"doesn't scale well\" concern by automating the detection of missing overrides in the IDE and build, and the fix in the IDE.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568530481/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568639820","html_url":"https://github.com/apache/lucenenet/issues/923#issuecomment-2568639820","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/923","id":2568639820,"node_id":"IC_kwDOAAJ06c6ZGlVM","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-03T03:07:53Z","updated_at":"2025-01-03T03:09:26Z","author_association":"CONTRIBUTOR","body":"Well, at least the analyzer will help prevent developers from backing out the overrides. At one point, these were overridden to fix all of the names, but it was commented and considered a temporary workaround. There have been at least 2 developers that decided they were \"helping\" by removing them, though. And now they are mostly gone.\r\n\r\nDo note that this pertains to tests that inherit any class that contain tests. Some of them may be classes that are 2 or more levels of inheritance from the base class they need to override. The base class that contains the test does not necessarily need to be abstract.\r\n\r\nIt seems more like we should either change the name of the test or report this to NUnit so they can provide a fix or another workaround. It would be much simpler for us and our users to maintain if the inheritance-based test framework understood how to self report its own inherited tests.\r\n\r\nIt may also be possible to come up with a solution based on how xunit reports them. I don't ever recall having this issue with xunit even though J2N uses several tests that are inherited this way.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568639820/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568680532","html_url":"https://github.com/apache/lucenenet/issues/1053#issuecomment-2568680532","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1053","id":2568680532,"node_id":"IC_kwDOAAJ06c6ZGvRU","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-03T04:30:35Z","updated_at":"2025-01-03T04:33:24Z","author_association":"CONTRIBUTOR","body":"> I'm also wondering if it would be helpful to create a \"Lucene.Net.StarterPack\" NuGet package that has no code itself but brings in common Lucene.NET packages like Analysis.Common, and possibly some common others like QueryParser, Facet, and Highlighter... we could then use this single package in the quick start on the homepage.\r\n\r\nBeing that in later versions of Lucene, they brought the `StandardAnalyzer` back into the core library (likely based on user feedback such as this), I would say no, we don't need to do that. We will eventually upgrade our way out of this issue.\r\n\r\nIn fact, I wonder if we should even bother addressing this at all. Whatever the solution is, we will need to back it out when we upgrade. It seems like a waste of our limited resources to spend time doing something that will cost more time later.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568680532/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568702773","html_url":"https://github.com/apache/lucenenet/issues/923#issuecomment-2568702773","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/923","id":2568702773,"node_id":"IC_kwDOAAJ06c6ZG0s1","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-03T05:12:52Z","updated_at":"2025-01-03T05:12:52Z","author_association":"CONTRIBUTOR","body":"Come to think of it, the only thing we really need is for the test message to have the name of the test subclass in it when there is a failure. A simple way to accomplish that would be to add the name of the class to the message in the [`LuceneTestCase.TearDown()` method](https://github.com/apache/lucenenet/blob/dbc602c7f872189516dc132045f1cc2b69d5ca7e/src/Lucene.Net.TestFramework/Util/LuceneTestCase.cs#L941-L976) by doing a Reflection call (`GetType().FullName`) at that point (since it only prints if the test fails).","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568702773/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568711978","html_url":"https://github.com/apache/lucenenet/issues/923#issuecomment-2568711978","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/923","id":2568711978,"node_id":"IC_kwDOAAJ06c6ZG28q","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-03T05:30:19Z","updated_at":"2025-01-03T05:30:19Z","author_association":"CONTRIBUTOR","body":"Yeah, I had that working locally before I found the solution. But here's the PR: https://github.com/apache/lucenenet/pull/1086\r\n\r\nThat is running on ADO now, passes in GitHub. You can see in the GitHub test output that it uses the full name of the test including the derived class name (not the base class). Let me know if that causes any problems in VS for you locally if it picks up the runsettings file.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568711978/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568712689","html_url":"https://github.com/apache/lucenenet/pull/1086#issuecomment-2568712689","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1086","id":2568712689,"node_id":"IC_kwDOAAJ06c6ZG3Hx","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-03T05:31:36Z","updated_at":"2025-01-03T05:31:36Z","author_association":"CONTRIBUTOR","body":"A couple of things:\r\n\r\n1. The `.runsettings` file is unnecessary because we can supply the settings on the command line (the same way the other runsettings are applied, i.e. `NUnit.DisplayName=FullName`.\r\n2. This PR assumes the problem only applies to us, but it will also apply to all users of `Lucene.Net.TestFramework`. Arguably, the most useful functionality in `Lucene.Net.TestFramework` is the `BaseTokenStreamTestCase` class, which will have this problem for anyone who uses it. It would not be practical to tell all of our users that they must configure `FullName` in their CI environment to get useful debug info. See my comment about how we can report the class name for all users of the test framework: https://github.com/apache/lucenenet/issues/923#issuecomment-2568702773","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568712689/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568714842","html_url":"https://github.com/apache/lucenenet/pull/1086#issuecomment-2568714842","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1086","id":2568714842,"node_id":"IC_kwDOAAJ06c6ZG3pa","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-03T05:35:50Z","updated_at":"2025-01-03T05:35:50Z","author_association":"CONTRIBUTOR","body":"I'll add in the failure message to print the class name.\r\n\r\nThis fails currently on ADO, wrong path to the runsettings file. I'll replace this with command-line args which will solve the problem. I think it's worthwhile to have it in the test log output and trx file too, not just in the failure message.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568714842/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568724055","html_url":"https://github.com/apache/lucenenet/pull/1086#issuecomment-2568724055","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1086","id":2568724055,"node_id":"IC_kwDOAAJ06c6ZG55X","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-03T05:51:53Z","updated_at":"2025-01-03T05:51:53Z","author_association":"CONTRIBUTOR","body":"> I'll add in the failure message to print the class name.\r\n> \r\n> This fails currently on ADO, wrong path to the runsettings file. I'll replace this with command-line args which will solve the problem. I think it's worthwhile to have it in the test log output and trx file too, not just in the failure message.\r\n\r\nFair enough. I would like to see what the UX looks like without the extra info in the log file, though. Could we make this a parameter that defaults to enabled if not supplied in ADO that allows it to be disabled in a specific ADO pipeline? For example, the properties that are [documented at the top of the `azure-pipelines.yml` file](https://github.com/apache/lucenenet/blob/dbc602c7f872189516dc132045f1cc2b69d5ca7e/azure-pipelines.yml#L37-L52) can all be defined in the pipeline. Perhaps name it `DisplayFullName` and put it under the \"Testing variables\".","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2568724055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2569935508","html_url":"https://github.com/apache/lucenenet/pull/1086#issuecomment-2569935508","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1086","id":2569935508,"node_id":"IC_kwDOAAJ06c6ZLhqU","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-03T23:37:06Z","updated_at":"2025-01-03T23:37:06Z","author_association":"CONTRIBUTOR","body":"Updated to remove the runsettings file; pass `NUnit.DisplayName=FullName` after the `--` in `dotnet test` in GitHub, ADO, and local build scripts; add ability to disable this in ADO; and also add to the GitHub workflows to trigger the workflow on workflow changes (so we don't have to do fake commits). I do like this approach better. It results in nice full test names in the GitHub and ADO logs/trx files by default, and should not interfere with the IDE or anyone's existing runsettings files.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2569935508/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2569939849","html_url":"https://github.com/apache/lucenenet/issues/923#issuecomment-2569939849","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/923","id":2569939849,"node_id":"IC_kwDOAAJ06c6ZLiuJ","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-03T23:45:25Z","updated_at":"2025-01-03T23:45:25Z","author_association":"CONTRIBUTOR","body":"PR #1086 has been updated. Just FYI in case someone discovers this issue later looking for a solution, if you pass `NUnit.DisplayName=FullName` after the `--` separator in `dotnet test` (i.e. `dotnet test {any regular args here} -- NUnit.DisplayName=FullName`), it will work without having a runsettings file. Alternatively, you can set it in a runsettings file if you'd prefer:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RunSettings>\r\n  <NUnit>\r\n    <DisplayName>FullName</DisplayName>\r\n  </NUnit>\r\n</RunSettings>\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2569939849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571250855","html_url":"https://github.com/apache/lucenenet/issues/923#issuecomment-2571250855","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/923","id":2571250855,"node_id":"IC_kwDOAAJ06c6ZQiyn","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-04T10:45:57Z","updated_at":"2025-01-04T10:45:57Z","author_association":"CONTRIBUTOR","body":"Just for reference, the documentation on how to supply runsettings on the command is at: https://github.com/Microsoft/vstest-docs/blob/main/docs/RunSettingsArguments.md. For CI purposes, it is important to note that the syntax varies by shell. We explicitly specify bash as the shell so the command will work on every OS.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571250855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571449801","html_url":"https://github.com/apache/lucenenet/issues/1087#issuecomment-2571449801","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1087","id":2571449801,"node_id":"IC_kwDOAAJ06c6ZRTXJ","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-05T00:20:07Z","updated_at":"2025-01-05T00:20:07Z","author_association":"CONTRIBUTOR","body":"Related: #1088. This item (1087) should probably be done first.\r\n\r\nWe should make sure that is considered when doing this, but I think this will potentially help the #1088 implementation.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571449801/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571613195","html_url":"https://github.com/apache/lucenenet/issues/1077#issuecomment-2571613195","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1077","id":2571613195,"node_id":"IC_kwDOAAJ06c6ZR7QL","user":{"login":"manognya-b","id":100461186,"node_id":"U_kgDOBfzqgg","avatar_url":"https://avatars.githubusercontent.com/u/100461186?v=4","gravatar_id":"","url":"https://api.github.com/users/manognya-b","html_url":"https://github.com/manognya-b","followers_url":"https://api.github.com/users/manognya-b/followers","following_url":"https://api.github.com/users/manognya-b/following{/other_user}","gists_url":"https://api.github.com/users/manognya-b/gists{/gist_id}","starred_url":"https://api.github.com/users/manognya-b/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manognya-b/subscriptions","organizations_url":"https://api.github.com/users/manognya-b/orgs","repos_url":"https://api.github.com/users/manognya-b/repos","events_url":"https://api.github.com/users/manognya-b/events{/privacy}","received_events_url":"https://api.github.com/users/manognya-b/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-05T12:41:08Z","updated_at":"2025-01-05T12:41:08Z","author_association":"CONTRIBUTOR","body":"Update: I've completed the moving of `typeof(SomeType).Name` to `nameof(SomeType)`. I have been looking into opportunities to convert other similiar usages, and had some queries:\r\n1. For usages like `x.GetType().NameSpace` and `x.GetType().Fullname`, where the result generated would be different, I was unable to find equivalents like `nameof(x)`. Is there any alternative I can explore for this?\r\n2. I also wanted some inputs on how to check whether `x.GetType().Name` is sealed or not as manual checking by locating the parent class and looking for the keywords `sealed` or `struct` would be tedious considering the size of the codebase.\r\n\r\nThanks! ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571613195/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571635427","html_url":"https://github.com/apache/lucenenet/issues/1017#issuecomment-2571635427","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1017","id":2571635427,"node_id":"IC_kwDOAAJ06c6ZSArj","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-05T13:56:17Z","updated_at":"2025-01-20T07:51:44Z","author_association":"CONTRIBUTOR","body":"Below is the list of features we are missing in the test framework, which is up for discussion about whether or not we need these  features. Some I thought were clear, but feel free to make a case if you disagree. There are a few additional features listed that I think would be useful, but are not necessarily required. There are some others that are probably the source of some of the bugs we are seeing.\n\nNote that I am listing the features mostly with their Java names. This does not mean we have to implement it exactly how it is in Java because while NUnit provides a rough approximation of the features that JUnit does, it doesn't implement them the same way and does not necessarily provide a 1-to-1 correlation in terms of how things can be extended. So, even though I am listing the TestRule classes, we could ultimately end up with a completely different implementation with similar functionality.\n\nAlso note that whether or not a feature is required may depend on whether or not we implement randomizedtesing (#264). So, that decision could impact this feature list a lot.\n\nThe goal is to move everything to either Needed or Not Needed and then we can open up a GitHub issue for each feature that is Needed.\n\n## Features: Needed\n\n| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Feature&nbsp;Name**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Summary**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                                                                                                   | **Notes**                     |\n|----------------------------------|---------------------------------------------------------------------------------------------------------------------|-------------------------------|\n| Test Rule Chaining (#1088)  | This controls how suite-level and test-level rules are nested. It is important that _all_ rules declared in LuceneTestCase are executed in proper order if they depend on each other. | The JUnit classes should ideally be in the RandomizedTesting namepace, but whether this functionality exists internally in Lucene.Net.TestFramework or is made public and put into RandomizedTesting will need to be decided. Taking control over NUnit to call our chains before everything else and after everything else is a considerable challenge and it may not be possible to do it this way without our own test adapter. |\n| TestRuleMarkFailure (#1094)<hr> SuiteFailureMarker |  Suite failure marker (any error in the test or suite scope). A rule for marking failed tests and suites. | I think we can use NUnit.Framework.Internal.TestResult (which is available from TestExecutionContext.CurrentContext .CurrentResult) to get this data from NUnit.  |\n| TemporaryFilesCleanupRule <hr> tempDirBase |  Cleans up files after running a test. This always runs whether there is an exception or not. | This functionality has been implemented as the LuceneTestCase.CleanupTemporaryFiles() method, but should be changed if we do the Test Rule Chaining.<br><br>NOTE: The tempDirBase is always set to null. This seems like a Lucene bug.  |\n| StaticFieldsInvariantRule |  A TestRule that ensures static, reference fields of the suite class (and optionally its superclasses) are cleaned up after a suite is completed. This is helpful in finding out static memory leaks (a class references something huge but is no longer used). | StaticFieldsInvariantRule is from randomizedtesting.<br><br>We don't have any functionality that cleans up static fields that inherit LuceneTestCase. This sounds important to keep memory from leaking.  |\n| NoClassHooksShadowingRule |  Don't allow BeforeClass and AfterClass hook shadowing as it is most likely a user error. JUnit rules for shadowed hook methods are weird.| NoClassHooksShadowingRule is in randomizedtesting.<br><br>This sounds like something we can make a code analyzer for so this will fail at design time. It is only required because the OneTimeSetUp and OneTimeTearDown methods in Lucene are static and can be shadowed. We currently use inheriance, but are considering reverting to the original design. See #1087. However, we can probably use a Roslyn code analyzer for this so this can be enforced at compile time. Perhaps this could be based on a custom attribute to mark methods that should be scanned for this rule. |\n| TestRuleSetupTeardownChained<hr> parentChainCallRule<br>parentChainCallRule.setupCalled<br>parentChainCallRule.tearDownCalled |  Make sure LuceneTestCase#setUp() and LuceneTestCase#tearDown() were invoked even if they have been overriden. We assume nobody will call these out of non-overriden methods (they have to be public by contract, unfortunately). The top-level methods just set a flag that is checked upon successful execution of each test case. | This can be enforced using a code analyzer. It is important to do if we don't make these methods static (they are virtual in Lucene). See #1087. |\n| TestRuleThreadAndTestName<hr> threadAndTestNameRule<br>IsTestThread | Saves the executing thread and method name of the test case. | We can probably leave the test name up to NUnit using NUnit.Framework.TestContext.CurrentContext .Test.MethodName. But detecting whether the calling thread is the same as the test thread is not currently implemented. Neither is asserting that it is not null. |\n| TestRuleSetupAndRestoreInstanceEnv |  Prepares and restores LuceneTestCase at instance level (fine grained junk that doesn't fit anywhere else). | This only sets the BooleanQuery.MaxClauseCount before every test and restores the original value when the test is finished. Some tests do this explicitly, but I suspect not having it done globally is causing some test conditions to differ from Lucene (bugs).  |\n| TestRuleFieldCacheSanity |  This rule will fail the test if it has insane field caches. ([docs](https://lucene.apache.org/core/4_8_0/test-framework/index.html)) | This is the only thing that calls LuceneTestCase.AssertSaneFieldCaches(), but it is currently not implemented. We should be calling this from the TearDown() method (in the right order) or from a rule chain that is setup with the correct calling order if we implement rule chaining.  |\n| closeAfterTest() (#1094) |  Registers a Closeable resource that should be closed after the test completes. | It probably makes sense in .NET to make methods for both Dispose() and Close(). Dispose() is definitely useful to have. Note this was entirely implemented by randomizedtesting (RandomizedContext).<br><br>This is not called anywhere by Lucene, it is meant for users. It is probably useful and worth having.  |\n| closeAfterSuite()  (#1094)<hr> CloseableDirectory |  Registers a Closeable resource that should be closed after the suite (usually class) completes. | It probably makes sense in .NET to make methods for both Dispose() and Close(). Dispose() is definitely useful to have. Note this was entirely implemented by randomizedtesting (RandomizedContext).<br><br>This is called by LuceneTestCase.wrapDirectory() in Lucene. We are skipping this call in .NET, which is probably leaking resources (maybe even file handles). This may be a contributor to the cascade failures we were seeing during testing. We definitely need this.  |\n| Compound Random Seed | Test seeds are generated based off of a fixture seed. A compound seed combines both seeds into a single string for repeatability.  |  This is the approach that is used in randomizedtesting. Implementing the random seed this way would make seeds that can be used across updates to tests. Currently, if tests are added or removed, it could affect the repeatability of the seeds.  |\n| SuppressTempFileChecksAttribute (#898) |   |  Already in progress.  |\n| [Repeat] attribute (#1106) | A custom [Repeat] attribute that is guaranteed to repeat with the same seed.  | We currently use NUnit's repeat attribute for debugging and in some cases, for CI. This use case appears to work, but has not been thoroughly tested to ensure repeatability. At the very least, we need tests, but we may need a custom attribute to pull this off. NUnit has an ITimeout interface that is undocumented and may or may not serve this purpose (subclassing TimeoutAttribute has already proven not to function).  |\n\n## Features: For Review\n\n| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Feature&nbsp;Name**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Summary**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                                                                                                   | **Notes**                     |\n|----------------------------------|---------------------------------------------------------------------------------------------------------------------|-------------------------------|\n| TestRuleIgnoreAfterMaxFailures <hr> SYSPROP_MAXFAILURES <br> SYSPROP_FAILFAST <br> ignoreAfterMaxFailuresDelegate <br> ignoreAfterMaxFailures <br> replaceMaxFailureRule() <br> TestRuleDelegate |  Ignore tests after hitting a designated number of initial failures. This is truly a \"static\" global singleton since it needs to span the lifetime of all test classes running inside this JVM (it cannot be part of a class rule). <br><br> Optionally skips all of the remaining tests after the first failure. | We may be able to utilize the LuceneTestCase.SetUpFixture or LuceneTestFrameworkInitializer to manage this with NUnit. |\n| STATIC_LEAK_THRESHOLD <hr> STATIC_LEAK_IGNORED_TYPES |  Max 10mb of static data stored in a test suite class after the suite is complete. Prevents static data structures leaking and causing OOMs in subsequent tests.<br><br>By-name list of ignored types like loggers etc |  |\n| RunListenerPrintReproduceInfo <hr>JENKINS_LARGE_LINE_DOCS_FILE |  A suite listener printing a \"reproduce string\". This ensures test result events are always captured properly even if exceptions happen at initialization or suite/ hooks level. | RunListenerPrintReproduceInfo is a JUnit run listener. This prints similar information that we do during a test failure. However, we should review this because there are some things we are not printing out that could be helpful. |\n| TestRuleIgnoreTestSuites  |  This rule will cause the suite to be assumption-ignored if the test class implements a given marker interface and a special property is not set.<br><br>This is a workaround for problems with certain JUnit containers (IntelliJ) which automatically discover test suites and attempt to run nested classes that we use for testing the test framework itself. |  |\n| NoInstanceHooksOverridesRule |  Don't allow Before and After hook overrides as it is most likely a user error and will result in superclass methods not being called (requires manual chaining).  | NoInstanceHooksOverridesRule is in randomizedtesting<br><br>If we implement nested attributes with the same name as NUnit, we can largely avoid this. See #1087. If we need this, I think this would be best enforced using a Roslyn code analyzer (build failure) rather than runtime checks. |\n| FailureMarker<hr> WithNestedTests |  A JUnit RunListener that detects suite/test failures. Lucene needs it because failures due to thread leaks happen outside of any rule contexts.<hr>An abstract test class that prepares nested test classes to run. A nested test class will assume it's executed under control of this class and be ignored otherwise. <br><br>The purpose of this is so that nested test suites don't run from IDEs like Eclipse (where they are automatically detected).  |   |\n| BadAppleAttribute |  Attribute for tests that fail frequently and should be moved to a <a href=\"https://builds.apache.org/job/Lucene-BadApples-trunk-java7/\">\"vault\" plan in Jenkins</a>. | Being that we have AwaitsFixAttribute, this seems like redundant functionality (unless these were never intended to be fixed). Maybe there is a use case for it, though.  |\n\n## Features: For Review (Not in Lucene)\n\n| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Feature&nbsp;Name**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Summary**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                                                                                                   | **Notes**                     |\n|----------------------------------|---------------------------------------------------------------------------------------------------------------------|-------------------------------|\n| RandomizedTesting (#264) |  Dependency of Lucene test-framework that extends JUnit. |  There may be some compelling reasons for implementing this. See:  https://chatgpt.com/share/677a832d-3424-8005-97d7-1c024c68302d |\n| Portable Random Seeds |  Random seeds that produce the same result in both .NET and Java. |  This would be very useful for debugging if we can achieve it. However, the benefit may not be worth the cost of pulling it off. |\n| Enforce Custom Asserts | Provide build warnings for using NUnit asserts due to performance problems.  |  Our `Assert` class performs much better for collections and numeric types than NUnit does. Enforcing its usage using a Roslyn code analyzer would save us work of having to hunt down violations manually. This would be useful whether or not we finish #306, but it would be better if we finished that task first (or even consider moving it over to RandomizedTesting or another package). |\n| Disallow using NUnit TestFixtureAttribute | Enforce the use of the custom TestFixtureAttribute when subclassing LuceneTestCase | Using NUnit's TestFixtureAttribute will bypass some of the test framework setup, which will affect repeatability of random tests and probably cause other problems. Users should get build failures if they attempt this. They are free to use it on classes that do not extend LuceneTestCase, though.  |\n| Disallow using NUnit OneTimeSetUpAttribute and OneTimeTearDownAttribute | Enforce the use of the custom OneTimeSetUpAttribute  and OneTimeTearDownAttribute when subclassing LuceneTestCase | Using NUnit's OneTimeSetUpAttribute  or OneTimeTearDownAttribute will cause setup problems with the test framework because NUnit could call the user's class first. Users should get build failures if they attempt this. They are free to use it on classes that do not extend LuceneTestCase, though. This depends on #1087.  |\n\n\n\n## Features: Not Needed\n\n| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Feature&nbsp;Name**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Summary**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                                                                                                   | **Notes**                     |\n|----------------------------------|---------------------------------------------------------------------------------------------------------------------|-------------------------------|\n| SystemPropertiesInvariantRule <hr> STATIC_LEAK_IGNORED_TYPES |  These property keys will be ignored in verification of altered properties.<br><br>A TestRule that ensures system properties remain unmodified by the nested Statement. This can be applied both at suite level and at test level.<br><br>This rule requires appropriate security permission to read and write system properties System#getProperties() if running under a security manager. | SystemPropertiesInvariantRule is in randomizedtesting.<br><br>The values are { \"user.timezone\", \"java.rmi.server.randomIDs\" }, so this doesn't appear very useful in .NET since we don't have BCL system properties and time zone is not something that can be set on a given thread. Also, our system properties are readonly inside of the application (we only provide a default value if the system property is not supplied on the outside of the application), so there is no danger of a user overwriting them at runtime.  |\n| TestRuleStoreClassName<hr> ClassNameRule |  Stores the suite name so you can retrieve it from getTestClass() | I don't think this is needed because NUnit tracks the name of the test class and keeps it in scope already.  |\n| TestRuleAssertionsRequired |  Verifies that the caller passed the system property to enable assertions. | Being that the default setting when the test framework is engaged is true and we also fixed the tests so it is possible to run them (skipping some) with asserts disabled, we don't need this unless it is required by randomizedtesting for some reason. It is unlikely many users of the test framework will even be aware of this feature.  |\n| LuceneJUnit3MethodProvider |  Backwards compatible test* method provider (public, non-static). | This is a helper class to provide JUnit3 naming functionality to later versions of JUnit to scan for tests (by name, not by attribute). Java-specific. Not needed.  |\n| QuickPatchThreadsFilter |  Last minute patches. TODO: remove when integrated in system filters in rr. | This appears to be Java-specific and temporary. It was only used by SOLR. We don't need this. |\n| RemoveUponClose |  A Closeable that attempts to remove a given file/folder. | This removes a specific file, but only if the test was successful. Not sure what the point is. There are no references and it is internal. We don't need it. |\n| Rethrow |  Sneaky: rethrowing checked exceptions as unchecked ones. Eh, it is sometimes useful...<br><br>Pulled from <a href=\"http://www.javapuzzlers.com\">Java Puzzlers</a>. see \"http://www.amazon.com/Java-Puzzlers-Traps-Pitfalls-Corner/dp/032133678X\" | This only applies to Java because in .NET we don't have checked exceptions. We don't need it. In all cases we can remove the try/catch altogether. |\n| TestSecurityManager |  A SecurityManager that prevents tests calling System#exit(int). Only the test runner itself is allowed to exit the JVM.<br><br>Use this with -Djava.security.manager= org.apache.lucene.util.TestSecurityManager. | We don't need this because we don't have our own custom test runner. Given that a stand alone console app to run tests is not likely something that will ever exist even if we do implement randomizedtesting, we probably don't need it. |","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571635427/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571652872","html_url":"https://github.com/apache/lucenenet/issues/264#issuecomment-2571652872","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/264","id":2571652872,"node_id":"IC_kwDOAAJ06c6ZSE8I","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-05T14:54:14Z","updated_at":"2025-01-05T14:54:14Z","author_association":"CONTRIBUTOR","body":"There may be some compelling reasons that make RandomizedTesting useful for Lucene.NET: https://chatgpt.com/share/677a832d-3424-8005-97d7-1c024c68302d.\r\n\r\nThere are a few features that Lucene uses that we don't have (such as running tests in random order and varying other parts of the test run). However, one benefit that makes a slightly stronger case for it: It would provide a level of indirection between NUnit's release schedule and Lucene.NET's schedule. In theory, we could roll out a new version of RandomizedTesting to keep up with NUnit changes without forcing us to also update Lucene.NET.\r\n\r\nWhile at this point I still think it is not required for the release of Lucene.NET 4.8.0, even with the latest update on #1017, it does mean that everything that we import from RandomizedTesting should be made internal and not available for end users. This is a must if we are going to expose it publicly later in another library. Ideally, we would move everything into the RandomizedTesting namespace and physically separate it from the test framework to make it less of a burden to make public later.\r\n\r\nRandomizedTesting in Java is implemented as a test runner. Based on my experience with setting up tests on Xamarin, I think if we did do a port of it, it should be implemented as a test runner that has a separate test adapter package (unfortunately, a test adapter is required for a custom runner, so we would need both). Separating them allows for a broader range of use cases than just plugging it into .NET Core or.NET Framework (such as building a custom console app to extend the functionality) or using it in some past or future runtime.\r\n\r\nHaving our own test adapter is the only way we can take charge of NUnit instead of having NUnit drive everything. I don't think there is anything we can extend in the execution layer of NUnit without a test adapter, which is the only way we would be able to change how threads and/or tasks are implemented or to change the order of test execution in a repeatable random way.\r\n\r\nAlso note that there already is a NuGet package ID for [RandomizedTesting](https://www.nuget.org/packages/RandomizedTesting) and a project in the [RandomizedTesting repository](https://github.com/NightOwl888/RandomizedTesting/tree/main/src/RandomizedTesting). It wouldn't be very difficult to configure it to release one package at a time each with their own version.\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571652872/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571682867","html_url":"https://github.com/apache/lucenenet/issues/1077#issuecomment-2571682867","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1077","id":2571682867,"node_id":"IC_kwDOAAJ06c6ZSMQz","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-05T16:36:47Z","updated_at":"2025-01-05T16:36:47Z","author_association":"CONTRIBUTOR","body":"Great! I do not think there is a better option for Namespace and FullName. No worries there.\r\n\r\nFor `.GetType().Name`, perhaps my idea is not the best. It might make maintenance more difficult in the future if the type of the variable changes in later versions of Lucene. My original thinking was that if `x` was a struct or primitive type like `int`, or `string`, or a sealed class type, then it can't be anything else at runtime, so might as well use `nameof` with the type of `x`. There would not be a need to look at the parent classes, because a parent class by definition can't be sealed. But I hadn't considered the maintenance aspect. Unless you think it's worthwhile to do, I'm good with skipping that for now. \r\n\r\n(Aside: this is where it would be nice if C# had an equivalent of C++'s `decltype` specifier, so we could do `nameof(decltype(x))` to make this a compile-time evaluation, but alas, that's not a thing, yet.)\r\n\r\nIf you feel good that you've captured all occurrences, I look forward to reviewing your PR when you're ready. Thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2571682867/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2572275370","html_url":"https://github.com/apache/lucenenet/issues/921#issuecomment-2572275370","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/921","id":2572275370,"node_id":"IC_kwDOAAJ06c6ZUc6q","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-06T04:56:00Z","updated_at":"2025-01-06T04:56:00Z","author_association":"CONTRIBUTOR","body":"I reviewed all use of ToString overrides, and determined that nothing needs to be done here. If anyone else disagrees or finds anything actionable, let me know.\r\n\r\nBelow are the overrides that use raw booleans in the output string. In almost all cases, these simply seem to be for diagnostic/debugging output, and not for anything where the value is expected to be parsed or otherwise converted (in whole or in part) back to boolean values. \"debug\" below means that it is intended as debug output only. \"not used\" means it does not have any references to it in Lucene.NET code.\r\n\r\nTypes that use bool values directly in `ToString()` output:\r\n- LimitTokenCountAnalyzer - debug, not used\r\n- MemoryPostingsFormat - debug, not used\r\n- ProximityQueryNode - debug; interface denotes it's \"for printing\", not used\r\n- RandomSimilarityProvider - debug, not used\r\n- DocumentsWriterPerThread - debug, not used\r\n- LiveIndexWriterConfig - debug, used by IndexWriterConfig, but that usage is only used in a test. Used by IndexWriter just to write to infoStream.\r\n- LogMergePolicy - debug, not used\r\n- ReadersAndUpdates - debug, not used\r\n- FieldValueFilter - debug, not used\r\n- (potentially?) SortField - if m_missingValue is a boolean - used in various places, but nothing seems to indicate it would be affected as where it is used is i.e. looking for specific values\r\n- IOContext - debug, not used\r\n- MergeInfo - debug, not used\r\n- AttributeImpl - debug, but also LUCENENET specific, so no Java compat concerns\r\n- AttributeSource via ReflectAsString - only used in tests, ToString not used. ToString is debug output, ReflectAsString generally seems to be debug output and not intended as a serious form of serialization (for example, some strings would cause unparseable output)\r\n\r\nThen, there are the Query overrides where it has a `string field` parameter, like the one that triggered the creation of this issue originally. I reviewed all usages of `Query.ToString(string field)` as well as `Query.ToString()` (which calls the former with `\"\"` as the parameter), and these also are only used for debug output and in assertion messages. It does not seem like it is intended to generate a parseable query string, and if it were intended to do so it seems like there would be several issues with this in the derived classes, like not properly escaping string values. So I think these can be safely ignored.\r\n\r\nQuery overrides of `ToString(string field)` containing booleans:\r\n- PayloadNearQuery\r\n- SpanNearQuery","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2572275370/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2573832287","html_url":"https://github.com/apache/lucenenet/issues/1090#issuecomment-2573832287","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1090","id":2573832287,"node_id":"IC_kwDOAAJ06c6ZaZBf","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-06T20:06:00Z","updated_at":"2025-01-06T21:21:58Z","author_association":"CONTRIBUTOR","body":"I have a theory. We added a hack to the original calculation because if the file size of the last buffer was 0, it would throw an `UnauthorizedAccessException`. We changed the offset to subtract 1 in this case.\r\n\r\nhttps://github.com/apache/lucenenet/blob/master/src/Lucene.Net/Store/MMapDirectory.cs#L331-L338\r\n\r\nBut I am not sure the hack makes sense to begin with.\r\n\r\nThe original logic was to allocate a zero byte buffer at the end:\r\n\r\nhttps://github.com/apache/lucenenet/blob/master/src/Lucene.Net/Store/MMapDirectory.cs#L307-L308\r\n\r\nSo, that was intended to be the case, but Microsoft doesn't allow such a thing. However, rather than doing whacky math with the offset, it would probably make more sense to skip the call to the BCL API when the last buffer length is 0, and instead allocate it like:\r\n\r\n```c#\r\nbuffers[bufNr] = ByteBuffer.Allocate(0).AsReadOnlyBuffer()\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2573832287/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2574343701","html_url":"https://github.com/apache/lucenenet/issues/1090#issuecomment-2574343701","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1090","id":2574343701,"node_id":"IC_kwDOAAJ06c6ZcV4V","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-07T03:56:47Z","updated_at":"2025-01-07T03:56:47Z","author_association":"CONTRIBUTOR","body":"I can't easily reproduce this one with that seed, which points to a concurrency bug (or at least one that is not reproducible due to concurrency), and that is indicated by the use of ThreadJobs in the test. But I think your theory is sound here, it lines up with the message and stack trace (assuming aggressive inlining likely from PGO), and the solution makes sense to me. I also reviewed ByteBufferIndexInput just to be on the safe side, and since `Remaining` would be 0 for an empty byte buffer, it should not cause any problems (and the code above it returns that anyways if length is 0). I'll get a PR for this one.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2574343701/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2574368190","html_url":"https://github.com/apache/lucenenet/issues/1090#issuecomment-2574368190","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1090","id":2574368190,"node_id":"IC_kwDOAAJ06c6Zcb2-","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-07T04:27:20Z","updated_at":"2025-01-07T04:27:20Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Actually, once I started digging into this, I'm no longer sure about that. I think the exception is coming from here:\r\n\r\n```c#\r\n            if (input.memoryMappedFile is null)\r\n            {\r\n                input.memoryMappedFile = MemoryMappedFile.CreateFromFile(\r\n                    fileStream: fc,\r\n                    mapName: null,\r\n                    capacity: length,\r\n                    access: MemoryMappedFileAccess.Read,\r\n#if FEATURE_MEMORYMAPPEDFILESECURITY\r\n                    memoryMappedFileSecurity: null,\r\n#endif\r\n                    inheritability: HandleInheritability.Inheritable,\r\n                    leaveOpen: true); // LUCENENET: We explicitly dispose the FileStream separately.\r\n            }\r\n```\r\n\r\nThis is the place where `MemoryMappedFile.CreateCore` could be inlined, and it also does the `capacity` parameter check. (The later call with the \"adjust\" math ultimately calls CreateViewAccessor which does not have a capacity. I do think we can still do what you suggest, though.) I can't currently explain the failure, because the capacity is just set to the FileStream length, and that is also what that method checks for internally, so they should be equal - that is, unless the FileStream changed length somehow between the MMapIndexInput ctor and the call to CreateFromFile... if that is true, we could pass `fc.Length` instead of `length` as the capacity to help cut down on the likelihood of that changing, but probably wouldn't eliminate it. Let me know if I'm missing something on this or if you have any other ideas.\r\n\r\nWhere it throws the exception in `MemoryMappedFile.VerifyMemoryMappedFileAccess`:\r\n\r\n```c#\r\nif (fileSize > capacity)\r\n{\r\n    throw new ArgumentOutOfRangeException(nameof(capacity), SR.ArgumentOutOfRange_CapacityGEFileSizeRequired);\r\n}\r\n```\r\nhttps://source.dot.net/#System.IO.MemoryMappedFiles/System/IO/MemoryMappedFiles/MemoryMappedFile.Unix.cs,26","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2574368190/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2574381919","html_url":"https://github.com/apache/lucenenet/issues/984#issuecomment-2574381919","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/984","id":2574381919,"node_id":"IC_kwDOAAJ06c6ZcfNf","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-07T04:43:06Z","updated_at":"2025-01-07T04:43:06Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 I'm reviewing the J2N read-only collections code to make sure I understand, and I'm not sure how this is true: \"Each of the read only collections in J2N has a \"Default\" mode, which kicks in if the type being passed in is a J2N collection, where the rules of structural equality are defined.\"\r\n\r\nIt appears to me like these go into Default mode if the generic type arguments are a value type, IStructuralEquatable, or string, regardless of the concrete collection type passed in: https://github.com/NightOwl888/J2N/blob/8845a696e2cd3e2ca0752823c779c72aa7f0e5a1/src/J2N/Collections/ObjectModel/ReadOnlyList.cs#L67\r\n\r\nThis does not seem to be dependent on the collection being a J2N collection. It appears as if passing i.e. a `System.Collections.Generic.List<string>` would meet that criteria for `Default`. Let me know if I'm missing something. Thanks!","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2574381919/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2574409708","html_url":"https://github.com/apache/lucenenet/issues/1090#issuecomment-2574409708","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1090","id":2574409708,"node_id":"IC_kwDOAAJ06c6Zcl_s","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-07T05:16:06Z","updated_at":"2025-01-07T05:16:06Z","author_association":"CONTRIBUTOR","body":"The cast here is potentially a problem: https://github.com/apache/lucenenet/blob/master/src/Lucene.Net/Store/MMapDirectory.cs#L329\r\n\r\nIt can overflow `int` because the original value is `long`. We might also want to check the math on `nrBuffers` to make sure that is right, also. There were significant gaps between Java and .NET here, so we were making it up as we went along.\r\n\r\nOne thing to note is that `length` on `ByteBuffer` is `int`, but `MMapDirectory` always uses `long`, so indexing into it might be overflowing (although, I would think the chunk size would be small enough so that isn't a problem). But a similar overflow problem could be creeping in because of this gap.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2574409708/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2576056706","html_url":"https://github.com/apache/lucenenet/pull/1091#issuecomment-2576056706","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1091","id":2576056706,"node_id":"IC_kwDOAAJ06c6Zi4GC","user":{"login":"manognya-b","id":100461186,"node_id":"U_kgDOBfzqgg","avatar_url":"https://avatars.githubusercontent.com/u/100461186?v=4","gravatar_id":"","url":"https://api.github.com/users/manognya-b","html_url":"https://github.com/manognya-b","followers_url":"https://api.github.com/users/manognya-b/followers","following_url":"https://api.github.com/users/manognya-b/following{/other_user}","gists_url":"https://api.github.com/users/manognya-b/gists{/gist_id}","starred_url":"https://api.github.com/users/manognya-b/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manognya-b/subscriptions","organizations_url":"https://api.github.com/users/manognya-b/orgs","repos_url":"https://api.github.com/users/manognya-b/repos","events_url":"https://api.github.com/users/manognya-b/events{/privacy}","received_events_url":"https://api.github.com/users/manognya-b/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-07T19:22:03Z","updated_at":"2025-01-07T19:22:03Z","author_association":"CONTRIBUTOR","body":"Thank you for reviewing my PR! I've taken your comments into consideration and made the required changes, hopefully the code looks good now. The cases where I had to revert were very interesting and I appreciated the insights into why each change was requested as it gave me more context into the workings of runtime behaviour for those specific functionalities. Open to making more changes if required!\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2576056706/reactions","total_count":3,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2576136806","html_url":"https://github.com/apache/lucenenet/issues/1077#issuecomment-2576136806","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1077","id":2576136806,"node_id":"IC_kwDOAAJ06c6ZjLpm","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-07T20:10:23Z","updated_at":"2025-01-07T20:10:23Z","author_association":"CONTRIBUTOR","body":"Fixed by #1091 ","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2576136806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2581662815","html_url":"https://github.com/apache/lucenenet/pull/1089#issuecomment-2581662815","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1089","id":2581662815,"node_id":"IC_kwDOAAJ06c6Z4Qxf","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-10T03:19:46Z","updated_at":"2025-01-10T03:19:46Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 In regards to:\r\n\r\n> For the Encoding-derived classes, the default fallback character is ?, but in Java it is \\uFFFD. The new System.Text.Unicode.Utf8 class uses the same default fallback character as in Java.\r\n\r\nThis is only true for `Encoding.ASCII` (at least amongst those defined on `Encoding`). `Encoding.UTF8` by default returns `\\uFFFD` (from csharprepl):\r\n\r\n```\r\n> Encoding.ASCII.GetString(new byte[] { 0xc3 })\r\n\"?\"\r\n> Encoding.UTF8.GetString(new byte[] { 0xc3 })\r\n\"�\"\r\n> Encoding.UTF8.GetString(new byte[] { 0xc3 })[0] == '\\ufffd'\r\ntrue\r\n```\r\nI confirmed this is the case on net462 as well.\r\n\r\nThe only place in non-test code where `Encoding.ASCII` is used is in ConnectionCostsBuilder, and that doesn't matter because this PR changes it to throw on invalid characters anyways. \r\n\r\nGiven that the rest of the places we use UTF8, I don't think we need to make that change.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2581662815/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585058944","html_url":"https://github.com/apache/lucenenet/pull/1089#issuecomment-2585058944","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1089","id":2585058944,"node_id":"IC_kwDOAAJ06c6aFN6A","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-11T04:19:29Z","updated_at":"2025-01-11T04:19:29Z","author_association":"CONTRIBUTOR","body":"The change to the tests exposed something else to fix: Java's standard Charsets will throw on malformed input and unmappable characters by default, meaning `CodingErrorAction.REPORT` is already the default. In .NET, the default encodings replace instead of throw, but our `StandardCharsets.UTF_8`/`IOUtils.ENCODING_UTF_8_NO_BOM` is already set up to match Java in this behavior. That means we do need to explicitly use DecoderReplacementFallback for those tests mentioned above in \"Explicit Encoding Char Replacement\" if we use `StandardCharsets.UTF_8`, and will likely need another extension method. But more importantly, this means that any place in Lucene that uses a Charset without specifying `CodingErrorAction.REPLACE`, we need to use one that throws (such as our `StandardCharsets.UTF_8` support value), or else we are not throwing on invalid byte sequences when Lucene is (i.e. if we use `Encoding.UTF8`). I'll get this change made tomorrow.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585058944/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585170593","html_url":"https://github.com/apache/lucenenet/pull/1089#issuecomment-2585170593","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1089","id":2585170593,"node_id":"IC_kwDOAAJ06c6aFpKh","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-11T09:23:25Z","updated_at":"2025-01-11T09:23:25Z","author_association":"CONTRIBUTOR","body":"It appears that there is a difference between the default when using:\r\n\r\n- `StandardCharsets.UTF_8`\r\n- `StandardCharsets.UTF_8.newDecoder()`\r\n\r\nThe default behavior of the latter is `CodingErrorAction.REPORT`, but the same is not true when using the former (which is how Lucene normally passes it to other APIs).\r\n\r\n```java\r\n  @Test\r\n  public void testDefaultUTF8DecoderWithInvalidBytes() {\r\n      // Define a mix of valid and invalid UTF-8 bytes\r\n      byte[] testBytes = {\r\n              (byte) 0xE2, (byte) 0x82, (byte) 0xAC, // Valid UTF-8 for €\r\n              (byte) 0xC3, (byte) 0xA9,             // Valid UTF-8 for é\r\n              (byte) 0xFF,                          // Invalid byte\r\n              (byte) 0x41,                          // Valid ASCII for 'A'\r\n              (byte) 0x80,                          // Invalid byte\r\n              (byte) 0xF0, (byte) 0x9F, (byte) 0x92, (byte) 0x96 // Valid UTF-8 for 💖\r\n      };\r\n\r\n      // Decode the bytes using the default UTF-8 behavior\r\n      String decodedString = new String(testBytes, StandardCharsets.UTF_8);\r\n\r\n      // Print each character and its code point\r\n      System.out.println(\"Decoded String Code Points: \");\r\n      for (int i = 0; i < decodedString.length(); i++) {\r\n          System.out.printf(\"Character at position %d: %d%n\", i, (int) decodedString.charAt(i));\r\n      }\r\n      \r\n      // Verify the decoded string (replacement character appears at invalid bytes)\r\n      assertEquals(\"€é\\uFFFDA\\uFFFD💖\", decodedString);\r\n  }\r\n```","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585170593/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585330687","html_url":"https://github.com/apache/lucenenet/pull/1089#issuecomment-2585330687","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1089","id":2585330687,"node_id":"IC_kwDOAAJ06c6aGQP_","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-11T16:46:17Z","updated_at":"2025-01-11T16:46:17Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Good catch, thanks. I'll look out for any `newDecoder`/`newEncoder` usage that might use the defaults.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585330687/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585379391","html_url":"https://github.com/apache/lucenenet/pull/1089#issuecomment-2585379391","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1089","id":2585379391,"node_id":"IC_kwDOAAJ06c6aGcI_","user":{"login":"paulirwin","id":1874103,"node_id":"MDQ6VXNlcjE4NzQxMDM=","avatar_url":"https://avatars.githubusercontent.com/u/1874103?v=4","gravatar_id":"","url":"https://api.github.com/users/paulirwin","html_url":"https://github.com/paulirwin","followers_url":"https://api.github.com/users/paulirwin/followers","following_url":"https://api.github.com/users/paulirwin/following{/other_user}","gists_url":"https://api.github.com/users/paulirwin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulirwin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulirwin/subscriptions","organizations_url":"https://api.github.com/users/paulirwin/orgs","repos_url":"https://api.github.com/users/paulirwin/repos","events_url":"https://api.github.com/users/paulirwin/events{/privacy}","received_events_url":"https://api.github.com/users/paulirwin/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-11T19:10:16Z","updated_at":"2025-01-11T19:10:16Z","author_association":"CONTRIBUTOR","body":"@NightOwl888 Updated with feedback. There were no other cases where `newDecoder`/`newEncoder` were used that needed to be addressed.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585379391/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585607178","html_url":"https://github.com/apache/lucenenet/issues/1098#issuecomment-2585607178","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1098","id":2585607178,"node_id":"IC_kwDOAAJ06c6aHTwK","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-12T06:27:03Z","updated_at":"2025-01-12T06:27:03Z","author_association":"CONTRIBUTOR","body":"Thanks. I wasn't aware that `StackTraceHelper` was public and we definitely shouldn't be encouraging users to write tests that check the stack trace, so let's mark it internal.\r\n\r\nOf course, if we can come up with an alternative to checking the stack trace for places where Lucene used it, suggestions are welcome. Sometimes the method we are looking for is several levels up the stack from where we are looking for it.\r\n\r\nUsing the `nameof()` operator assumes that we know the specific method that is supposed to be calling us, but generally we don't.  We only have the strings that we got from Lucene. We could take a best guess, but that would be misleading if we guess wrong. Of course, now that we have running tests, we can probably pause or do logging and work it out in the more trivial cases, but it is going to take more time to do than suppressing the warning.\r\n\r\nSince we have dropped support for .NET Standard 1.x which had a lot of code to work around the lack of stack trace support, maybe we should eliminate the `StackTraceHelper` and put the translated code inline. It would improve performance in some cases, for example in `TestConcurrentMergeScheduler`, Lucene has:\r\n\r\n![image](https://github.com/user-attachments/assets/e418e802-0060-4bcf-acf3-491c17d4286c)\r\n\r\nPutting the stack trace code inline would allow us to check the stack for both strings at once and exit as soon as both are found.\r\n\r\nBut as you can see, these are some really common method names. Without knowing specifically which one Lucene is scanning for, we must put `[MethodImpl(MethodImplOptions.NoInlining)]` on all `Flush` methods to ensure the test will pass. I think in this case we looked up which specific `Dispose()` method required no inlining, since it would be impractical and cause performance issues if we did that to all of them.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585607178/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585639989","html_url":"https://github.com/apache/lucenenet/pull/1099#issuecomment-2585639989","issue_url":"https://api.github.com/repos/apache/lucenenet/issues/1099","id":2585639989,"node_id":"IC_kwDOAAJ06c6aHbw1","user":{"login":"NightOwl888","id":1538288,"node_id":"MDQ6VXNlcjE1MzgyODg=","avatar_url":"https://avatars.githubusercontent.com/u/1538288?v=4","gravatar_id":"","url":"https://api.github.com/users/NightOwl888","html_url":"https://github.com/NightOwl888","followers_url":"https://api.github.com/users/NightOwl888/followers","following_url":"https://api.github.com/users/NightOwl888/following{/other_user}","gists_url":"https://api.github.com/users/NightOwl888/gists{/gist_id}","starred_url":"https://api.github.com/users/NightOwl888/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NightOwl888/subscriptions","organizations_url":"https://api.github.com/users/NightOwl888/orgs","repos_url":"https://api.github.com/users/NightOwl888/repos","events_url":"https://api.github.com/users/NightOwl888/events{/privacy}","received_events_url":"https://api.github.com/users/NightOwl888/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2025-01-12T08:28:32Z","updated_at":"2025-01-12T08:28:32Z","author_association":"CONTRIBUTOR","body":"Oh, I didn't notice it is still a draft. Feel free to re-request a review when the PR is ready.","reactions":{"url":"https://api.github.com/repos/apache/lucenenet/issues/comments/2585639989/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null}]