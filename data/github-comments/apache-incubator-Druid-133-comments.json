[{"url":"https://api.github.com/repos/apache/druid/issues/comments/285240888","html_url":"https://github.com/apache/druid/pull/3998#issuecomment-285240888","issue_url":"https://api.github.com/repos/apache/druid/issues/3998","id":285240888,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTI0MDg4OA==","user":{"login":"JackyWoo","id":3991709,"node_id":"MDQ6VXNlcjM5OTE3MDk=","avatar_url":"https://avatars.githubusercontent.com/u/3991709?v=4","gravatar_id":"","url":"https://api.github.com/users/JackyWoo","html_url":"https://github.com/JackyWoo","followers_url":"https://api.github.com/users/JackyWoo/followers","following_url":"https://api.github.com/users/JackyWoo/following{/other_user}","gists_url":"https://api.github.com/users/JackyWoo/gists{/gist_id}","starred_url":"https://api.github.com/users/JackyWoo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JackyWoo/subscriptions","organizations_url":"https://api.github.com/users/JackyWoo/orgs","repos_url":"https://api.github.com/users/JackyWoo/repos","events_url":"https://api.github.com/users/JackyWoo/events{/privacy}","received_events_url":"https://api.github.com/users/JackyWoo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T03:01:30Z","updated_at":"2017-03-09T03:01:30Z","author_association":"CONTRIBUTOR","body":"@pjain1 The CLA is signed. \r\n I have tested the feature in my cluster and it works well.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285240888/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285240936","html_url":"https://github.com/apache/druid/issues/3892#issuecomment-285240936","issue_url":"https://api.github.com/repos/apache/druid/issues/3892","id":285240936,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTI0MDkzNg==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T03:01:48Z","updated_at":"2017-03-09T03:01:48Z","author_association":"CONTRIBUTOR","body":"@leventov \r\n\r\n> wrap(ByteBuffer) should inherit endianness from the buffer.\r\n\r\nUntil I figure out how exactly I want to do endianness, the current Memory is only NE.  So, for now, attempting to wrap a BE BB is an error, which it now checks.\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285240936/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285241175","html_url":"https://github.com/apache/druid/pull/3991#issuecomment-285241175","issue_url":"https://api.github.com/repos/apache/druid/issues/3991","id":285241175,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTI0MTE3NQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T03:03:38Z","updated_at":"2017-03-09T03:03:38Z","author_association":"CONTRIBUTOR","body":"LGTM!","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285241175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285241466","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285241466","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285241466,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTI0MTQ2Ng==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T03:05:42Z","updated_at":"2017-03-09T03:05:42Z","author_association":"CONTRIBUTOR","body":"The growable stuff would be useful for theta sketches too, even though they don't strictly need it, it would still potentially save a lot of space.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285241466/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285242230","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285242230","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285242230,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTI0MjIzMA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T03:11:24Z","updated_at":"2017-03-09T03:11:24Z","author_association":"CONTRIBUTOR","body":"Hmm, trying to keep things simple for 0.10.0 but hopefully nicer in the future, how do you all feel about the following:\r\n\r\n- For 0.10.0 add a `relocate()` method to BufferAggregator, that when called, tells the BufferAggregator that its state has been relocated somewhere and it should throw away any position based caches it has.\r\n\r\n- Post 0.10.0, deprecate that `relocate()` method, improve Union creation for theta sketches, and implement growable space for BufferAggregators, which together should get rid of the need for BufferAggregators to be storing state outside the buffer.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285242230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285251419","html_url":"https://github.com/apache/druid/issues/4027#issuecomment-285251419","issue_url":"https://api.github.com/repos/apache/druid/issues/4027","id":285251419,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTI1MTQxOQ==","user":{"login":"niketh","id":626548,"node_id":"MDQ6VXNlcjYyNjU0OA==","avatar_url":"https://avatars.githubusercontent.com/u/626548?v=4","gravatar_id":"","url":"https://api.github.com/users/niketh","html_url":"https://github.com/niketh","followers_url":"https://api.github.com/users/niketh/followers","following_url":"https://api.github.com/users/niketh/following{/other_user}","gists_url":"https://api.github.com/users/niketh/gists{/gist_id}","starred_url":"https://api.github.com/users/niketh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/niketh/subscriptions","organizations_url":"https://api.github.com/users/niketh/orgs","repos_url":"https://api.github.com/users/niketh/repos","events_url":"https://api.github.com/users/niketh/events{/privacy}","received_events_url":"https://api.github.com/users/niketh/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T04:27:21Z","updated_at":"2017-03-09T04:27:21Z","author_association":"CONTRIBUTOR","body":"@leventov I had a chat with @cheddar a couple of weeks ago while figuring a way around this. Both of us felt it was better to submit a PR with Memory against Roaring repo","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285251419/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285270869","html_url":"https://github.com/apache/druid/issues/4025#issuecomment-285270869","issue_url":"https://api.github.com/repos/apache/druid/issues/4025","id":285270869,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTI3MDg2OQ==","user":{"login":"akashdw","id":5886276,"node_id":"MDQ6VXNlcjU4ODYyNzY=","avatar_url":"https://avatars.githubusercontent.com/u/5886276?v=4","gravatar_id":"","url":"https://api.github.com/users/akashdw","html_url":"https://github.com/akashdw","followers_url":"https://api.github.com/users/akashdw/followers","following_url":"https://api.github.com/users/akashdw/following{/other_user}","gists_url":"https://api.github.com/users/akashdw/gists{/gist_id}","starred_url":"https://api.github.com/users/akashdw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akashdw/subscriptions","organizations_url":"https://api.github.com/users/akashdw/orgs","repos_url":"https://api.github.com/users/akashdw/repos","events_url":"https://api.github.com/users/akashdw/events{/privacy}","received_events_url":"https://api.github.com/users/akashdw/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T06:55:21Z","updated_at":"2017-03-09T09:08:57Z","author_association":"CONTRIBUTOR","body":"@gianm @naman-aasaan We ran into a very similar situation. In short, issue reported in https://github.com/druid-io/druid/issues/3997 caused bad entries in metadata.\r\n1. Issue reported in #3997 caused mm’s to think other instance of realtime wrote data into hdfs and tasks ended up writing segment metadata with hdfs location of non existing paths. \r\n2. Coordinator assigns those bad entries to Historical.\r\n3. Historical's were not able to pull data from those (non existing)paths and coordinator keeps assigning those segments to some other historical.\r\n\r\nThis behavior continued even after the druid 0.10.0 revert i.e coordinator assigns those segments (b/c of bad entries) to some historical's and ended up spending most of the time on those assignments. we updated the metadata entries in mysql and did a backfill to recover from this corruption.\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285270869/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285307926","html_url":"https://github.com/apache/druid/issues/4025#issuecomment-285307926","issue_url":"https://api.github.com/repos/apache/druid/issues/4025","id":285307926,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTMwNzkyNg==","user":{"login":"arpankhagram","id":20059251,"node_id":"MDQ6VXNlcjIwMDU5MjUx","avatar_url":"https://avatars.githubusercontent.com/u/20059251?v=4","gravatar_id":"","url":"https://api.github.com/users/arpankhagram","html_url":"https://github.com/arpankhagram","followers_url":"https://api.github.com/users/arpankhagram/followers","following_url":"https://api.github.com/users/arpankhagram/following{/other_user}","gists_url":"https://api.github.com/users/arpankhagram/gists{/gist_id}","starred_url":"https://api.github.com/users/arpankhagram/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arpankhagram/subscriptions","organizations_url":"https://api.github.com/users/arpankhagram/orgs","repos_url":"https://api.github.com/users/arpankhagram/repos","events_url":"https://api.github.com/users/arpankhagram/events{/privacy}","received_events_url":"https://api.github.com/users/arpankhagram/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T10:01:07Z","updated_at":"2017-03-09T10:01:07Z","author_association":"NONE","body":"Hi Gian/Akash, It looks to be working fine after upgradation to rc2 snapshot of 0.10 release.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285307926/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285367678","html_url":"https://github.com/apache/druid/pull/4031#issuecomment-285367678","issue_url":"https://api.github.com/repos/apache/druid/issues/4031","id":285367678,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTM2NzY3OA==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T14:35:06Z","updated_at":"2017-03-09T14:35:06Z","author_association":"CONTRIBUTOR","body":"👍 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285367678/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285385135","html_url":"https://github.com/apache/druid/pull/4031#issuecomment-285385135","issue_url":"https://api.github.com/repos/apache/druid/issues/4031","id":285385135,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTM4NTEzNQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T15:34:44Z","updated_at":"2017-03-09T15:34:44Z","author_association":"CONTRIBUTOR","body":"👍 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285385135/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285405799","html_url":"https://github.com/apache/druid/issues/4025#issuecomment-285405799","issue_url":"https://api.github.com/repos/apache/druid/issues/4025","id":285405799,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQwNTc5OQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T16:38:54Z","updated_at":"2017-03-09T16:38:54Z","author_association":"CONTRIBUTOR","body":"Good to hear @arpankhagram. I'll close this issue then.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285405799/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285413634","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285413634","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285413634,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQxMzYzNA==","user":{"login":"cheddar","id":216778,"node_id":"MDQ6VXNlcjIxNjc3OA==","avatar_url":"https://avatars.githubusercontent.com/u/216778?v=4","gravatar_id":"","url":"https://api.github.com/users/cheddar","html_url":"https://github.com/cheddar","followers_url":"https://api.github.com/users/cheddar/followers","following_url":"https://api.github.com/users/cheddar/following{/other_user}","gists_url":"https://api.github.com/users/cheddar/gists{/gist_id}","starred_url":"https://api.github.com/users/cheddar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cheddar/subscriptions","organizations_url":"https://api.github.com/users/cheddar/orgs","repos_url":"https://api.github.com/users/cheddar/repos","events_url":"https://api.github.com/users/cheddar/events{/privacy}","received_events_url":"https://api.github.com/users/cheddar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T17:04:15Z","updated_at":"2017-03-09T17:04:15Z","author_association":"CONTRIBUTOR","body":"If we enable resizing, then it has to be done for TopN as well as any other place that chooses to use BufferAggregators.  Also, enabling resizing will introduce questions of how to reuse space most effectively (as things resize, what happens with the old space, etc.), which basically means that we are more or less reimplementing malloc.  That's the reason I've been shying away from wanting to do that.  If the relocate method includes the start and end position, then I think we can make it work for the quantile sketch case as well.  I guess the point there is that, in terms of contract, we are promoting the `position` to be both the \"ordinal\" and the \"memory position\" by providing visibility into when it changes.  We can do it in a compatible manner by using a default method that just does nothing, so yeah, I think we can work with that.\r\n\r\nMy only worry would be position collisions.  I.e. if I have an object at position `0x8` and another one at position `0x48`, both cached in my Map.  Then I get a call `relocate(0x8, 0x48)` assuming that there will then be another call `relocate(0x48, 0x96)` right after it, I won't be able to do anything good with the initial `relocate(0x8, 0x48)` call, because it will collide with the old `0x48` and I won't know the new location of `0x48` yet.\r\n\r\nWe woudl have to resolve that by making the `relocate()` call take a batch of relocations all at once, which also might be weird.\r\n\r\nFor the initial thought of the `ordinal`, how disruptive would it be for groupBy to add an extra 32-bit int counter column that it stores alongside all payloads as the ordinal?  Just to make it add a bit of extra value, we could also add a new metric on groupBy that emits at the end of a run saying the number of rows in the result set returned from the segment?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285413634/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285424145","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285424145","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285424145,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQyNDE0NQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T17:40:18Z","updated_at":"2017-03-09T17:40:18Z","author_association":"CONTRIBUTOR","body":"> Also, enabling resizing will introduce questions of how to reuse space most effectively (as things resize, what happens with the old space, etc.), which basically means that we are more or less reimplementing malloc.\r\n\r\nI think there's nothing wrong with a custom allocator, and there's good reasons: performance (\"beat the gc\") and avoidance of OOMEs. groupBy v2 can optionally start using the disk when it reaches its memory limit, and I think that's a good option to have. It also expresses its memory limit in bytes instead of rows like v1 did, so it's OOME resistant. Having state kept in the aggregator instances, outside of the buffer, defeats all that.\r\n\r\n> If the relocate method includes the start and end position, then I think we can make it work for the quantile sketch case as well.\r\n\r\nI don't really like this as a long term solution (for reasons above) but I think it's ok for now, given that we don't yet have a good enough off-heap allocator to enable resizing.\r\n\r\n> My only worry would be position collisions.\r\n\r\nAt least right now, there's no need to worry about this, since groupBy is the only engine that relocates and it doesn't do \"swaps\". It moves things around in such a way that collisions wouldn't happen if the aggregator tracks its relocates in order. I guess that means if we want to implement an engine that does do swapping then we would need a new method on BufferAggregator, but we can deal with that later :)\r\n\r\n> For the initial thought of the ordinal, how disruptive would it be for groupBy to add an extra 32-bit int counter column that it stores alongside all payloads as the ordinal?\r\n\r\n4 bytes per bucket is a lot, consider that if you have zero-one aggregators then each bucket is going to be just 8–16 bytes, so that's a 25–50% increase in footprint.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285424145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285455141","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285455141","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285455141,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ1NTE0MQ==","user":{"login":"cheddar","id":216778,"node_id":"MDQ6VXNlcjIxNjc3OA==","avatar_url":"https://avatars.githubusercontent.com/u/216778?v=4","gravatar_id":"","url":"https://api.github.com/users/cheddar","html_url":"https://github.com/cheddar","followers_url":"https://api.github.com/users/cheddar/followers","following_url":"https://api.github.com/users/cheddar/following{/other_user}","gists_url":"https://api.github.com/users/cheddar/gists{/gist_id}","starred_url":"https://api.github.com/users/cheddar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cheddar/subscriptions","organizations_url":"https://api.github.com/users/cheddar/orgs","repos_url":"https://api.github.com/users/cheddar/repos","events_url":"https://api.github.com/users/cheddar/events{/privacy}","received_events_url":"https://api.github.com/users/cheddar/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T19:30:18Z","updated_at":"2017-03-09T19:30:18Z","author_association":"CONTRIBUTOR","body":"Ok.  If you think that what I described with collisions won't happen, then I'm ok with adding `relocate()` as an interim solution.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285455141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285458611","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285458611","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285458611,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ1ODYxMQ==","user":{"login":"akashdw","id":5886276,"node_id":"MDQ6VXNlcjU4ODYyNzY=","avatar_url":"https://avatars.githubusercontent.com/u/5886276?v=4","gravatar_id":"","url":"https://api.github.com/users/akashdw","html_url":"https://github.com/akashdw","followers_url":"https://api.github.com/users/akashdw/followers","following_url":"https://api.github.com/users/akashdw/following{/other_user}","gists_url":"https://api.github.com/users/akashdw/gists{/gist_id}","starred_url":"https://api.github.com/users/akashdw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akashdw/subscriptions","organizations_url":"https://api.github.com/users/akashdw/orgs","repos_url":"https://api.github.com/users/akashdw/repos","events_url":"https://api.github.com/users/akashdw/events{/privacy}","received_events_url":"https://api.github.com/users/akashdw/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T19:41:08Z","updated_at":"2017-03-09T19:41:21Z","author_association":"CONTRIBUTOR","body":"@cheddar @gianm  `relocate()` will throw away any position based caches, I don't think its gonna solve growing `quantile` sketches problem? https://github.com/druid-io/druid/issues/4026#issuecomment-285202370","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285458611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285459553","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285459553","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285459553,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ1OTU1Mw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T19:44:44Z","updated_at":"2017-03-09T19:44:44Z","author_association":"CONTRIBUTOR","body":"@akashdw, I think @cheddar means doing the `void relocate(oldPosition, newPosition)` option, which should give quantiles what it needs.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285459553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285462182","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285462182","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285462182,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ2MjE4Mg==","user":{"login":"akashdw","id":5886276,"node_id":"MDQ6VXNlcjU4ODYyNzY=","avatar_url":"https://avatars.githubusercontent.com/u/5886276?v=4","gravatar_id":"","url":"https://api.github.com/users/akashdw","html_url":"https://github.com/akashdw","followers_url":"https://api.github.com/users/akashdw/followers","following_url":"https://api.github.com/users/akashdw/following{/other_user}","gists_url":"https://api.github.com/users/akashdw/gists{/gist_id}","starred_url":"https://api.github.com/users/akashdw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akashdw/subscriptions","organizations_url":"https://api.github.com/users/akashdw/orgs","repos_url":"https://api.github.com/users/akashdw/repos","events_url":"https://api.github.com/users/akashdw/events{/privacy}","received_events_url":"https://api.github.com/users/akashdw/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T19:54:02Z","updated_at":"2017-03-09T20:05:59Z","author_association":"CONTRIBUTOR","body":"I see. Going into implementation details,  adding `relocate()` to BufferAggregator will break existing custom extensions? Suggestions to avoid it?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285462182/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285466984","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285466984","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285466984,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ2Njk4NA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T20:10:59Z","updated_at":"2017-03-09T20:10:59Z","author_association":"CONTRIBUTOR","body":"@akashdw that's OK, 0.10.0 is a major release so backwards incompatible changes are ok. We just need to document it in the release notes.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285466984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285469985","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285469985","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285469985,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ2OTk4NQ==","user":{"login":"akashdw","id":5886276,"node_id":"MDQ6VXNlcjU4ODYyNzY=","avatar_url":"https://avatars.githubusercontent.com/u/5886276?v=4","gravatar_id":"","url":"https://api.github.com/users/akashdw","html_url":"https://github.com/akashdw","followers_url":"https://api.github.com/users/akashdw/followers","following_url":"https://api.github.com/users/akashdw/following{/other_user}","gists_url":"https://api.github.com/users/akashdw/gists{/gist_id}","starred_url":"https://api.github.com/users/akashdw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akashdw/subscriptions","organizations_url":"https://api.github.com/users/akashdw/orgs","repos_url":"https://api.github.com/users/akashdw/repos","events_url":"https://api.github.com/users/akashdw/events{/privacy}","received_events_url":"https://api.github.com/users/akashdw/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T20:22:38Z","updated_at":"2017-03-09T20:22:38Z","author_association":"CONTRIBUTOR","body":"Okay, then I can start making the `relocate()` changes. Is there anything I need to be careful about? @himanshug @cheddar ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285469985/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285479192","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285479192","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285479192,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ3OTE5Mg==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T20:51:39Z","updated_at":"2017-03-09T20:51:39Z","author_association":"CONTRIBUTOR","body":"one thing that I originally thought of doing at the time of Union caching was below....\r\n\r\nkeep Map<Integer, Union> cache where key is not position in BB but just a monotonically increasing ordinal. Implementation would write the ordinal as first 4 bytes in the BB at given position. So, that way even if you relocate the data , SketchBufferAggregator would still find the right Union to use.\r\nBut this means storing additional 4 bytes . I did not do it at the time because relocation wasn't possible.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285479192/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285480736","html_url":"https://github.com/apache/druid/issues/4027#issuecomment-285480736","issue_url":"https://api.github.com/repos/apache/druid/issues/4027","id":285480736,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ4MDczNg==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T20:57:46Z","updated_at":"2017-03-09T20:57:46Z","author_association":"MEMBER","body":"@leerho\r\nIt seems to me that compression (LZF, LZ4) and hashing should be implemented on the Memory library side and be part of the Memory API. Otherwise they couldn't be implemented efficiently without excessive data copies.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285480736/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285482520","html_url":"https://github.com/apache/druid/issues/4027#issuecomment-285482520","issue_url":"https://api.github.com/repos/apache/druid/issues/4027","id":285482520,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ4MjUyMA==","user":{"login":"lemire","id":391987,"node_id":"MDQ6VXNlcjM5MTk4Nw==","avatar_url":"https://avatars.githubusercontent.com/u/391987?v=4","gravatar_id":"","url":"https://api.github.com/users/lemire","html_url":"https://github.com/lemire","followers_url":"https://api.github.com/users/lemire/followers","following_url":"https://api.github.com/users/lemire/following{/other_user}","gists_url":"https://api.github.com/users/lemire/gists{/gist_id}","starred_url":"https://api.github.com/users/lemire/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lemire/subscriptions","organizations_url":"https://api.github.com/users/lemire/orgs","repos_url":"https://api.github.com/users/lemire/repos","events_url":"https://api.github.com/users/lemire/events{/privacy}","received_events_url":"https://api.github.com/users/lemire/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T21:05:01Z","updated_at":"2017-03-09T21:05:01Z","author_association":"NONE","body":"@leventov  BTW if you have arrays of integers, they can be more efficiently compressed than by Lempel Ziv. I do not necessarily recommend using [JavaFastPFOR](https://github.com/lemire/JavaFastPFOR) as a dependency, but you should definitively be aware of what it does if you are dealing with arrays of integers at all.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285482520/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285482909","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285482909","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285482909,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ4MjkwOQ==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T21:06:31Z","updated_at":"2017-03-09T21:06:31Z","author_association":"CONTRIBUTOR","body":"@leventov how do you determine what methods in BufferAggregator and DimensionsSelectors should be annotated with `@CalledFromHotLoop` .\r\nI see that BufferAggregator.init() , BufferAggregator.aggregate(), DimensionSelector.getRow() are called from within scanAndAggregate(..) so they should be annotated.\r\nHowever, I see that following methods are annotated instead..\r\nBufferAggregator.aggregate(), DimensionSelector.getRow() which are fine...\r\n\r\nbut DimensionSelector.lookupName() is annotated but not really called from the hot loop and\r\nBufferAggregator.init() is called in hot loop but not annotated as such.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285482909/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285483394","html_url":"https://github.com/apache/druid/issues/4027#issuecomment-285483394","issue_url":"https://api.github.com/repos/apache/druid/issues/4027","id":285483394,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ4MzM5NA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T21:08:30Z","updated_at":"2017-03-09T21:08:30Z","author_association":"MEMBER","body":"@lemire thanks for pointing this out. Sometimes we compress integers and sometimes floating point data.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285483394/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285484755","html_url":"https://github.com/apache/druid/issues/4027#issuecomment-285484755","issue_url":"https://api.github.com/repos/apache/druid/issues/4027","id":285484755,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ4NDc1NQ==","user":{"login":"lemire","id":391987,"node_id":"MDQ6VXNlcjM5MTk4Nw==","avatar_url":"https://avatars.githubusercontent.com/u/391987?v=4","gravatar_id":"","url":"https://api.github.com/users/lemire","html_url":"https://github.com/lemire","followers_url":"https://api.github.com/users/lemire/followers","following_url":"https://api.github.com/users/lemire/following{/other_user}","gists_url":"https://api.github.com/users/lemire/gists{/gist_id}","starred_url":"https://api.github.com/users/lemire/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lemire/subscriptions","organizations_url":"https://api.github.com/users/lemire/orgs","repos_url":"https://api.github.com/users/lemire/repos","events_url":"https://api.github.com/users/lemire/events{/privacy}","received_events_url":"https://api.github.com/users/lemire/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T21:13:46Z","updated_at":"2017-03-09T21:13:46Z","author_association":"NONE","body":"@leventov  Both of these are subject to data-aware optimized codecs; there has been a ton of work done on compressing integers in particular. Parquet, LinkedIn Pinot and others use such techniques to good effect. I'm available to chat about it.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285484755/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285488761","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285488761","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285488761,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ4ODc2MQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T21:27:34Z","updated_at":"2017-03-09T21:27:34Z","author_association":"MEMBER","body":"@himanshug annotated `BufferAggregator.init()` with `@CalledFromHotLoop`. `DimensionSelector.lookupName()` is used in some `ValueMatcher` implementations. `ValueMatcher.matches()` is a part of hot loop processing","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285488761/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285493212","html_url":"https://github.com/apache/druid/issues/4027#issuecomment-285493212","issue_url":"https://api.github.com/repos/apache/druid/issues/4027","id":285493212,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ5MzIxMg==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T21:44:43Z","updated_at":"2017-03-09T21:44:43Z","author_association":"CONTRIBUTOR","body":"@leventov @lemire \r\n\r\n> It seems to me that compression (LZF, LZ4) and hashing should be implemented on the Memory library side and be part of the Memory API. Otherwise they couldn't be implemented efficiently without excessive data copies.\r\n\r\nSorry, I am coming in at the tail end of this thread and not sure I fully understand the use-case.  But I am skeptical of adding data-aware transformations directly into Memory.  Please explain where the efficiency gain would be.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285493212/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285495720","html_url":"https://github.com/apache/druid/issues/4027#issuecomment-285495720","issue_url":"https://api.github.com/repos/apache/druid/issues/4027","id":285495720,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ5NTcyMA==","user":{"login":"lemire","id":391987,"node_id":"MDQ6VXNlcjM5MTk4Nw==","avatar_url":"https://avatars.githubusercontent.com/u/391987?v=4","gravatar_id":"","url":"https://api.github.com/users/lemire","html_url":"https://github.com/lemire","followers_url":"https://api.github.com/users/lemire/followers","following_url":"https://api.github.com/users/lemire/following{/other_user}","gists_url":"https://api.github.com/users/lemire/gists{/gist_id}","starred_url":"https://api.github.com/users/lemire/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lemire/subscriptions","organizations_url":"https://api.github.com/users/lemire/orgs","repos_url":"https://api.github.com/users/lemire/repos","events_url":"https://api.github.com/users/lemire/events{/privacy}","received_events_url":"https://api.github.com/users/lemire/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T21:54:13Z","updated_at":"2017-03-09T21:54:13Z","author_association":"NONE","body":"@leerho Oh. I don't know whether it would be beneficial, but you can compress and uncompress arrays of integers an order of magnitude faster using dedicated algorithms (as opposed to Lempel Ziv) while improving compression ratios. This was just a passing remark, not a specific recommendation.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285495720/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285496504","html_url":"https://github.com/apache/druid/issues/4027#issuecomment-285496504","issue_url":"https://api.github.com/repos/apache/druid/issues/4027","id":285496504,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTQ5NjUwNA==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T21:57:14Z","updated_at":"2017-03-09T21:57:14Z","author_association":"CONTRIBUTOR","body":"@lemire I agree.  But it is up to the user, who understands their data, to choose the appropriate transformation algorithm.  Trying to generalize that down to a low-level Memory API would be fraught with difficulties.\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285496504/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285505430","html_url":"https://github.com/apache/druid/issues/4027#issuecomment-285505430","issue_url":"https://api.github.com/repos/apache/druid/issues/4027","id":285505430,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTUwNTQzMA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T22:33:50Z","updated_at":"2017-03-09T22:34:53Z","author_association":"MEMBER","body":"@leerho \r\n\r\n> Sorry, I am coming in at the tail end of this thread and not sure I fully understand the use-case. But I am skeptical of adding data-aware transformations directly into Memory. Please explain where the efficiency gain would be.\r\n\r\nThe only was how you can compress `Memory` using e. g. LZ4 JNI is to copy the data to byte array/byte buffer and feed to JNI. Because `Memory` abstraction doesn't guarantee the data resides continuous chunk of actual virtual memory of the current process. `ByteBuffer` does guarantee this.\r\n\r\nThe other way around is to add something like `isContinuous(offset, len)` to `Memory` API, `getObject(offset)`, `getCumulativeOffset(offset)`.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285505430/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285519150","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285519150","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285519150,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTUxOTE1MA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-09T23:34:36Z","updated_at":"2017-03-09T23:34:36Z","author_association":"MEMBER","body":"@himanshug any other comments?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285519150/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285548900","html_url":"https://github.com/apache/druid/pull/3951#issuecomment-285548900","issue_url":"https://api.github.com/repos/apache/druid/issues/3951","id":285548900,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTU0ODkwMA==","user":{"login":"akashdw","id":5886276,"node_id":"MDQ6VXNlcjU4ODYyNzY=","avatar_url":"https://avatars.githubusercontent.com/u/5886276?v=4","gravatar_id":"","url":"https://api.github.com/users/akashdw","html_url":"https://github.com/akashdw","followers_url":"https://api.github.com/users/akashdw/followers","following_url":"https://api.github.com/users/akashdw/following{/other_user}","gists_url":"https://api.github.com/users/akashdw/gists{/gist_id}","starred_url":"https://api.github.com/users/akashdw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akashdw/subscriptions","organizations_url":"https://api.github.com/users/akashdw/orgs","repos_url":"https://api.github.com/users/akashdw/repos","events_url":"https://api.github.com/users/akashdw/events{/privacy}","received_events_url":"https://api.github.com/users/akashdw/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T01:47:56Z","updated_at":"2017-03-10T01:47:56Z","author_association":"CONTRIBUTOR","body":"👍 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285548900/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285562484","html_url":"https://github.com/apache/druid/issues/3892#issuecomment-285562484","issue_url":"https://api.github.com/repos/apache/druid/issues/3892","id":285562484,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTU2MjQ4NA==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T03:21:03Z","updated_at":"2017-03-10T03:21:03Z","author_association":"CONTRIBUTOR","body":"@leventov @niketh \r\n\r\n**Consolidating Memory / MemoryImpl, WritableMemory / WritableMemoryImpl.**\r\n\r\nI haven't had any real reason to do this until now.  However, after discussing with @niketh some of the issues he had to address when trying to implement the current DataSketches Memory into Druid I learned about some additional capabilities that would have been very helpful.  One very important capability was:\r\n\r\n- A byte-level compareTo(other) or static compare( a, b ) for entire blocks of memory.\r\n\r\nThis enables a byte ordering on objects independent of datatype, which Druid uses a lot.  Because of our multiple Impls, I don't want to have to generate all the combinations of `compare(Memory, Memory), compare(Memory, WritableMemory)`, etc.  \r\n\r\nSo here returns a root class that only knows about `bytes`, call it `BaseBytes`.  It would have one field, `MemoryState` (which we could rename as `BaseState`).  Both `Memory, WritableMemory, Buffer, WritableBuffer` (which now may as well be impls) would extend BaseBytes.  \r\n\r\nBaseBytes would have static methods that would just do byte operations, such as `compare(BaseBytes a, BaseBytes b)`, `copy( a, b)`, or even the possibility of `Transform(a, b)` ... as long as the operation doesn't need any information about the structure or type of data.  Because `BaseState` would also be at that level, it can check for RO state and would know the base offsets, etc.  All read-only, strictly byte oriented methods could also be moved to `BaseBytes`. \r\n\r\nEven though `BaseBytes` is a common root class, it is not possible to cast from `Memory` to `WritableMemory` via `BaseBytes`. This is not caught at compile time, but it is caught at runtime. \r\n\r\nThoughts?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285562484/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285575200","html_url":"https://github.com/apache/druid/issues/3892#issuecomment-285575200","issue_url":"https://api.github.com/repos/apache/druid/issues/3892","id":285575200,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTU3NTIwMA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T04:31:41Z","updated_at":"2017-03-10T04:31:41Z","author_association":"MEMBER","body":"@leerho \r\nWhat about `Memory.compareTo(offset, len, Memory other, otherOffset, otherLen)`? You don't need any special API method or implementation `compare(Memory, WritableMemory)`, because `WritableMemory` extends `Memory`, so you can always use the same method.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285575200/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285585340","html_url":"https://github.com/apache/druid/issues/3892#issuecomment-285585340","issue_url":"https://api.github.com/repos/apache/druid/issues/3892","id":285585340,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTU4NTM0MA==","user":{"login":"leerho","id":12941506,"node_id":"MDQ6VXNlcjEyOTQxNTA2","avatar_url":"https://avatars.githubusercontent.com/u/12941506?v=4","gravatar_id":"","url":"https://api.github.com/users/leerho","html_url":"https://github.com/leerho","followers_url":"https://api.github.com/users/leerho/followers","following_url":"https://api.github.com/users/leerho/following{/other_user}","gists_url":"https://api.github.com/users/leerho/gists{/gist_id}","starred_url":"https://api.github.com/users/leerho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leerho/subscriptions","organizations_url":"https://api.github.com/users/leerho/orgs","repos_url":"https://api.github.com/users/leerho/repos","events_url":"https://api.github.com/users/leerho/events{/privacy}","received_events_url":"https://api.github.com/users/leerho/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T05:58:12Z","updated_at":"2017-03-10T05:58:32Z","author_association":"CONTRIBUTOR","body":"@leventov  Look again.  WritableMemory does not extend Memory.  This is the two impl model.  Also, in your snippet you only need one len. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285585340/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285596005","html_url":"https://github.com/apache/druid/pull/3928#issuecomment-285596005","issue_url":"https://api.github.com/repos/apache/druid/issues/3928","id":285596005,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTU5NjAwNQ==","user":{"login":"erikdubbelboer","id":522870,"node_id":"MDQ6VXNlcjUyMjg3MA==","avatar_url":"https://avatars.githubusercontent.com/u/522870?v=4","gravatar_id":"","url":"https://api.github.com/users/erikdubbelboer","html_url":"https://github.com/erikdubbelboer","followers_url":"https://api.github.com/users/erikdubbelboer/followers","following_url":"https://api.github.com/users/erikdubbelboer/following{/other_user}","gists_url":"https://api.github.com/users/erikdubbelboer/gists{/gist_id}","starred_url":"https://api.github.com/users/erikdubbelboer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erikdubbelboer/subscriptions","organizations_url":"https://api.github.com/users/erikdubbelboer/orgs","repos_url":"https://api.github.com/users/erikdubbelboer/repos","events_url":"https://api.github.com/users/erikdubbelboer/events{/privacy}","received_events_url":"https://api.github.com/users/erikdubbelboer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T07:15:58Z","updated_at":"2017-03-10T07:15:58Z","author_association":"CONTRIBUTOR","body":"I think we should decide on the `extractionFn`. If I add a shared one now but in the future you want to switch to `DimensionSpec` instead we would have to deprecate the shared one again. Better to decide on a final solution now?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285596005/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285599099","html_url":"https://github.com/apache/druid/issues/3892#issuecomment-285599099","issue_url":"https://api.github.com/repos/apache/druid/issues/3892","id":285599099,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTU5OTA5OQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T07:36:23Z","updated_at":"2017-03-10T07:42:28Z","author_association":"MEMBER","body":"@leerho it means that new objects are required to be created where WritableMemory is passed to a method, accepting read-only Memory, that makes the situation with the third goal in the very first message in this thread even worse that it used to be with ByteBuffers. With ByteBuffers, API encourages to create asReadOnly() copies \"out of fear\", but it was not required. With what you propose, it is simply required. I disagree with this.\r\n\r\nActually I didn't notice in your proposition in this message: https://github.com/druid-io/druid/issues/3892#issuecomment-284964809 that WritableMemory doesn't extend Memory. I disagree with this.\r\n\r\nWhen `WritableMemory` extends `Memory` and all methods, that are not supposed to write, accept `Memory`, it's impossible to accidentally violate read/write satefy, you should intentionally cast Memory to WritableMemory (and even this could be hardly prohibited with a simple Checkstyle rule). On the contrary, it's super-easy to violate bounds safety (off-by-ones, wrong primitive argument, etc.) And yet we agree to not make bound checks by default (only with assertions enabled).\r\n\r\nRead/write safety IMO is not a problem at all, as soon as there is a read-only superclass `Memory`, that ByteBuffer API lacks. Making the system even \"more read/write safe\" doesn't deserve even little sacrifices.\r\n\r\nNot to mention that \"`WritableMemory` not extending `Memory`\" creates a lot of problems with code sharing, starting from the method that we are discussing, `compareTo()`. And a lot more methods: `copyTo()`, hash code computation, compression, object deserialization, etc.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285599099/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285599683","html_url":"https://github.com/apache/druid/issues/3892#issuecomment-285599683","issue_url":"https://api.github.com/repos/apache/druid/issues/3892","id":285599683,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTU5OTY4Mw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T07:40:01Z","updated_at":"2017-03-10T07:40:01Z","author_association":"MEMBER","body":"> Also, in your snippet you only need one len.\r\n\r\nSometimes you want to compare byte sequences of different lengths, as well as it's not prohibited to  compare Strings of different lengths.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285599683/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285620943","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-285620943","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":285620943,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTYyMDk0Mw==","user":{"login":"elloooooo","id":4433949,"node_id":"MDQ6VXNlcjQ0MzM5NDk=","avatar_url":"https://avatars.githubusercontent.com/u/4433949?v=4","gravatar_id":"","url":"https://api.github.com/users/elloooooo","html_url":"https://github.com/elloooooo","followers_url":"https://api.github.com/users/elloooooo/followers","following_url":"https://api.github.com/users/elloooooo/following{/other_user}","gists_url":"https://api.github.com/users/elloooooo/gists{/gist_id}","starred_url":"https://api.github.com/users/elloooooo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elloooooo/subscriptions","organizations_url":"https://api.github.com/users/elloooooo/orgs","repos_url":"https://api.github.com/users/elloooooo/repos","events_url":"https://api.github.com/users/elloooooo/events{/privacy}","received_events_url":"https://api.github.com/users/elloooooo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T09:30:31Z","updated_at":"2017-03-10T09:31:12Z","author_association":"CONTRIBUTOR","body":"> they run batch reindexing to do the merging already.\r\n\r\n@himanshug May I ask  running batch reindexing means to submit a merge task?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285620943/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285681588","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-285681588","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":285681588,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTY4MTU4OA==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T14:25:55Z","updated_at":"2017-03-10T14:25:55Z","author_association":"CONTRIBUTOR","body":"@elloooooo I meant hadoop based re-indexing , see http://druid.io/docs/0.9.2/ingestion/update-existing-data.html","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285681588/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285722196","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-285722196","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":285722196,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTcyMjE5Ng==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T16:53:25Z","updated_at":"2017-03-10T16:53:25Z","author_association":"MEMBER","body":"@gianm @dclim I have updated the issue with the approaches that we (@cheddar and @himanshug)  came up after a discussion. Please see it that makes sense. Thanks","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285722196/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285722904","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285722904","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285722904,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTcyMjkwNA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T16:55:53Z","updated_at":"2017-03-10T16:55:53Z","author_association":"CONTRIBUTOR","body":"@akashdw @himanshug @cheddar are we decided on doing `void relocate(oldPosition, newPosition)` for 0.10.0? Is one of you planning on working on the patch?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285722904/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285728684","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285728684","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285728684,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTcyODY4NA==","user":{"login":"akashdw","id":5886276,"node_id":"MDQ6VXNlcjU4ODYyNzY=","avatar_url":"https://avatars.githubusercontent.com/u/5886276?v=4","gravatar_id":"","url":"https://api.github.com/users/akashdw","html_url":"https://github.com/akashdw","followers_url":"https://api.github.com/users/akashdw/followers","following_url":"https://api.github.com/users/akashdw/following{/other_user}","gists_url":"https://api.github.com/users/akashdw/gists{/gist_id}","starred_url":"https://api.github.com/users/akashdw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akashdw/subscriptions","organizations_url":"https://api.github.com/users/akashdw/orgs","repos_url":"https://api.github.com/users/akashdw/repos","events_url":"https://api.github.com/users/akashdw/events{/privacy}","received_events_url":"https://api.github.com/users/akashdw/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T17:17:36Z","updated_at":"2017-03-10T17:17:36Z","author_association":"CONTRIBUTOR","body":"@gianm Yup, I'm working on the patch.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285728684/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285729873","html_url":"https://github.com/apache/druid/issues/4026#issuecomment-285729873","issue_url":"https://api.github.com/repos/apache/druid/issues/4026","id":285729873,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTcyOTg3Mw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T17:22:03Z","updated_at":"2017-03-10T17:22:03Z","author_association":"CONTRIBUTOR","body":"Okay cool thanks!","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285729873/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285730486","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-285730486","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":285730486,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTczMDQ4Ng==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T17:24:13Z","updated_at":"2017-03-10T17:24:13Z","author_association":"CONTRIBUTOR","body":"Cool! I haven't been able to give the plan a full review but I wanted to call out that having join functionality separate from QTL is the correct way to go. QTL was originally conceived as a high-performance, data-enrichment feature; not a join substitute. So hopefully it stays around and this can add some awesome functionality.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285730486/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285733533","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-285733533","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":285733533,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTczMzUzMw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T17:36:02Z","updated_at":"2017-03-10T17:36:42Z","author_association":"CONTRIBUTOR","body":"Is the idea with (2) that maxRowsPerSegment would become more of a loose guideline than a hard limit? It sounds like replicas would potentially need to go beyond maxRowsPerSegment to reach the same checkpoint as other replicas.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285733533/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285735506","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-285735506","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":285735506,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTczNTUwNg==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T17:43:44Z","updated_at":"2017-03-10T17:45:39Z","author_association":"MEMBER","body":"yes maxRowsPerSegment would not be a hard limit, I assume it should not go beyond a lot if Supervisor is up and running and network is behaving correctly. One thing that can be done is that task pauses when they reach maxRowsPerSegment and get resumed by Supervisor. Still it can go beyond maxRowsPerSegment depending on how much partition offset are out of sync on replicas (which can be a significant number in worst case situations). Currently, cannot think of any better approach.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285735506/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285745241","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-285745241","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":285745241,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc0NTI0MQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T18:21:37Z","updated_at":"2017-03-10T18:21:37Z","author_association":"CONTRIBUTOR","body":"I can't think of a way to make it a hard limit without separating segments by Kafka partition, or by doing a leader/follower approach, both of which have overhead. I think it's fine for maxRowsPerSegment to become a loose limit, but IMO the name of the parameter should change since \"maxRowsPerSegment\" sounds like a hard limit.\r\n\r\nI do think it makes sense for the tasks to pause themselves when they hit maxRowsPerSegment, notify the supervisor, and then wait for a checkpoint. They might as well do the same thing when they hit taskDuration.\r\n\r\n@dclim what do you think?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285745241/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285748167","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-285748167","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":285748167,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc0ODE2Nw==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T18:33:23Z","updated_at":"2017-03-10T18:33:23Z","author_association":"MEMBER","body":"@gianm currently tasks do not check for taskDuration at all, its the supervisor who does the check for taskDuration for tasks and initiates the shutdown process.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285748167/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285748625","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-285748625","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":285748625,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc0ODYyNQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T18:35:15Z","updated_at":"2017-03-10T18:35:15Z","author_association":"CONTRIBUTOR","body":"What I meant was, the tasks could pause themselves when they hit taskDuration too and also notify the supervisor. The two functionalities (duration, max segment size) seem similar with the checkpoint change you proposed and might be nice to run them the same way.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285748625/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285749417","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-285749417","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":285749417,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc0OTQxNw==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T18:38:21Z","updated_at":"2017-03-10T18:38:21Z","author_association":"MEMBER","body":"Oh OK, that sounds great.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285749417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285769411","html_url":"https://github.com/apache/druid/issues/3944#issuecomment-285769411","issue_url":"https://api.github.com/repos/apache/druid/issues/3944","id":285769411,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc2OTQxMQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T19:58:18Z","updated_at":"2017-03-10T19:58:18Z","author_association":"CONTRIBUTOR","body":"Added the following to clarify numeric dimension performance.\r\n\r\n> There are performance tradeoffs between string and numeric columns. Numeric columns are generally faster to group on than string columns. Numeric columns don't have indexes, so they are generally slower to filter on than string columns.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285769411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285780216","html_url":"https://github.com/apache/druid/pull/4035#issuecomment-285780216","issue_url":"https://api.github.com/repos/apache/druid/issues/4035","id":285780216,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc4MDIxNg==","user":{"login":"jon-wei","id":8729063,"node_id":"MDQ6VXNlcjg3MjkwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/8729063?v=4","gravatar_id":"","url":"https://api.github.com/users/jon-wei","html_url":"https://github.com/jon-wei","followers_url":"https://api.github.com/users/jon-wei/followers","following_url":"https://api.github.com/users/jon-wei/following{/other_user}","gists_url":"https://api.github.com/users/jon-wei/gists{/gist_id}","starred_url":"https://api.github.com/users/jon-wei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jon-wei/subscriptions","organizations_url":"https://api.github.com/users/jon-wei/orgs","repos_url":"https://api.github.com/users/jon-wei/repos","events_url":"https://api.github.com/users/jon-wei/events{/privacy}","received_events_url":"https://api.github.com/users/jon-wei/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T20:47:02Z","updated_at":"2017-03-10T20:47:02Z","author_association":"CONTRIBUTOR","body":":+1:","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285780216/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285783193","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285783193","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285783193,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc4MzE5Mw==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T21:00:10Z","updated_at":"2017-03-10T21:00:38Z","author_association":"CONTRIBUTOR","body":"@leventov LGTM aside from https://github.com/druid-io/druid/pull/3889#pullrequestreview-26149557\r\n\r\nHowever, this PR updates BufferAggregator to implement HotLoopCallee , BufferAggregator is a druid extension point and many users have custom aggregator extensions which will break with this. Given that change, this can only be released in 0.10.0 or 0.11.0 \r\ngiven that, we haven't released 0.10.0 yet, so we can try and pull this one into 0.10.0 milestone. @gianm any objections ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285783193/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285783235","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-285783235","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":285783235,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc4MzIzNQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T21:00:19Z","updated_at":"2017-03-10T21:00:19Z","author_association":"CONTRIBUTOR","body":"Nice proposal @jihoonson!\r\n\r\nAbout broadcasting data,\r\n\r\n> If all data sources are broadcasted except one, join can be performed in multiple nodes holding the segments of the non-broadcasted data source.\r\n\r\nWhat should we do when the broadcast dataSource hasn't been fully broadcast yet? For example, a new historical node comes online and hasn't loaded all of the broadcast dataSources yet. Or, a new broadcast dataSource is added, and it hasn't been loaded on all historical nodes yet. I can think of a few ways to deal with it.\r\n\r\n1. Any nodes that don't have the broadcast table yet, treat it as if it was empty. This will end up generating a bunch of nulls that shouldn't be nulls.\r\n2. Fail the query, the user should retry later.\r\n3. Wait for the table to finish broadcasting and then do the query.\r\n\r\nThere's a related case, where a broadcast dataSource is updated (new segment versions) and the update hasn't fully propagated yet. In this case, I guess we have two options.\r\n\r\n1. Some nodes use the old version and some use the new one\r\n2. All nodes use the old version until the new one is fully propagated (requires some extra coordination)\r\n\r\n> Once this option is set for a data source, all segments of the data source are replicated to all historicals and realtimes.\r\n\r\nI guess for this, we'll need a way for the coordinator to assign segments to realtime tasks. Maybe they could all run ZkCoordinators like historicals do?\r\n\r\nOptionally it could also be nice for the broadcast rule to say \"table X should be broadcast to any node that also hosts table Y\" -- so if you have a table X that you never need to join to table Z, you don't need to broadcast it to realtime tasks for dataSource Z. Realtime tasks tend to have fewer resources available than historical nodes, so this would help them out a bit by potentially limiting the number of tables they need to load.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285783235/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285783457","html_url":"https://github.com/apache/druid/pull/4028#issuecomment-285783457","issue_url":"https://api.github.com/repos/apache/druid/issues/4028","id":285783457,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc4MzQ1Nw==","user":{"login":"fjy","id":428325,"node_id":"MDQ6VXNlcjQyODMyNQ==","avatar_url":"https://avatars.githubusercontent.com/u/428325?v=4","gravatar_id":"","url":"https://api.github.com/users/fjy","html_url":"https://github.com/fjy","followers_url":"https://api.github.com/users/fjy/followers","following_url":"https://api.github.com/users/fjy/following{/other_user}","gists_url":"https://api.github.com/users/fjy/gists{/gist_id}","starred_url":"https://api.github.com/users/fjy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fjy/subscriptions","organizations_url":"https://api.github.com/users/fjy/orgs","repos_url":"https://api.github.com/users/fjy/repos","events_url":"https://api.github.com/users/fjy/events{/privacy}","received_events_url":"https://api.github.com/users/fjy/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T21:01:15Z","updated_at":"2017-03-10T21:01:15Z","author_association":"CONTRIBUTOR","body":"👍 ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285783457/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285788211","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-285788211","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":285788211,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc4ODIxMQ==","user":{"login":"himanshug","id":246308,"node_id":"MDQ6VXNlcjI0NjMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/246308?v=4","gravatar_id":"","url":"https://api.github.com/users/himanshug","html_url":"https://github.com/himanshug","followers_url":"https://api.github.com/users/himanshug/followers","following_url":"https://api.github.com/users/himanshug/following{/other_user}","gists_url":"https://api.github.com/users/himanshug/gists{/gist_id}","starred_url":"https://api.github.com/users/himanshug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himanshug/subscriptions","organizations_url":"https://api.github.com/users/himanshug/orgs","repos_url":"https://api.github.com/users/himanshug/repos","events_url":"https://api.github.com/users/himanshug/events{/privacy}","received_events_url":"https://api.github.com/users/himanshug/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T21:22:56Z","updated_at":"2017-03-10T21:22:56Z","author_association":"CONTRIBUTOR","body":"we have been pretty successful creating extensions with custom query types that do specific things similar to join but not wholesome general joins...\r\n\r\nbasic idea has always been to create a custom query type, on receiving the query that implementation would use DirectDruidClient to send 1 or more queries to historicals to gather data... combine those results (sometimes in-memory if streaming kind of merge not possible) and then return the results to user. so, that extension is only known to broker.\r\n\r\nabove strategy has been used to implement user retention, rolling averages type of queries, implementations are generally specific to our usecase but idea is general.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285788211/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285795307","html_url":"https://github.com/apache/druid/pull/3902#issuecomment-285795307","issue_url":"https://api.github.com/repos/apache/druid/issues/3902","id":285795307,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTc5NTMwNw==","user":{"login":"pjain1","id":11787983,"node_id":"MDQ6VXNlcjExNzg3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/11787983?v=4","gravatar_id":"","url":"https://api.github.com/users/pjain1","html_url":"https://github.com/pjain1","followers_url":"https://api.github.com/users/pjain1/followers","following_url":"https://api.github.com/users/pjain1/following{/other_user}","gists_url":"https://api.github.com/users/pjain1/gists{/gist_id}","starred_url":"https://api.github.com/users/pjain1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjain1/subscriptions","organizations_url":"https://api.github.com/users/pjain1/orgs","repos_url":"https://api.github.com/users/pjain1/repos","events_url":"https://api.github.com/users/pjain1/events{/privacy}","received_events_url":"https://api.github.com/users/pjain1/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T21:55:17Z","updated_at":"2017-03-10T21:55:17Z","author_association":"MEMBER","body":"@himanshug a general comment - it would be good to put some comments on important classes, variables and methods. For example, a high level design comment on `HttpServerInventoryView`, some comments on `SegmentChangeRequestHistory`, usage of `hash` in `Counter`, reason of passing `waitingFutures` in `SettableFuture` etc. This would make it easier to understand the code and help the person changing the code not make mistakes.\r\n\r\nI have gone through the code at high level and it looks good me to so far.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285795307/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285802301","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285802301","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285802301,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgwMjMwMQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T22:27:05Z","updated_at":"2017-03-10T22:27:05Z","author_association":"CONTRIBUTOR","body":"I think this is too big to pull into 0.10.0, we branched it off already and the branch should get bug fixes only. We could jump directly to 0.11.0 if we need to I guess.\r\n\r\nAlthough, would this really be incompatible with existing extension jars? HotLoopCallee has no methods, so does adding it to BufferAggregator require extensions to be recompiled?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285802301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285802804","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-285802804","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":285802804,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgwMjgwNA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T22:29:42Z","updated_at":"2017-03-10T22:29:42Z","author_association":"CONTRIBUTOR","body":"> basic idea has always been to create a custom query type, on receiving the query that implementation would use DirectDruidClient to send 1 or more queries to historicals to gather data... combine those results (sometimes in-memory if streaming kind of merge not possible) and then return the results to user. so, that extension is only known to broker.\r\n\r\nI think it would be cool to optimize a join plan to something like this in some cases (like QTL does when \"injective\" is true) but it makes sense to build out the regular path first that involves historical nodes.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285802804/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285803027","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285803027","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285803027,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgwMzAyNw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T22:30:44Z","updated_at":"2017-03-10T22:30:44Z","author_association":"MEMBER","body":"@gianm `HotLoopCallee` has method `inspectRuntimeShape()`.\r\n\r\nAnother way is to move to Java 8 in 0.10.1 and provide a default implementation of `inspectRuntimeShape()` in `BufferAggregator`.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285803027/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285803410","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-285803410","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":285803410,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgwMzQxMA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-10T22:32:46Z","updated_at":"2017-03-10T22:32:46Z","author_association":"CONTRIBUTOR","body":"@jihoonson, under \"Future plan\":\r\n\r\n> Join result (or hash table) caching\r\n\r\nDoes this mean caching the hash table of join key -> table row, for equi-joins? If so, maybe join performance could approach QTL performance, since that's similar to the data structure that QTLs use.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285803410/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285827969","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285827969","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285827969,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgyNzk2OQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T01:21:22Z","updated_at":"2017-03-11T01:21:22Z","author_association":"CONTRIBUTOR","body":"Oh, I missed that. A default implementation sounds good if that means an extension compiled for 0.10.0 would work in 0.10.1 (sorry, I'm not that familiar with what interface changes will and will not require recompiles).","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285827969/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285828984","html_url":"https://github.com/apache/druid/pull/3928#issuecomment-285828984","issue_url":"https://api.github.com/repos/apache/druid/issues/3928","id":285828984,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgyODk4NA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T01:33:01Z","updated_at":"2017-03-11T01:33:01Z","author_association":"CONTRIBUTOR","body":"There isn't any other filter that does take `DimensionSpec` and IIRC, the reason is that DimensionSpecs do things that we don't necessarily need or want in most filters (like decorating). The decorating doesn't work with indexes, and most other filters use indexes, so they would have problems accepting DimensionSpecs.\r\n\r\nBut this filter doesn't use indexes. So it _could_ use DimensionSpecs and still get its job done.\r\n\r\n> I don't see how this would work with the extractionFn seeing as this needs to be applied in the ValueMatcher?\r\n\r\nIf I understand what you're talking about correctly, then DimensionHandlerUtils can handle this. You can just pass in the DimensionSpec and don't worry about it -- the value that comes out of the returned selector will be extractionFn'd appropriately.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285828984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285829029","html_url":"https://github.com/apache/druid/pull/3928#issuecomment-285829029","issue_url":"https://api.github.com/repos/apache/druid/issues/3928","id":285829029,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgyOTAyOQ==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T01:33:37Z","updated_at":"2017-03-11T01:33:37Z","author_association":"CONTRIBUTOR","body":"Given that this filter wouldn't use indexes I think it makes sense to use DimensionSpecs.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285829029/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285830841","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-285830841","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":285830841,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgzMDg0MQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T01:56:07Z","updated_at":"2017-03-11T01:56:07Z","author_association":"CONTRIBUTOR","body":"@himanshug thanks for your comment. I believe join will share mostly same path with other query types for processing as you said. I expect that the only change in historicals will be that they need to find segments for two or more data sources for join (in ServerManager). ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285830841/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285831361","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285831361","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285831361,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgzMTM2MQ==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T02:03:17Z","updated_at":"2017-03-11T02:03:17Z","author_association":"MEMBER","body":"@gianm \r\n\r\nhttps://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.5.6\r\n\r\n> In other words, adding a default method is a binary-compatible change because it does not introduce errors at link time","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285831361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285831660","html_url":"https://github.com/apache/druid/pull/3328#issuecomment-285831660","issue_url":"https://api.github.com/repos/apache/druid/issues/3328","id":285831660,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgzMTY2MA==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T02:07:11Z","updated_at":"2017-03-11T02:07:29Z","author_association":"MEMBER","body":"Required because of https://github.com/druid-io/druid/pull/3889#issuecomment-285803027","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285831660/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285834968","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-285834968","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":285834968,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTgzNDk2OA==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T02:28:40Z","updated_at":"2017-03-11T02:28:40Z","author_association":"CONTRIBUTOR","body":"@gianm thanks for your comment and nice suggestion. \r\n\r\nFor the case of when a query is submitted but broadcasting data (or updating broadcasted data) is not finished yet, I think the solution 2 for both cases would be good. A data source is not loaded until the data broadcast is not finished, so the query cannot be executed. Similarly, a data source is not updated until the update for all broadcasted data is not finished, so the query should be executed with data of the old version. I think that we can expect consistent behavior with this solution, thereby the implementation can share the same processing mechanism for both cases. For users, a new api which provides the status of broadcasting (and updating) data source may be needed. \r\n\r\n> I guess for this, we'll need a way for the coordinator to assign segments to realtime tasks. Maybe they could all run ZkCoordinators like historicals do?\r\n\r\nYes, it can be implemented like historicals do.\r\n\r\n> Optionally it could also be nice for the broadcast rule to say \"table X should be broadcast to any node that also hosts table Y\"\r\n\r\nI think it's really valuable. I'll consider it when I add ```full replication``` option to the load rule. Also do I need to update the proposal?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285834968/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285843559","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-285843559","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":285843559,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTg0MzU1OQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T05:21:46Z","updated_at":"2017-03-11T05:21:46Z","author_association":"CONTRIBUTOR","body":"@gianm \r\n> Does this mean caching the hash table of join key -> table row, for equi-joins? If so, maybe join performance could approach QTL performance, since that's similar to the data structure that QTLs use.\r\n\r\nIt means caching the join key -> hash table only containing the build part, or join key -> final join result. It seems to be similar to QTL for the former case, I'm not sure which one is more beneficial. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285843559/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285843743","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-285843743","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":285843743,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTg0Mzc0Mw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T05:26:44Z","updated_at":"2017-03-11T05:26:44Z","author_association":"CONTRIBUTOR","body":"@drcrallen thanks! I also think that QTL has its own goal different from join and has more rooms to achieve that goal.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285843743/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285844957","html_url":"https://github.com/apache/druid/pull/4033#issuecomment-285844957","issue_url":"https://api.github.com/repos/apache/druid/issues/4033","id":285844957,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTg0NDk1Nw==","user":{"login":"jaihind213","id":1289751,"node_id":"MDQ6VXNlcjEyODk3NTE=","avatar_url":"https://avatars.githubusercontent.com/u/1289751?v=4","gravatar_id":"","url":"https://api.github.com/users/jaihind213","html_url":"https://github.com/jaihind213","followers_url":"https://api.github.com/users/jaihind213/followers","following_url":"https://api.github.com/users/jaihind213/following{/other_user}","gists_url":"https://api.github.com/users/jaihind213/gists{/gist_id}","starred_url":"https://api.github.com/users/jaihind213/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaihind213/subscriptions","organizations_url":"https://api.github.com/users/jaihind213/orgs","repos_url":"https://api.github.com/users/jaihind213/repos","events_url":"https://api.github.com/users/jaihind213/events{/privacy}","received_events_url":"https://api.github.com/users/jaihind213/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T05:38:46Z","updated_at":"2017-03-11T07:10:46Z","author_association":"NONE","body":"hi @drcrallen \r\n\r\nmade the changes requested.\r\no- if Accept header is absent, it defaults to value of Content-Type header\r\no- test cases for the same.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285844957/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285849239","html_url":"https://github.com/apache/druid/issues/2390#issuecomment-285849239","issue_url":"https://api.github.com/repos/apache/druid/issues/2390","id":285849239,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTg0OTIzOQ==","user":{"login":"erikdubbelboer","id":522870,"node_id":"MDQ6VXNlcjUyMjg3MA==","avatar_url":"https://avatars.githubusercontent.com/u/522870?v=4","gravatar_id":"","url":"https://api.github.com/users/erikdubbelboer","html_url":"https://github.com/erikdubbelboer","followers_url":"https://api.github.com/users/erikdubbelboer/followers","following_url":"https://api.github.com/users/erikdubbelboer/following{/other_user}","gists_url":"https://api.github.com/users/erikdubbelboer/gists{/gist_id}","starred_url":"https://api.github.com/users/erikdubbelboer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erikdubbelboer/subscriptions","organizations_url":"https://api.github.com/users/erikdubbelboer/orgs","repos_url":"https://api.github.com/users/erikdubbelboer/repos","events_url":"https://api.github.com/users/erikdubbelboer/events{/privacy}","received_events_url":"https://api.github.com/users/erikdubbelboer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T07:11:21Z","updated_at":"2017-03-11T07:11:21Z","author_association":"CONTRIBUTOR","body":"Is this still an issue? I think it can be closed.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285849239/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285855148","html_url":"https://github.com/apache/druid/pull/3928#issuecomment-285855148","issue_url":"https://api.github.com/repos/apache/druid/issues/3928","id":285855148,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTg1NTE0OA==","user":{"login":"erikdubbelboer","id":522870,"node_id":"MDQ6VXNlcjUyMjg3MA==","avatar_url":"https://avatars.githubusercontent.com/u/522870?v=4","gravatar_id":"","url":"https://api.github.com/users/erikdubbelboer","html_url":"https://github.com/erikdubbelboer","followers_url":"https://api.github.com/users/erikdubbelboer/followers","following_url":"https://api.github.com/users/erikdubbelboer/following{/other_user}","gists_url":"https://api.github.com/users/erikdubbelboer/gists{/gist_id}","starred_url":"https://api.github.com/users/erikdubbelboer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erikdubbelboer/subscriptions","organizations_url":"https://api.github.com/users/erikdubbelboer/orgs","repos_url":"https://api.github.com/users/erikdubbelboer/repos","events_url":"https://api.github.com/users/erikdubbelboer/events{/privacy}","received_events_url":"https://api.github.com/users/erikdubbelboer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T09:26:15Z","updated_at":"2017-03-11T09:26:15Z","author_association":"CONTRIBUTOR","body":"I changed it to a new filter now and added DimensionSpecs as inputs. Any input on what should change or maybe which other tests should exist?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285855148/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285881810","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285881810","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285881810,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTg4MTgxMA==","user":{"login":"drcrallen","id":8213081,"node_id":"MDQ6VXNlcjgyMTMwODE=","avatar_url":"https://avatars.githubusercontent.com/u/8213081?v=4","gravatar_id":"","url":"https://api.github.com/users/drcrallen","html_url":"https://github.com/drcrallen","followers_url":"https://api.github.com/users/drcrallen/followers","following_url":"https://api.github.com/users/drcrallen/following{/other_user}","gists_url":"https://api.github.com/users/drcrallen/gists{/gist_id}","starred_url":"https://api.github.com/users/drcrallen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drcrallen/subscriptions","organizations_url":"https://api.github.com/users/drcrallen/orgs","repos_url":"https://api.github.com/users/drcrallen/repos","events_url":"https://api.github.com/users/drcrallen/events{/privacy}","received_events_url":"https://api.github.com/users/drcrallen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T17:15:43Z","updated_at":"2017-03-11T17:15:43Z","author_association":"CONTRIBUTOR","body":"@leventov prior conversations were about requiring a java8 JVM, not about compiling all of druid for java 8 target. Requiring a java8 target for all code would need community discussion. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285881810/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285884883","html_url":"https://github.com/apache/druid/pull/3889#issuecomment-285884883","issue_url":"https://api.github.com/repos/apache/druid/issues/3889","id":285884883,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTg4NDg4Mw==","user":{"login":"leventov","id":609240,"node_id":"MDQ6VXNlcjYwOTI0MA==","avatar_url":"https://avatars.githubusercontent.com/u/609240?v=4","gravatar_id":"","url":"https://api.github.com/users/leventov","html_url":"https://github.com/leventov","followers_url":"https://api.github.com/users/leventov/followers","following_url":"https://api.github.com/users/leventov/following{/other_user}","gists_url":"https://api.github.com/users/leventov/gists{/gist_id}","starred_url":"https://api.github.com/users/leventov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leventov/subscriptions","organizations_url":"https://api.github.com/users/leventov/orgs","repos_url":"https://api.github.com/users/leventov/repos","events_url":"https://api.github.com/users/leventov/events{/privacy}","received_events_url":"https://api.github.com/users/leventov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T17:46:07Z","updated_at":"2017-03-11T17:46:07Z","author_association":"MEMBER","body":"@drcrallen why compiling Druid for Java 8 target is more risky, than requiring Java 8 JVM?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285884883/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285889198","html_url":"https://github.com/apache/druid/pull/1937#issuecomment-285889198","issue_url":"https://api.github.com/repos/apache/druid/issues/1937","id":285889198,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTg4OTE5OA==","user":{"login":"estliberitas","id":568962,"node_id":"MDQ6VXNlcjU2ODk2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/568962?v=4","gravatar_id":"","url":"https://api.github.com/users/estliberitas","html_url":"https://github.com/estliberitas","followers_url":"https://api.github.com/users/estliberitas/followers","following_url":"https://api.github.com/users/estliberitas/following{/other_user}","gists_url":"https://api.github.com/users/estliberitas/gists{/gist_id}","starred_url":"https://api.github.com/users/estliberitas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/estliberitas/subscriptions","organizations_url":"https://api.github.com/users/estliberitas/orgs","repos_url":"https://api.github.com/users/estliberitas/repos","events_url":"https://api.github.com/users/estliberitas/events{/privacy}","received_events_url":"https://api.github.com/users/estliberitas/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T18:15:55Z","updated_at":"2017-03-11T18:15:55Z","author_association":"CONTRIBUTOR","body":"@fjy gonna continue working on it. Hopefully, not that much in code base has changed.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285889198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285899979","html_url":"https://github.com/apache/druid/issues/3025#issuecomment-285899979","issue_url":"https://api.github.com/repos/apache/druid/issues/3025","id":285899979,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTg5OTk3OQ==","user":{"login":"HongZhu","id":26179808,"node_id":"MDQ6VXNlcjI2MTc5ODA4","avatar_url":"https://avatars.githubusercontent.com/u/26179808?v=4","gravatar_id":"","url":"https://api.github.com/users/HongZhu","html_url":"https://github.com/HongZhu","followers_url":"https://api.github.com/users/HongZhu/followers","following_url":"https://api.github.com/users/HongZhu/following{/other_user}","gists_url":"https://api.github.com/users/HongZhu/gists{/gist_id}","starred_url":"https://api.github.com/users/HongZhu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HongZhu/subscriptions","organizations_url":"https://api.github.com/users/HongZhu/orgs","repos_url":"https://api.github.com/users/HongZhu/repos","events_url":"https://api.github.com/users/HongZhu/events{/privacy}","received_events_url":"https://api.github.com/users/HongZhu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T21:04:21Z","updated_at":"2017-03-11T21:04:21Z","author_association":"NONE","body":"FYI: recompiling Druid codebase by upgrading snappy-java dependency to at least 1.1.1.3 fixes the issue. ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285899979/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285900004","html_url":"https://github.com/apache/druid/issues/3025#issuecomment-285900004","issue_url":"https://api.github.com/repos/apache/druid/issues/3025","id":285900004,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTkwMDAwNA==","user":{"login":"HongZhu","id":26179808,"node_id":"MDQ6VXNlcjI2MTc5ODA4","avatar_url":"https://avatars.githubusercontent.com/u/26179808?v=4","gravatar_id":"","url":"https://api.github.com/users/HongZhu","html_url":"https://github.com/HongZhu","followers_url":"https://api.github.com/users/HongZhu/followers","following_url":"https://api.github.com/users/HongZhu/following{/other_user}","gists_url":"https://api.github.com/users/HongZhu/gists{/gist_id}","starred_url":"https://api.github.com/users/HongZhu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HongZhu/subscriptions","organizations_url":"https://api.github.com/users/HongZhu/orgs","repos_url":"https://api.github.com/users/HongZhu/repos","events_url":"https://api.github.com/users/HongZhu/events{/privacy}","received_events_url":"https://api.github.com/users/HongZhu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-11T21:04:36Z","updated_at":"2017-03-11T21:04:36Z","author_association":"NONE","body":"<dependency>\r\n  <groupId>org.xerial.snappy</groupId>\r\n  <artifactId>snappy-java</artifactId>\r\n  <version>1.1.1.3</version>\r\n  <type>jar</type>\r\n  <scope>compile</scope>\r\n</dependency>","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285900004/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/285975354","html_url":"https://github.com/apache/druid/pull/4038#issuecomment-285975354","issue_url":"https://api.github.com/repos/apache/druid/issues/4038","id":285975354,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NTk3NTM1NA==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-12T20:49:28Z","updated_at":"2017-03-12T20:49:28Z","author_association":"CONTRIBUTOR","body":"does it compare to smile encoding, because that what it used by broker/historicals ?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/285975354/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286001049","html_url":"https://github.com/apache/druid/pull/4038#issuecomment-286001049","issue_url":"https://api.github.com/repos/apache/druid/issues/4038","id":286001049,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjAwMTA0OQ==","user":{"login":"kaijianding","id":8663725,"node_id":"MDQ6VXNlcjg2NjM3MjU=","avatar_url":"https://avatars.githubusercontent.com/u/8663725?v=4","gravatar_id":"","url":"https://api.github.com/users/kaijianding","html_url":"https://github.com/kaijianding","followers_url":"https://api.github.com/users/kaijianding/followers","following_url":"https://api.github.com/users/kaijianding/following{/other_user}","gists_url":"https://api.github.com/users/kaijianding/gists{/gist_id}","starred_url":"https://api.github.com/users/kaijianding/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kaijianding/subscriptions","organizations_url":"https://api.github.com/users/kaijianding/orgs","repos_url":"https://api.github.com/users/kaijianding/repos","events_url":"https://api.github.com/users/kaijianding/events{/privacy}","received_events_url":"https://api.github.com/users/kaijianding/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T02:25:40Z","updated_at":"2017-03-13T02:25:40Z","author_association":"CONTRIBUTOR","body":"It works with smile encoding, not a replacement. It is based on jsonMapper and smileMapper. @b-slim ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286001049/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286013087","html_url":"https://github.com/apache/druid/issues/4037#issuecomment-286013087","issue_url":"https://api.github.com/repos/apache/druid/issues/4037","id":286013087,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjAxMzA4Nw==","user":{"login":"yashdeeph709","id":6427291,"node_id":"MDQ6VXNlcjY0MjcyOTE=","avatar_url":"https://avatars.githubusercontent.com/u/6427291?v=4","gravatar_id":"","url":"https://api.github.com/users/yashdeeph709","html_url":"https://github.com/yashdeeph709","followers_url":"https://api.github.com/users/yashdeeph709/followers","following_url":"https://api.github.com/users/yashdeeph709/following{/other_user}","gists_url":"https://api.github.com/users/yashdeeph709/gists{/gist_id}","starred_url":"https://api.github.com/users/yashdeeph709/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yashdeeph709/subscriptions","organizations_url":"https://api.github.com/users/yashdeeph709/orgs","repos_url":"https://api.github.com/users/yashdeeph709/repos","events_url":"https://api.github.com/users/yashdeeph709/events{/privacy}","received_events_url":"https://api.github.com/users/yashdeeph709/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T04:27:26Z","updated_at":"2017-03-13T04:27:26Z","author_association":"NONE","body":"Hi tdingus,\r\nThe groupby query mandatory requirement of  dimensionSpec which you didn't provided.\r\nYou can provide a dimension spec of various types: default,extraction,regexFiletered,listFiltered,lookup.\r\nWhile topn don't need a dimensionSpec.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286013087/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286033953","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-286033953","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":286033953,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjAzMzk1Mw==","user":{"login":"weijietong","id":728692,"node_id":"MDQ6VXNlcjcyODY5Mg==","avatar_url":"https://avatars.githubusercontent.com/u/728692?v=4","gravatar_id":"","url":"https://api.github.com/users/weijietong","html_url":"https://github.com/weijietong","followers_url":"https://api.github.com/users/weijietong/followers","following_url":"https://api.github.com/users/weijietong/following{/other_user}","gists_url":"https://api.github.com/users/weijietong/gists{/gist_id}","starred_url":"https://api.github.com/users/weijietong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/weijietong/subscriptions","organizations_url":"https://api.github.com/users/weijietong/orgs","repos_url":"https://api.github.com/users/weijietong/repos","events_url":"https://api.github.com/users/weijietong/events{/privacy}","received_events_url":"https://api.github.com/users/weijietong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T07:34:18Z","updated_at":"2017-03-13T10:44:22Z","author_association":"NONE","body":"@jihoonson  glad to see your join query idea , and coincidently , I am also woking on implementing a join method which I call it LocalJoin. It has the feature that a join query does not  need to be broadcasted, but partitioned on join keys of different data sources.   and I have done lots of the work .  I will  take another thread to talk about that .Please see #4040 , but I think we have something common to  agree upon , e.g. the join query json spec and something others.  ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286033953/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286080537","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-286080537","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":286080537,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjA4MDUzNw==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T11:21:45Z","updated_at":"2017-03-13T11:21:45Z","author_association":"CONTRIBUTOR","body":"Hi @weijietong, I read your proposal, and sounds great! Your proposal is about joining tables partitioned by same key, and actually it is one of the future works listed above. I'm really glad that you are already working on it. \r\nYeah, I also think that we will have some issues we need to agree. Here is my hangout address: ghoonson.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286080537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286082882","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-286082882","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":286082882,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjA4Mjg4Mg==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T11:33:40Z","updated_at":"2017-03-13T11:33:40Z","author_association":"CONTRIBUTOR","body":"@weijietong specifying intervals and granularities per DataSource will be really useful. Nice idea!","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286082882/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286084731","html_url":"https://github.com/apache/druid/issues/4040#issuecomment-286084731","issue_url":"https://api.github.com/repos/apache/druid/issues/4040","id":286084731,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjA4NDczMQ==","user":{"login":"jihoonson","id":2322288,"node_id":"MDQ6VXNlcjIzMjIyODg=","avatar_url":"https://avatars.githubusercontent.com/u/2322288?v=4","gravatar_id":"","url":"https://api.github.com/users/jihoonson","html_url":"https://github.com/jihoonson","followers_url":"https://api.github.com/users/jihoonson/followers","following_url":"https://api.github.com/users/jihoonson/following{/other_user}","gists_url":"https://api.github.com/users/jihoonson/gists{/gist_id}","starred_url":"https://api.github.com/users/jihoonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jihoonson/subscriptions","organizations_url":"https://api.github.com/users/jihoonson/orgs","repos_url":"https://api.github.com/users/jihoonson/repos","events_url":"https://api.github.com/users/jihoonson/events{/privacy}","received_events_url":"https://api.github.com/users/jihoonson/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T11:43:05Z","updated_at":"2017-03-13T11:43:05Z","author_association":"CONTRIBUTOR","body":"@weijietong thanks for your nice proposal! I have a couple of questions.\r\n\r\n- The json spec for join query seems not extensible to support other query types as well. Is the ```LocalJoin``` query designed to support only inner equi join? I think this idea can be used for other types like outer joins or partially theta joins as well.\r\n- Currently Druid supports [limited hash and range partition features](http://druid.io/docs/0.9.2/ingestion/batch-ingestion.html). It means, hash partitioning is allowed with only all dimensions and range partitioning is allowed with only a single dimension. Both partitioning schemes are not enough to cover various join cases. What is your plan for this problem?\r\n- How do you extend Druid's partitioning feature to realtimes? \r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286084731/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286099161","html_url":"https://github.com/apache/druid/issues/4040#issuecomment-286099161","issue_url":"https://api.github.com/repos/apache/druid/issues/4040","id":286099161,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjA5OTE2MQ==","user":{"login":"weijietong","id":728692,"node_id":"MDQ6VXNlcjcyODY5Mg==","avatar_url":"https://avatars.githubusercontent.com/u/728692?v=4","gravatar_id":"","url":"https://api.github.com/users/weijietong","html_url":"https://github.com/weijietong","followers_url":"https://api.github.com/users/weijietong/followers","following_url":"https://api.github.com/users/weijietong/following{/other_user}","gists_url":"https://api.github.com/users/weijietong/gists{/gist_id}","starred_url":"https://api.github.com/users/weijietong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/weijietong/subscriptions","organizations_url":"https://api.github.com/users/weijietong/orgs","repos_url":"https://api.github.com/users/weijietong/repos","events_url":"https://api.github.com/users/weijietong/events{/privacy}","received_events_url":"https://api.github.com/users/weijietong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T12:56:04Z","updated_at":"2017-03-13T12:59:51Z","author_association":"NONE","body":"@jihoonson  \r\n* To 1st question , the ```LocalJoin ``` query json spec was initially designed to support inner equal join. I agree that it has limited expression ability to express join direction like ```left , right outer join```  though left or right outer join query can also be implemented later by ```LocalJoin``` technology , and  this is the aspect that we can discuss upon that. \r\n\r\n* To 2st question, I have a little change to the hash batch ingestion to let it support one dimension partition. I have no plan to support the range partition ,as I have not thought about that.\r\n\r\n* To 3st question, We now do realtime ingestion through the push model.To push model, I plan to let the Overlord to generate a total shard number size workers .Each one of the workers will service a dedicated input data with specified bucket number , e.g. worker 1 will service data belongs to bucket 1,worker n will service data belongs to bucket n.  The input data will also have a bucket number calculation ``` bucketNumber=hash(jointField)%totalBucketSize ``` and transfers to the correspond worker . Then history  and realtime data can both stay together at the same physical machine ,as they share the same bucketNumber <---> machineHost relationship assignment.To pull model, I have not thought about that yet. Any advice will be appreciated .\r\n\r\n  \r\n","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286099161/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286100822","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-286100822","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":286100822,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjEwMDgyMg==","user":{"login":"weijietong","id":728692,"node_id":"MDQ6VXNlcjcyODY5Mg==","avatar_url":"https://avatars.githubusercontent.com/u/728692?v=4","gravatar_id":"","url":"https://api.github.com/users/weijietong","html_url":"https://github.com/weijietong","followers_url":"https://api.github.com/users/weijietong/followers","following_url":"https://api.github.com/users/weijietong/following{/other_user}","gists_url":"https://api.github.com/users/weijietong/gists{/gist_id}","starred_url":"https://api.github.com/users/weijietong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/weijietong/subscriptions","organizations_url":"https://api.github.com/users/weijietong/orgs","repos_url":"https://api.github.com/users/weijietong/repos","events_url":"https://api.github.com/users/weijietong/events{/privacy}","received_events_url":"https://api.github.com/users/weijietong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T13:03:52Z","updated_at":"2017-03-13T13:03:52Z","author_association":"NONE","body":"@jihoonson my hangout address is tongweijie178@gmail.com . For more details we can talk to each other on that.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286100822/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286119221","html_url":"https://github.com/apache/druid/issues/4032#issuecomment-286119221","issue_url":"https://api.github.com/repos/apache/druid/issues/4032","id":286119221,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjExOTIyMQ==","user":{"login":"weijietong","id":728692,"node_id":"MDQ6VXNlcjcyODY5Mg==","avatar_url":"https://avatars.githubusercontent.com/u/728692?v=4","gravatar_id":"","url":"https://api.github.com/users/weijietong","html_url":"https://github.com/weijietong","followers_url":"https://api.github.com/users/weijietong/followers","following_url":"https://api.github.com/users/weijietong/following{/other_user}","gists_url":"https://api.github.com/users/weijietong/gists{/gist_id}","starred_url":"https://api.github.com/users/weijietong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/weijietong/subscriptions","organizations_url":"https://api.github.com/users/weijietong/orgs","repos_url":"https://api.github.com/users/weijietong/repos","events_url":"https://api.github.com/users/weijietong/events{/privacy}","received_events_url":"https://api.github.com/users/weijietong/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T14:15:01Z","updated_at":"2017-03-13T14:15:01Z","author_association":"NONE","body":"@jihoonson I think you don't need to implement the ```HashJoin``` for broadcasted data. You can utilize the  ```BitmapMatrix ``` technology of my ```LocalJoin``` implementation.  ```HashJoin``` will take more memory space by holding the joint field value and materializing all the matched join result. More details about ```BitmapMatrix``` see my proposal ,maybe I will submit  that part of code first.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286119221/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286138568","html_url":"https://github.com/apache/druid/pull/4038#issuecomment-286138568","issue_url":"https://api.github.com/repos/apache/druid/issues/4038","id":286138568,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjEzODU2OA==","user":{"login":"b-slim","id":7376396,"node_id":"MDQ6VXNlcjczNzYzOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7376396?v=4","gravatar_id":"","url":"https://api.github.com/users/b-slim","html_url":"https://github.com/b-slim","followers_url":"https://api.github.com/users/b-slim/followers","following_url":"https://api.github.com/users/b-slim/following{/other_user}","gists_url":"https://api.github.com/users/b-slim/gists{/gist_id}","starred_url":"https://api.github.com/users/b-slim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b-slim/subscriptions","organizations_url":"https://api.github.com/users/b-slim/orgs","repos_url":"https://api.github.com/users/b-slim/repos","events_url":"https://api.github.com/users/b-slim/events{/privacy}","received_events_url":"https://api.github.com/users/b-slim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T15:16:39Z","updated_at":"2017-03-13T15:16:39Z","author_association":"CONTRIBUTOR","body":"@kaijianding this test is reporting the results for default Json ser/desr, and my question was would that be the same improvement if you use smile mapper `new DefaultObjectMapper(new SmileFactory());` ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286138568/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286143340","html_url":"https://github.com/apache/druid/pull/4038#issuecomment-286143340","issue_url":"https://api.github.com/repos/apache/druid/issues/4038","id":286143340,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE0MzM0MA==","user":{"login":"kaijianding","id":8663725,"node_id":"MDQ6VXNlcjg2NjM3MjU=","avatar_url":"https://avatars.githubusercontent.com/u/8663725?v=4","gravatar_id":"","url":"https://api.github.com/users/kaijianding","html_url":"https://github.com/kaijianding","followers_url":"https://api.github.com/users/kaijianding/followers","following_url":"https://api.github.com/users/kaijianding/following{/other_user}","gists_url":"https://api.github.com/users/kaijianding/gists{/gist_id}","starred_url":"https://api.github.com/users/kaijianding/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kaijianding/subscriptions","organizations_url":"https://api.github.com/users/kaijianding/orgs","repos_url":"https://api.github.com/users/kaijianding/repos","events_url":"https://api.github.com/users/kaijianding/events{/privacy}","received_events_url":"https://api.github.com/users/kaijianding/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T15:31:28Z","updated_at":"2017-03-13T15:31:28Z","author_association":"CONTRIBUTOR","body":"yes, this improvement applies both to jsonMapper and smileMapper. I updated the benchmark code to use smileMapper, please check. @b-slim ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286143340/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286160629","html_url":"https://github.com/apache/druid/issues/4037#issuecomment-286160629","issue_url":"https://api.github.com/repos/apache/druid/issues/4037","id":286160629,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE2MDYyOQ==","user":{"login":"tdingus","id":1499709,"node_id":"MDQ6VXNlcjE0OTk3MDk=","avatar_url":"https://avatars.githubusercontent.com/u/1499709?v=4","gravatar_id":"","url":"https://api.github.com/users/tdingus","html_url":"https://github.com/tdingus","followers_url":"https://api.github.com/users/tdingus/followers","following_url":"https://api.github.com/users/tdingus/following{/other_user}","gists_url":"https://api.github.com/users/tdingus/gists{/gist_id}","starred_url":"https://api.github.com/users/tdingus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tdingus/subscriptions","organizations_url":"https://api.github.com/users/tdingus/orgs","repos_url":"https://api.github.com/users/tdingus/repos","events_url":"https://api.github.com/users/tdingus/events{/privacy}","received_events_url":"https://api.github.com/users/tdingus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T16:24:51Z","updated_at":"2017-03-13T16:24:51Z","author_association":"NONE","body":"Hi yashdeeph709,\r\n\r\nThanks for replying. However, I did have \"dimensions\":\"apple\", which is according to http://druid.io/docs/latest/querying/topnquery.html.\r\n\r\nIt would be helpful if you could correct my example, and post it here.\r\n\r\n - tdingus","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286160629/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286162328","html_url":"https://github.com/apache/druid/issues/4037#issuecomment-286162328","issue_url":"https://api.github.com/repos/apache/druid/issues/4037","id":286162328,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE2MjMyOA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T16:29:48Z","updated_at":"2017-03-13T16:29:48Z","author_association":"CONTRIBUTOR","body":"@tdingus, topN only supports one dimension at a time, so it's \"dimension\" not \"dimensions\".","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286162328/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286162836","html_url":"https://github.com/apache/druid/issues/4036#issuecomment-286162836","issue_url":"https://api.github.com/repos/apache/druid/issues/4036","id":286162836,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE2MjgzNg==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T16:31:17Z","updated_at":"2017-03-13T16:31:17Z","author_association":"CONTRIBUTOR","body":"There isn't a known issue. Could you please provide some more details including logs?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286162836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286163547","html_url":"https://github.com/apache/druid/pull/4038#issuecomment-286163547","issue_url":"https://api.github.com/repos/apache/druid/issues/4038","id":286163547,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE2MzU0Nw==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T16:33:39Z","updated_at":"2017-03-13T16:33:39Z","author_association":"CONTRIBUTOR","body":"@kaijianding What is performance like if you serialize DateTimes as a timestamp + timezone offset, using a json array of `[long, long]`? If it's still good, we could do that without loss of functionality between historicals and brokers, and it could be on by default there.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286163547/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286166017","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-286166017","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":286166017,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE2NjAxNw==","user":{"login":"dclim","id":11050882,"node_id":"MDQ6VXNlcjExMDUwODgy","avatar_url":"https://avatars.githubusercontent.com/u/11050882?v=4","gravatar_id":"","url":"https://api.github.com/users/dclim","html_url":"https://github.com/dclim","followers_url":"https://api.github.com/users/dclim/followers","following_url":"https://api.github.com/users/dclim/following{/other_user}","gists_url":"https://api.github.com/users/dclim/gists{/gist_id}","starred_url":"https://api.github.com/users/dclim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dclim/subscriptions","organizations_url":"https://api.github.com/users/dclim/orgs","repos_url":"https://api.github.com/users/dclim/repos","events_url":"https://api.github.com/users/dclim/events{/privacy}","received_events_url":"https://api.github.com/users/dclim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T16:41:39Z","updated_at":"2017-03-13T16:41:39Z","author_association":"CONTRIBUTOR","body":"@pjain1 approach 2 sounds good to me, I agree that maxRowsPerSegment as a guideline rather than a hard cutoff makes sense. We would also be able to support something like #3439 now.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286166017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286168107","html_url":"https://github.com/apache/druid/issues/4037#issuecomment-286168107","issue_url":"https://api.github.com/repos/apache/druid/issues/4037","id":286168107,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE2ODEwNw==","user":{"login":"tdingus","id":1499709,"node_id":"MDQ6VXNlcjE0OTk3MDk=","avatar_url":"https://avatars.githubusercontent.com/u/1499709?v=4","gravatar_id":"","url":"https://api.github.com/users/tdingus","html_url":"https://github.com/tdingus","followers_url":"https://api.github.com/users/tdingus/followers","following_url":"https://api.github.com/users/tdingus/following{/other_user}","gists_url":"https://api.github.com/users/tdingus/gists{/gist_id}","starred_url":"https://api.github.com/users/tdingus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tdingus/subscriptions","organizations_url":"https://api.github.com/users/tdingus/orgs","repos_url":"https://api.github.com/users/tdingus/repos","events_url":"https://api.github.com/users/tdingus/events{/privacy}","received_events_url":"https://api.github.com/users/tdingus/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T16:48:33Z","updated_at":"2017-03-13T16:48:33Z","author_association":"NONE","body":"Hi gianm,\r\n\r\nThanks for your response and it is very clear :+1: ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286168107/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286169150","html_url":"https://github.com/apache/druid/issues/4016#issuecomment-286169150","issue_url":"https://api.github.com/repos/apache/druid/issues/4016","id":286169150,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE2OTE1MA==","user":{"login":"dclim","id":11050882,"node_id":"MDQ6VXNlcjExMDUwODgy","avatar_url":"https://avatars.githubusercontent.com/u/11050882?v=4","gravatar_id":"","url":"https://api.github.com/users/dclim","html_url":"https://github.com/dclim","followers_url":"https://api.github.com/users/dclim/followers","following_url":"https://api.github.com/users/dclim/following{/other_user}","gists_url":"https://api.github.com/users/dclim/gists{/gist_id}","starred_url":"https://api.github.com/users/dclim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dclim/subscriptions","organizations_url":"https://api.github.com/users/dclim/orgs","repos_url":"https://api.github.com/users/dclim/repos","events_url":"https://api.github.com/users/dclim/events{/privacy}","received_events_url":"https://api.github.com/users/dclim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T16:51:38Z","updated_at":"2017-03-13T16:51:38Z","author_association":"CONTRIBUTOR","body":"@pjain1 in this section:\r\n```\r\nOnce the task has consumed past all the offsets for all partitions for an individual check point then it can close the relevant appenderator and will hand off the segments handled by this appenderator.\r\n```\r\nDo you actually mean handoff (writing the segment metadata, pushing the segment to S3, and then waiting for it to be loaded by a historical) or writing the segment to local disk and starting a partition? Right now, it does the latter, and handoff only happens after taskDuration elapses. If we implemented handoff before the task completes, we would theoretically be able to get rid of the concept of taskDuration and could support longer running tasks without the indexing tasks accumulating too much data and affecting query performance. Longer running tasks would further reduce the number of segments created and would be a more efficient use of worker capacity. @gianm do you think it makes sense to look into this at this time?","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286169150/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286169718","html_url":"https://github.com/apache/druid/pull/4038#issuecomment-286169718","issue_url":"https://api.github.com/repos/apache/druid/issues/4038","id":286169718,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE2OTcxOA==","user":{"login":"kaijianding","id":8663725,"node_id":"MDQ6VXNlcjg2NjM3MjU=","avatar_url":"https://avatars.githubusercontent.com/u/8663725?v=4","gravatar_id":"","url":"https://api.github.com/users/kaijianding","html_url":"https://github.com/kaijianding","followers_url":"https://api.github.com/users/kaijianding/followers","following_url":"https://api.github.com/users/kaijianding/following{/other_user}","gists_url":"https://api.github.com/users/kaijianding/gists{/gist_id}","starred_url":"https://api.github.com/users/kaijianding/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kaijianding/subscriptions","organizations_url":"https://api.github.com/users/kaijianding/orgs","repos_url":"https://api.github.com/users/kaijianding/repos","events_url":"https://api.github.com/users/kaijianding/events{/privacy}","received_events_url":"https://api.github.com/users/kaijianding/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T16:53:15Z","updated_at":"2017-03-13T16:53:15Z","author_association":"CONTRIBUTOR","body":"usually broker and historical use same timezone, so the current implement is good enough for most cases.\r\nI will try to use [long, long] pair to find out whether it is still good enough and update the benchmark @gianm ","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286169718/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/druid/issues/comments/286173008","html_url":"https://github.com/apache/druid/pull/4038#issuecomment-286173008","issue_url":"https://api.github.com/repos/apache/druid/issues/4038","id":286173008,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjE3MzAwOA==","user":{"login":"gianm","id":1214075,"node_id":"MDQ6VXNlcjEyMTQwNzU=","avatar_url":"https://avatars.githubusercontent.com/u/1214075?v=4","gravatar_id":"","url":"https://api.github.com/users/gianm","html_url":"https://github.com/gianm","followers_url":"https://api.github.com/users/gianm/followers","following_url":"https://api.github.com/users/gianm/following{/other_user}","gists_url":"https://api.github.com/users/gianm/gists{/gist_id}","starred_url":"https://api.github.com/users/gianm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gianm/subscriptions","organizations_url":"https://api.github.com/users/gianm/orgs","repos_url":"https://api.github.com/users/gianm/repos","events_url":"https://api.github.com/users/gianm/events{/privacy}","received_events_url":"https://api.github.com/users/gianm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2017-03-13T17:02:48Z","updated_at":"2017-03-13T17:02:48Z","author_association":"CONTRIBUTOR","body":"Hmm, I don't think we need to worry about brokers/historicals being in non-UTC time zones, we have always said this is not a supported configuration.\r\n\r\nI was more thinking of supporting cases where a historical would return non-UTC time zones for other reasons, like when the \"granularity\" is a PeriodGranularity with a non-UTC time zone.","reactions":{"url":"https://api.github.com/repos/apache/druid/issues/comments/286173008/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]