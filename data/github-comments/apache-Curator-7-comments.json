[{"url":"https://api.github.com/repos/apache/curator/issues/comments/49808183","html_url":"https://github.com/apache/curator/pull/20#issuecomment-49808183","issue_url":"https://api.github.com/repos/apache/curator/issues/20","id":49808183,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5ODA4MTgz","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-22T22:07:49Z","updated_at":"2014-07-22T22:07:49Z","author_association":"CONTRIBUTOR","body":"Couple of minor comments about System.out.println() in the test case. Other than that, looks good to me.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49808183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709390","html_url":"https://github.com/apache/curator/issues/643#issuecomment-2604709390","issue_url":"https://api.github.com/repos/apache/curator/issues/643","id":2604709390,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkzOTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-22T22:39:03Z","updated_at":"2025-01-21T13:16:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benjamin.jaton\">benjamin.jaton</a>:</i>\n<p><a href=\"https://issues.apache.org/jira/browse/CURATOR-122\" title=\"ConnectionStateListener advertises READ_ONLY instead of CONNECTED the first time around\" class=\"issue-link\" data-issue-key=\"CURATOR-122\"><del>CURATOR-122</del></a> is about the very first state, <a href=\"https://issues.apache.org/jira/browse/CURATOR-123\" title=\"ConnectionStateListener advertises READ_ONLY instead of CONNECTED the first time around\" class=\"issue-link\" data-issue-key=\"CURATOR-123\"><del>CURATOR-123</del></a> is about the ConnectionStateManager sending duplicate events for when the ensemble goes read only.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709390/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709396","html_url":"https://github.com/apache/curator/issues/643#issuecomment-2604709396","issue_url":"https://api.github.com/repos/apache/curator/issues/643","id":2604709396,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDkzOTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-22T22:48:51Z","updated_at":"2025-01-21T13:16:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>I think I screwed up the issues. Anyway, READ_ONLY should be fixed. Please verify.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709396/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709401","html_url":"https://github.com/apache/curator/issues/643#issuecomment-2604709401","issue_url":"https://api.github.com/repos/apache/curator/issues/643","id":2604709401,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk0MDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T00:11:17Z","updated_at":"2025-01-21T13:16:34Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benjamin.jaton\">benjamin.jaton</a>:</i>\n<p>This is fixed in trunk.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709401/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709551","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709551","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709551,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1NTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T00:12:29Z","updated_at":"2025-01-21T13:16:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benjamin.jaton\">benjamin.jaton</a>:</i>\n<p>This is not fixed in trunk.</p>\n\n<p>I can still see the back and forth between the READ_ONLY and SUSPENDED states.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709551/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709562","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709562","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709562,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1NjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T00:18:13Z","updated_at":"2025-01-21T13:16:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>Why would this be a bug? This is what's coming from ZooKeeper, right? Or is Curator doing something wrong?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709562/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709571","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709571","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709571,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1NzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T00:26:53Z","updated_at":"2025-01-21T13:16:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benjamin.jaton\">benjamin.jaton</a>:</i>\n<p>When I go from 2 nodes to 1 node, I expect to see SUSPENDED and then READ_ONLY and then no more events.</p>\n\n<p>Instead of that I have several times: SUSPENDED, READ_ONLY, SUSPENDED, READ_ONLY, SUSPENDED, READ_ONLY, ...</p>\n\n<p>ZooKeeper stays in CONNECTEDREADONLY, it doesn't have the SUSPENDED state since it's specific to Curator's retry policy.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709571/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709579","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709579","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709579,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1Nzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T00:30:15Z","updated_at":"2025-01-21T13:16:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>A SUSPENDED means that ZooKeeper returned Disconnected. </p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709579/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709581","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709581","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709581,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1ODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T00:39:18Z","updated_at":"2025-01-21T13:16:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>I double checked by printing the ZooKeeper events as they come and I get:</p>\n\n<p>SyncConnected<br/>\nNEW STATE: CONNECTED<br/>\nDisconnected<br/>\nNEW STATE: SUSPENDED<br/>\nSyncConnected<br/>\nNEW STATE: RECONNECTED<br/>\nDisconnected<br/>\nNEW STATE: SUSPENDED<br/>\nConnectedReadOnly<br/>\nNEW STATE: READ_ONLY<br/>\nDisconnected<br/>\nNEW STATE: SUSPENDED<br/>\nConnectedReadOnly<br/>\nNEW STATE: READ_ONLY<br/>\nDisconnected<br/>\nNEW STATE: SUSPENDED<br/>\nConnectedReadOnly<br/>\nNEW STATE: READ_ONLY</p>\n\n<p>So, if anything, this is a ZooKeeper bug. Curator is just reporting what it's seeing.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709581/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709586","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709586","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709586,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1ODY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T16:52:20Z","updated_at":"2025-01-21T13:16:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benjamin.jaton\">benjamin.jaton</a>:</i>\n<p>Can we change the resolution to WONTFIX instead of FIXED?</p>\n\n<p>There is definitely a problem somewhere, such a flacky behavior is not what we would expect.<br/>\nI can't know if the issue is in the Curator API or the ZooKeeper one, but if you feel confident that it's on ZooKeeper side, it could be useful to open a JIRA for them.</p>\n\n<p>Note: when I create a separate ZooKeeper client to listen to the connection, I don't see the flickering of states.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709586/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709591","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709591","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709591,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T16:59:10Z","updated_at":"2025-01-21T13:16:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>The problem is that I screwed up. This fix is for <a href=\"https://issues.apache.org/jira/browse/CURATOR-122\" title=\"ConnectionStateListener advertises READ_ONLY instead of CONNECTED the first time around\" class=\"issue-link\" data-issue-key=\"CURATOR-122\"><del>CURATOR-122</del></a>. I need to fix this up.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709591/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709596","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709596","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709596,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk1OTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T16:59:46Z","updated_at":"2025-01-21T13:16:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>\"Note: when I create a separate ZooKeeper client to listen to the connection, I don't see the flickering of states.\"<br/>\nYou don't see Disconnected, ConnectedReadOnly, Disconnected, ConnectedReadOnly?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709601","html_url":"https://github.com/apache/curator/issues/644#issuecomment-2604709601","issue_url":"https://api.github.com/repos/apache/curator/issues/644","id":2604709601,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk2MDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T17:03:08Z","updated_at":"2025-01-21T13:16:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>If you still think there is a Curator issue, please open a new issue. I'm going to fix this one up.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709601/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709859","html_url":"https://github.com/apache/curator/issues/646#issuecomment-2604709859","issue_url":"https://api.github.com/repos/apache/curator/issues/646","id":2604709859,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk4NTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T17:39:02Z","updated_at":"2025-01-21T13:16:44Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>At this point, I believe this is a ZooKeeper issue as I showed by outputting the Zookeeper events as they come in. If you can show that this is Curator, I'd appreciate it. Otherwise, I'll close the issue.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49920594","html_url":"https://github.com/apache/curator/pull/19#issuecomment-49920594","issue_url":"https://api.github.com/repos/apache/curator/issues/19","id":49920594,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5OTIwNTk0","user":{"login":"pperalta","id":394956,"node_id":"MDQ6VXNlcjM5NDk1Ng==","avatar_url":"https://avatars.githubusercontent.com/u/394956?v=4","gravatar_id":"","url":"https://api.github.com/users/pperalta","html_url":"https://github.com/pperalta","followers_url":"https://api.github.com/users/pperalta/followers","following_url":"https://api.github.com/users/pperalta/following{/other_user}","gists_url":"https://api.github.com/users/pperalta/gists{/gist_id}","starred_url":"https://api.github.com/users/pperalta/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pperalta/subscriptions","organizations_url":"https://api.github.com/users/pperalta/orgs","repos_url":"https://api.github.com/users/pperalta/repos","events_url":"https://api.github.com/users/pperalta/events{/privacy}","received_events_url":"https://api.github.com/users/pperalta/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T19:10:41Z","updated_at":"2014-07-23T19:10:41Z","author_association":"CONTRIBUTOR","body":"Thanks for the feedback - I've pushed another commit to address your comments.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49920594/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709714","html_url":"https://github.com/apache/curator/issues/645#issuecomment-2604709714","issue_url":"https://api.github.com/repos/apache/curator/issues/645","id":2604709714,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk3MTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T19:10:46Z","updated_at":"2025-01-21T13:16:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user pperalta commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/19#issuecomment-49920594\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/19#issuecomment-49920594</a></p>\n\n<p>    Thanks for the feedback - I've pushed another commit to address your comments.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709714/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709717","html_url":"https://github.com/apache/curator/issues/645#issuecomment-2604709717","issue_url":"https://api.github.com/repos/apache/curator/issues/645","id":2604709717,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk3MTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T22:34:19Z","updated_at":"2025-01-21T13:16:41Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/19\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/19</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709717/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695551","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695551","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695551,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1NTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T23:42:45Z","updated_at":"2025-01-21T13:10:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15323038\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15323038</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{<br/>\n    +    TreeNode node = new TreeNode(fullPath, this);<br/>\n    +    if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +    {\n    +node.wasCreated();\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    +     * no child with that path, <code>null</code> is returned.<br/>\n    +     *<br/>\n    +     * @param fullPath full path to the node to check<br/>\n    +     * @return a possibly-empty list of children if the node is alive, or null<br/>\n    +     */<br/>\n    +    public SortedSet<String> getCurrentChildren(String fullPath)<br/>\n    +    {<br/>\n    +TreeNode node = find(fullPath);<br/>\n    +if ( node == null || node.nodeState.get() != NodeState.LIVE )<br/>\n    +{    +    return null;    +}\n<p>    +ConcurrentMap<String, TreeNode> map = node.children.get();<br/>\n    +SortedSet<String> result;<br/>\n    +if ( map == null )<br/>\n    +{<br/>\n    +    result = Collections.emptySortedSet();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Collections.emptySortedSet() is a new addition to Java 1.8. Curator is still building against Java 1.6.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695551/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695554","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695554","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695554,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T23:43:05Z","updated_at":"2025-01-21T13:10:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15323058\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15323058</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestTreeCache.java &#8212;<br/>\n    @@ -0,0 +1,421 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.CuratorFrameworkFactory;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.retry.RetryOneTime;<br/>\n    +import org.apache.curator.test.BaseClassForTests;<br/>\n    +import org.apache.curator.test.KillSession;<br/>\n    +import org.apache.curator.test.Timing;<br/>\n    +import org.apache.curator.utils.CloseableUtils;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.testng.Assert;<br/>\n    +import org.testng.annotations.AfterMethod;<br/>\n    +import org.testng.annotations.BeforeMethod;<br/>\n    +import org.testng.annotations.Test;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.concurrent.BlockingQueue;<br/>\n    +import java.util.concurrent.LinkedBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.TimeUnit;<br/>\n    +<br/>\n    +public class TestTreeCache extends BaseClassForTests<br/>\n    +{<br/>\n    +    private final Timing timing = new Timing();<br/>\n    +    private CuratorFramework client;<br/>\n    +    private TreeCache cache;<br/>\n    +    private List<Throwable> exceptions;<br/>\n    +    private BlockingQueue<TreeCacheEvent> events;<br/>\n    +    private TreeCacheListener eventListener;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * A TreeCache that records exceptions.<br/>\n    +     */<br/>\n    +    private TreeCache newTreeCache(String path, boolean cacheData)<br/>\n    +    {<br/>\n    +return new TreeCache(client, path, cacheData)<br/>\n    +{<br/>\n    +    @Override<br/>\n    +    protected void handleException(Throwable e)<br/>\n    +    </p>\n{\n    +exceptions.add(e);\n    +    }\n<p>    +};<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    @BeforeMethod<br/>\n    +    public void setup() throws Exception<br/>\n    +    {<br/>\n    +super.setup();<br/>\n    +<br/>\n    +exceptions = new ArrayList<Throwable>();<br/>\n    +events = new LinkedBlockingQueue<TreeCacheEvent>();<br/>\n    +eventListener = new TreeCacheListener()<br/>\n    +{<br/>\n    +    @Override<br/>\n    +    public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception<br/>\n    +    </p>\n{\n    +events.add(event);\n    +    }\n<p>    +};<br/>\n    +<br/>\n    +client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));<br/>\n    +client.start();<br/>\n    +client.getUnhandledErrorListenable().addListener(new UnhandledErrorListener()<br/>\n    + {<br/>\n    +     @Override<br/>\n    +     public void unhandledError(String message, Throwable e)<br/>\n    +     </p>\n{\n    + exceptions.add(e);\n    +     }\n<p>    + }<br/>\n    +);<br/>\n    +cache = newTreeCache(\"/test\", true);<br/>\n    +cache.getListenable().addListener(eventListener);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    @AfterMethod<br/>\n    +    public void teardown() throws Exception<br/>\n    +    {<br/>\n    +try<br/>\n    +{<br/>\n    +    try<br/>\n    +    {<br/>\n    +for ( Throwable exception : exceptions )<br/>\n    +</p>\n{\n    +    Assert.fail(\"Exception was thrown\", exception);\n    +}\n<p>    +    }<br/>\n    +    finally<br/>\n    +    </p>\n{\n    +CloseableUtils.closeQuietly(cache);\n    +CloseableUtils.closeQuietly(client);\n    +    }\n<p>    +}<br/>\n    +finally<br/>\n    +</p>\n{\n    +    super.teardown();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Test<br/>\n    +    public void testStartup() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/1\", \"one\".getBytes());\n    +client.create().forPath(\"/test/2\", \"two\".getBytes());\n    +client.create().forPath(\"/test/3\", \"three\".getBytes());\n    +client.create().forPath(\"/test/2/sub\", \"two-sub\".getBytes());\n    +\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/1\", \"one\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/2\", \"two\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/3\", \"three\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/2/sub\", \"two-sub\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +assertNoMoreEvents();\n    +\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), ImmutableSortedSet.of(\"1\", \"2\", \"3\"));\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test/1\"), Collections.emptySet());\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test/2\"), ImmutableSortedSet.of(\"sub\"));\n    +Assert.assertNull(cache.getCurrentChildren(\"/test/non_exist\"));\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testStartEmpty() throws Exception<br/>\n    +    </p>\n{\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.create().forPath(\"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testAsyncInitialPopulation() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/one\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testSyncInitialPopulation() throws Exception<br/>\n    +    </p>\n{\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/one\");\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testChildrenInitialized() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\", \"\".getBytes());\n    +client.create().forPath(\"/test/1\", \"1\".getBytes());\n    +client.create().forPath(\"/test/2\", \"2\".getBytes());\n    +client.create().forPath(\"/test/3\", \"3\".getBytes());\n    +\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/1\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/2\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/3\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testUpdateWhenNotCachingData() throws Exception<br/>\n    +    </p>\n{\n    +cache = newTreeCache(\"/test\", false);\n    +cache.getListenable().addListener(eventListener);\n    +\n    +client.create().forPath(\"/test\");\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.create().forPath(\"/test/foo\", \"first\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +\n    +client.setData().forPath(\"/test/foo\", \"something new\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_UPDATED, \"/test/foo\");\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testDeleteThenCreate() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/foo\", \"one\".getBytes());\n    +cache.start();\n    +\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.delete().forPath(\"/test/foo\");\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/foo\");\n    +client.create().forPath(\"/test/foo\", \"two\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    // see <a href=\"https://github.com/Netflix/curator/issues/27\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/Netflix/curator/issues/27</a> - was caused by not comparing old->new data<br/>\n    +    @Test<br/>\n    +    public void testIssue27() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/a\");\n    +client.create().forPath(\"/test/b\");\n    +client.create().forPath(\"/test/c\");\n    +\n    +client.getChildren().forPath(\"/test\");\n    +\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/a\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/b\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/c\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.delete().forPath(\"/test/a\");\n    +client.create().forPath(\"/test/a\");\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/a\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/a\");\n    +\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testKilledSession() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +cache.start();\n    +\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.create().forPath(\"/test/foo\", \"foo\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +client.create().withMode(CreateMode.EPHEMERAL).forPath(\"/test/me\", \"data\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/me\");\n    +\n    +KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n    +assertEvent(TreeCacheEvent.Type.CONNECTION_SUSPENDED);\n    +assertEvent(TreeCacheEvent.Type.CONNECTION_LOST);\n    +assertEvent(TreeCacheEvent.Type.CONNECTION_RECONNECTED);\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/me\");\n    +\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testBasics() throws Exception<br/>\n    +    {<br/>\n    +client.create().forPath(\"/test\");<br/>\n    +cache.start();<br/>\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");<br/>\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);<br/>\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), Collections.emptySortedSet());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Collections.emptySortedSet() is a new addition to Java 1.8. Curator is still building against Java 1.6.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695554/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695557","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695557","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695557,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1NTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-23T23:43:11Z","updated_at":"2025-01-21T13:10:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15323064\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15323064</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestTreeCache.java &#8212;<br/>\n    @@ -0,0 +1,421 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.CuratorFrameworkFactory;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.retry.RetryOneTime;<br/>\n    +import org.apache.curator.test.BaseClassForTests;<br/>\n    +import org.apache.curator.test.KillSession;<br/>\n    +import org.apache.curator.test.Timing;<br/>\n    +import org.apache.curator.utils.CloseableUtils;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.testng.Assert;<br/>\n    +import org.testng.annotations.AfterMethod;<br/>\n    +import org.testng.annotations.BeforeMethod;<br/>\n    +import org.testng.annotations.Test;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.concurrent.BlockingQueue;<br/>\n    +import java.util.concurrent.LinkedBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.TimeUnit;<br/>\n    +<br/>\n    +public class TestTreeCache extends BaseClassForTests<br/>\n    +{<br/>\n    +    private final Timing timing = new Timing();<br/>\n    +    private CuratorFramework client;<br/>\n    +    private TreeCache cache;<br/>\n    +    private List<Throwable> exceptions;<br/>\n    +    private BlockingQueue<TreeCacheEvent> events;<br/>\n    +    private TreeCacheListener eventListener;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * A TreeCache that records exceptions.<br/>\n    +     */<br/>\n    +    private TreeCache newTreeCache(String path, boolean cacheData)<br/>\n    +    {<br/>\n    +return new TreeCache(client, path, cacheData)<br/>\n    +{<br/>\n    +    @Override<br/>\n    +    protected void handleException(Throwable e)<br/>\n    +    </p>\n{\n    +exceptions.add(e);\n    +    }\n<p>    +};<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    @BeforeMethod<br/>\n    +    public void setup() throws Exception<br/>\n    +    {<br/>\n    +super.setup();<br/>\n    +<br/>\n    +exceptions = new ArrayList<Throwable>();<br/>\n    +events = new LinkedBlockingQueue<TreeCacheEvent>();<br/>\n    +eventListener = new TreeCacheListener()<br/>\n    +{<br/>\n    +    @Override<br/>\n    +    public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception<br/>\n    +    </p>\n{\n    +events.add(event);\n    +    }\n<p>    +};<br/>\n    +<br/>\n    +client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));<br/>\n    +client.start();<br/>\n    +client.getUnhandledErrorListenable().addListener(new UnhandledErrorListener()<br/>\n    + {<br/>\n    +     @Override<br/>\n    +     public void unhandledError(String message, Throwable e)<br/>\n    +     </p>\n{\n    + exceptions.add(e);\n    +     }\n<p>    + }<br/>\n    +);<br/>\n    +cache = newTreeCache(\"/test\", true);<br/>\n    +cache.getListenable().addListener(eventListener);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    @AfterMethod<br/>\n    +    public void teardown() throws Exception<br/>\n    +    {<br/>\n    +try<br/>\n    +{<br/>\n    +    try<br/>\n    +    {<br/>\n    +for ( Throwable exception : exceptions )<br/>\n    +</p>\n{\n    +    Assert.fail(\"Exception was thrown\", exception);\n    +}\n<p>    +    }<br/>\n    +    finally<br/>\n    +    </p>\n{\n    +CloseableUtils.closeQuietly(cache);\n    +CloseableUtils.closeQuietly(client);\n    +    }\n<p>    +}<br/>\n    +finally<br/>\n    +</p>\n{\n    +    super.teardown();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Test<br/>\n    +    public void testStartup() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/1\", \"one\".getBytes());\n    +client.create().forPath(\"/test/2\", \"two\".getBytes());\n    +client.create().forPath(\"/test/3\", \"three\".getBytes());\n    +client.create().forPath(\"/test/2/sub\", \"two-sub\".getBytes());\n    +\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/1\", \"one\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/2\", \"two\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/3\", \"three\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/2/sub\", \"two-sub\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +assertNoMoreEvents();\n    +\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), ImmutableSortedSet.of(\"1\", \"2\", \"3\"));\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test/1\"), Collections.emptySet());\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test/2\"), ImmutableSortedSet.of(\"sub\"));\n    +Assert.assertNull(cache.getCurrentChildren(\"/test/non_exist\"));\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testStartEmpty() throws Exception<br/>\n    +    </p>\n{\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.create().forPath(\"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testAsyncInitialPopulation() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/one\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testSyncInitialPopulation() throws Exception<br/>\n    +    </p>\n{\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/one\");\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testChildrenInitialized() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\", \"\".getBytes());\n    +client.create().forPath(\"/test/1\", \"1\".getBytes());\n    +client.create().forPath(\"/test/2\", \"2\".getBytes());\n    +client.create().forPath(\"/test/3\", \"3\".getBytes());\n    +\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/1\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/2\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/3\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testUpdateWhenNotCachingData() throws Exception<br/>\n    +    </p>\n{\n    +cache = newTreeCache(\"/test\", false);\n    +cache.getListenable().addListener(eventListener);\n    +\n    +client.create().forPath(\"/test\");\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.create().forPath(\"/test/foo\", \"first\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +\n    +client.setData().forPath(\"/test/foo\", \"something new\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_UPDATED, \"/test/foo\");\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testDeleteThenCreate() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/foo\", \"one\".getBytes());\n    +cache.start();\n    +\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.delete().forPath(\"/test/foo\");\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/foo\");\n    +client.create().forPath(\"/test/foo\", \"two\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    // see <a href=\"https://github.com/Netflix/curator/issues/27\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/Netflix/curator/issues/27</a> - was caused by not comparing old->new data<br/>\n    +    @Test<br/>\n    +    public void testIssue27() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/a\");\n    +client.create().forPath(\"/test/b\");\n    +client.create().forPath(\"/test/c\");\n    +\n    +client.getChildren().forPath(\"/test\");\n    +\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/a\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/b\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/c\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.delete().forPath(\"/test/a\");\n    +client.create().forPath(\"/test/a\");\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/a\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/a\");\n    +\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testKilledSession() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +cache.start();\n    +\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.create().forPath(\"/test/foo\", \"foo\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +client.create().withMode(CreateMode.EPHEMERAL).forPath(\"/test/me\", \"data\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/me\");\n    +\n    +KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n    +assertEvent(TreeCacheEvent.Type.CONNECTION_SUSPENDED);\n    +assertEvent(TreeCacheEvent.Type.CONNECTION_LOST);\n    +assertEvent(TreeCacheEvent.Type.CONNECTION_RECONNECTED);\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/me\");\n    +\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testBasics() throws Exception<br/>\n    +    {<br/>\n    +client.create().forPath(\"/test\");<br/>\n    +cache.start();<br/>\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");<br/>\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);<br/>\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), Collections.emptySortedSet());<br/>\n    +<br/>\n    +client.create().forPath(\"/test/one\", \"hey there\".getBytes());<br/>\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/one\");<br/>\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), ImmutableSortedSet.of(\"one\"));<br/>\n    +Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"hey there\");<br/>\n    +<br/>\n    +client.setData().forPath(\"/test/one\", \"sup!\".getBytes());<br/>\n    +assertEvent(TreeCacheEvent.Type.NODE_UPDATED, \"/test/one\");<br/>\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), ImmutableSortedSet.of(\"one\"));<br/>\n    +Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");<br/>\n    +<br/>\n    +client.delete().forPath(\"/test/one\");<br/>\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/one\");<br/>\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), Collections.emptySortedSet());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Collections.emptySortedSet() is a new addition to Java 1.8. Curator is still building against Java 1.6.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695557/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695562","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695562","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695562,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1NjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T01:07:31Z","updated_at":"2025-01-21T13:10:37Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15325624\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15325624</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/test/java/org/apache/curator/framework/recipes/cache/TestTreeCache.java &#8212;<br/>\n    @@ -0,0 +1,421 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.CuratorFrameworkFactory;<br/>\n    +import org.apache.curator.framework.api.UnhandledErrorListener;<br/>\n    +import org.apache.curator.retry.RetryOneTime;<br/>\n    +import org.apache.curator.test.BaseClassForTests;<br/>\n    +import org.apache.curator.test.KillSession;<br/>\n    +import org.apache.curator.test.Timing;<br/>\n    +import org.apache.curator.utils.CloseableUtils;<br/>\n    +import org.apache.zookeeper.CreateMode;<br/>\n    +import org.testng.Assert;<br/>\n    +import org.testng.annotations.AfterMethod;<br/>\n    +import org.testng.annotations.BeforeMethod;<br/>\n    +import org.testng.annotations.Test;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.concurrent.BlockingQueue;<br/>\n    +import java.util.concurrent.LinkedBlockingQueue;<br/>\n    +import java.util.concurrent.Semaphore;<br/>\n    +import java.util.concurrent.TimeUnit;<br/>\n    +<br/>\n    +public class TestTreeCache extends BaseClassForTests<br/>\n    +{<br/>\n    +    private final Timing timing = new Timing();<br/>\n    +    private CuratorFramework client;<br/>\n    +    private TreeCache cache;<br/>\n    +    private List<Throwable> exceptions;<br/>\n    +    private BlockingQueue<TreeCacheEvent> events;<br/>\n    +    private TreeCacheListener eventListener;<br/>\n    +<br/>\n    +    /**<br/>\n    +     * A TreeCache that records exceptions.<br/>\n    +     */<br/>\n    +    private TreeCache newTreeCache(String path, boolean cacheData)<br/>\n    +    {<br/>\n    +return new TreeCache(client, path, cacheData)<br/>\n    +{<br/>\n    +    @Override<br/>\n    +    protected void handleException(Throwable e)<br/>\n    +    </p>\n{\n    +exceptions.add(e);\n    +    }\n<p>    +};<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    @BeforeMethod<br/>\n    +    public void setup() throws Exception<br/>\n    +    {<br/>\n    +super.setup();<br/>\n    +<br/>\n    +exceptions = new ArrayList<Throwable>();<br/>\n    +events = new LinkedBlockingQueue<TreeCacheEvent>();<br/>\n    +eventListener = new TreeCacheListener()<br/>\n    +{<br/>\n    +    @Override<br/>\n    +    public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception<br/>\n    +    </p>\n{\n    +events.add(event);\n    +    }\n<p>    +};<br/>\n    +<br/>\n    +client = CuratorFrameworkFactory.newClient(server.getConnectString(), timing.session(), timing.connection(), new RetryOneTime(1));<br/>\n    +client.start();<br/>\n    +client.getUnhandledErrorListenable().addListener(new UnhandledErrorListener()<br/>\n    + {<br/>\n    +     @Override<br/>\n    +     public void unhandledError(String message, Throwable e)<br/>\n    +     </p>\n{\n    + exceptions.add(e);\n    +     }\n<p>    + }<br/>\n    +);<br/>\n    +cache = newTreeCache(\"/test\", true);<br/>\n    +cache.getListenable().addListener(eventListener);<br/>\n    +    }<br/>\n    +<br/>\n    +    @Override<br/>\n    +    @AfterMethod<br/>\n    +    public void teardown() throws Exception<br/>\n    +    {<br/>\n    +try<br/>\n    +{<br/>\n    +    try<br/>\n    +    {<br/>\n    +for ( Throwable exception : exceptions )<br/>\n    +</p>\n{\n    +    Assert.fail(\"Exception was thrown\", exception);\n    +}\n<p>    +    }<br/>\n    +    finally<br/>\n    +    </p>\n{\n    +CloseableUtils.closeQuietly(cache);\n    +CloseableUtils.closeQuietly(client);\n    +    }\n<p>    +}<br/>\n    +finally<br/>\n    +</p>\n{\n    +    super.teardown();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    @Test<br/>\n    +    public void testStartup() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/1\", \"one\".getBytes());\n    +client.create().forPath(\"/test/2\", \"two\".getBytes());\n    +client.create().forPath(\"/test/3\", \"three\".getBytes());\n    +client.create().forPath(\"/test/2/sub\", \"two-sub\".getBytes());\n    +\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/1\", \"one\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/2\", \"two\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/3\", \"three\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/2/sub\", \"two-sub\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +assertNoMoreEvents();\n    +\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), ImmutableSortedSet.of(\"1\", \"2\", \"3\"));\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test/1\"), Collections.emptySet());\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test/2\"), ImmutableSortedSet.of(\"sub\"));\n    +Assert.assertNull(cache.getCurrentChildren(\"/test/non_exist\"));\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testStartEmpty() throws Exception<br/>\n    +    </p>\n{\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.create().forPath(\"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testAsyncInitialPopulation() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/one\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testSyncInitialPopulation() throws Exception<br/>\n    +    </p>\n{\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/one\", \"hey there\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/one\");\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testChildrenInitialized() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\", \"\".getBytes());\n    +client.create().forPath(\"/test/1\", \"1\".getBytes());\n    +client.create().forPath(\"/test/2\", \"2\".getBytes());\n    +client.create().forPath(\"/test/3\", \"3\".getBytes());\n    +\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/1\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/2\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/3\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testUpdateWhenNotCachingData() throws Exception<br/>\n    +    </p>\n{\n    +cache = newTreeCache(\"/test\", false);\n    +cache.getListenable().addListener(eventListener);\n    +\n    +client.create().forPath(\"/test\");\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.create().forPath(\"/test/foo\", \"first\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +\n    +client.setData().forPath(\"/test/foo\", \"something new\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_UPDATED, \"/test/foo\");\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testDeleteThenCreate() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/foo\", \"one\".getBytes());\n    +cache.start();\n    +\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.delete().forPath(\"/test/foo\");\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/foo\");\n    +client.create().forPath(\"/test/foo\", \"two\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    // see <a href=\"https://github.com/Netflix/curator/issues/27\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/Netflix/curator/issues/27</a> - was caused by not comparing old->new data<br/>\n    +    @Test<br/>\n    +    public void testIssue27() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +client.create().forPath(\"/test/a\");\n    +client.create().forPath(\"/test/b\");\n    +client.create().forPath(\"/test/c\");\n    +\n    +client.getChildren().forPath(\"/test\");\n    +\n    +cache.start();\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/a\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/b\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/c\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.delete().forPath(\"/test/a\");\n    +client.create().forPath(\"/test/a\");\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/a\");\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/a\");\n    +\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testKilledSession() throws Exception<br/>\n    +    </p>\n{\n    +client.create().forPath(\"/test\");\n    +cache.start();\n    +\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);\n    +\n    +client.create().forPath(\"/test/foo\", \"foo\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/foo\");\n    +client.create().withMode(CreateMode.EPHEMERAL).forPath(\"/test/me\", \"data\".getBytes());\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/me\");\n    +\n    +KillSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString());\n    +assertEvent(TreeCacheEvent.Type.CONNECTION_SUSPENDED);\n    +assertEvent(TreeCacheEvent.Type.CONNECTION_LOST);\n    +assertEvent(TreeCacheEvent.Type.CONNECTION_RECONNECTED);\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/me\");\n    +\n    +assertNoMoreEvents();\n    +    }\n<p>    +<br/>\n    +    @Test<br/>\n    +    public void testBasics() throws Exception<br/>\n    +    {<br/>\n    +client.create().forPath(\"/test\");<br/>\n    +cache.start();<br/>\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test\");<br/>\n    +assertEvent(TreeCacheEvent.Type.INITIALIZED);<br/>\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), Collections.emptySortedSet());<br/>\n    +<br/>\n    +client.create().forPath(\"/test/one\", \"hey there\".getBytes());<br/>\n    +assertEvent(TreeCacheEvent.Type.NODE_ADDED, \"/test/one\");<br/>\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), ImmutableSortedSet.of(\"one\"));<br/>\n    +Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"hey there\");<br/>\n    +<br/>\n    +client.setData().forPath(\"/test/one\", \"sup!\".getBytes());<br/>\n    +assertEvent(TreeCacheEvent.Type.NODE_UPDATED, \"/test/one\");<br/>\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), ImmutableSortedSet.of(\"one\"));<br/>\n    +Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()), \"sup!\");<br/>\n    +<br/>\n    +client.delete().forPath(\"/test/one\");<br/>\n    +assertEvent(TreeCacheEvent.Type.NODE_REMOVED, \"/test/one\");<br/>\n    +Assert.assertEquals(cache.getCurrentChildren(\"/test\"), Collections.emptySortedSet());<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Oops!  No problem, can remove those.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695562/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49963530","html_url":"https://github.com/apache/curator/pull/17#issuecomment-49963530","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":49963530,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5OTYzNTMw","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T03:23:46Z","updated_at":"2014-07-24T03:23:46Z","author_association":"CONTRIBUTOR","body":"The testChildrenInitialized, testIssue27 and testStartup are all failing for me? Are they passing for you?\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49963530/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695565","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695565","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695565,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1NjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T03:23:54Z","updated_at":"2025-01-21T13:10:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-49963530\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-49963530</a></p>\n\n<p>    The testChildrenInitialized, testIssue27 and testStartup are all failing for me? Are they passing for you?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695565/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49967202","html_url":"https://github.com/apache/curator/pull/17#issuecomment-49967202","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":49967202,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5OTY3MjAy","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T04:47:07Z","updated_at":"2014-07-24T04:47:07Z","author_association":"CONTRIBUTOR","body":"Hmm, that's weird.  Yeah, they're all passing for me, both in intellij and maven with a clean build.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49967202/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695572","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695572","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695572,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1NzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T04:47:13Z","updated_at":"2025-01-21T13:10:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-49967202\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-49967202</a></p>\n\n<p>    Hmm, that's weird.  Yeah, they're all passing for me, both in intellij and maven with a clean build.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695572/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49967308","html_url":"https://github.com/apache/curator/pull/17#issuecomment-49967308","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":49967308,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5OTY3MzA4","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T04:49:30Z","updated_at":"2014-07-24T04:54:12Z","author_association":"MEMBER","body":"testChildrenInitialized, testIssue27 and testStartup fail for me as well. Note: I run under Java 6 (i modified this PR to work under Java 6).\n\nhttps://gist.github.com/Randgalt/76e518fa240a8b2c347b\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49967308/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695578","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695578","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695578,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1Nzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T04:49:35Z","updated_at":"2025-01-21T13:10:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-49967308\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-49967308</a></p>\n\n<p>    testChildrenInitialized, testIssue27 and testStartup fail for me as well. Note: I run under Java 6 (i modified this PR to work under Java 6).</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695578/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49967763","html_url":"https://github.com/apache/curator/pull/17#issuecomment-49967763","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":49967763,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5OTY3NzYz","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T05:00:06Z","updated_at":"2014-07-24T05:00:06Z","author_association":"CONTRIBUTOR","body":"They're failing for me both in eclipse and via Maven. I'm running on Java 1.7.0 on OSX\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49967763/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695587","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695587","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695587,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1ODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T05:00:12Z","updated_at":"2025-01-21T13:10:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-49967763\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-49967763</a></p>\n\n<p>    They're failing for me both in eclipse and via Maven. I'm running on Java 1.7.0 on OSX</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695587/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/49991637","html_url":"https://github.com/apache/curator/pull/17#issuecomment-49991637","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":49991637,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5OTkxNjM3","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T10:28:19Z","updated_at":"2014-07-24T10:28:19Z","author_association":"CONTRIBUTOR","body":"Thanks guys, I was able to repro under 1.7 (I don't have 1.6 on OSX to test against).  Interestingly, it looks like the order in which `event.getChildren()` names appear during `CuratorEventType.CHILDREN` differs between JDK versions.  So now I'm sorting the names of added children to increase test determinism.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/49991637/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695591","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695591","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695591,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1OTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T10:28:25Z","updated_at":"2025-01-21T13:10:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-49991637\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-49991637</a></p>\n\n<p>    Thanks guys, I was able to repro under 1.7 (I don't have 1.6 on OSX to test against).  Interestingly, it looks like the order in which `event.getChildren()` names appear during `CuratorEventType.CHILDREN` differs between JDK versions.  So now I'm sorting the names of added children to increase test determinism.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695591/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709997","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604709997","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604709997,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk5OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-24T14:58:02Z","updated_at":"2025-01-21T13:16:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>A possible solution is to expose a method in CuratorZookeeperClient, isStarted(), or something that returns false if the client is been closed. Then, performBackgroundOperation() can check this and silently fail.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709997/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710002","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710002","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710002,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T01:36:36Z","updated_at":"2025-01-21T13:16:48Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>Another think we could do is convert the backgroundOperations loop from an executor to just a thread, and join() the background operations loop before calling client.close().  (Or set a latch for it to notice and exit, and it sets a latch back when it's done.)</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50110235","html_url":"https://github.com/apache/curator/pull/17#issuecomment-50110235","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":50110235,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMTEwMjM1","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T05:47:07Z","updated_at":"2014-07-25T05:47:07Z","author_association":"CONTRIBUTOR","body":"Tests are all good for me now, will have a look at the code now.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50110235/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695595","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695595","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695595,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU1OTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T05:47:15Z","updated_at":"2025-01-21T13:10:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-50110235\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-50110235</a></p>\n\n<p>    Tests are all good for me now, will have a look at the code now.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695595/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695601","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695601","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695601,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU2MDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T05:49:17Z","updated_at":"2025-01-21T13:10:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15387161\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15387161</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,608 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Remove</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695601/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695606","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695606","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695606,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU2MDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T05:51:35Z","updated_at":"2025-01-21T13:10:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15387199\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15387199</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,608 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Remove</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695606/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695611","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695611","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695611,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU2MTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T05:53:48Z","updated_at":"2025-01-21T13:10:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15387221\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15387221</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,608 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    // Present new children in sorted order for test determinism.<br/>\n    +    List<String> newChildren = new ArrayList<String>();<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{\n    +    newChildren.add(child);\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    Collections.sort(newChildren);<br/>\n    +    for ( String child : newChildren )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +TreeNode node = new TreeNode(fullPath, this);<br/>\n    +if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +{\n    +    node.wasCreated();\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    +     * no child with that path, <code>null</code> is returned.<br/>\n    +     *<br/>\n    +     * @param fullPath full path to the node to check<br/>\n    +     * @return a possibly-empty list of children if the node is alive, or null<br/>\n    +     */<br/>\n    +    public SortedSet<String> getCurrentChildren(String fullPath)<br/>\n    +    {<br/>\n    +TreeNode node = find(fullPath);<br/>\n    +if ( node == null || node.nodeState.get() != NodeState.LIVE )<br/>\n    +{    +    return null;    +}\n<p>    +ConcurrentMap<String, TreeNode> map = node.children.get();<br/>\n    +SortedSet<String> result;<br/>\n    +if ( map == null )<br/>\n    +</p>\n{\n    +    result = ImmutableSortedSet.of();\n    +}\n<p>    +else<br/>\n    +</p>\n{\n    +    result = ImmutableSortedSet.copyOf(map.keySet());\n    +}\n<p>    +<br/>\n    +// Double-check liveness after retreiving children.<br/>\n    +return node.nodeState.get() == NodeState.LIVE ? result : null;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current data for the given path. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. If there is no child with that path,<br/>\n    +     * <code>null</code> is returned.<br/>\n    +     *<br/>\n    +     * @param fullPath full path to the node to check<br/>\n    +     * @return data if the node is alive, or null<br/>\n    +     */<br/>\n    +    public ChildData getCurrentData(String fullPath)<br/>\n    +    {<br/>\n    +TreeNode node = find(fullPath);<br/>\n    +if ( node == null || node.nodeState.get() != NodeState.LIVE )<br/>\n    +</p>\n{\n    +    return null;\n    +}\n<p>    +ChildData result = new ChildData(node.path, node.stat.get(), node.data.get());<br/>\n    +// Double-check liveness after retreiving stat / data.<br/>\n    +return node.nodeState.get() == NodeState.LIVE ? result : null;<br/>\n    +    }<br/>\n    +<br/>\n    +    void callListeners(final TreeCacheEvent event)<br/>\n    +    {<br/>\n    +listeners.forEach(new Function<TreeCacheListener, Void>()<br/>\n    +  {<br/>\n    +      @Override<br/>\n    +      public Void apply(TreeCacheListener listener)<br/>\n    +      {<br/>\n    +  try<br/>\n    +  </p>\n{\n    +      listener.childEvent(client, event);\n    +  }\n<p>    +  catch ( Exception e )<br/>\n    +  </p>\n{\n    +      handleException(e);\n    +  }\n<p>    +  return null;<br/>\n    +      }<br/>\n    +  }<br/>\n    + );<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Default behavior is just to log the exception<br/>\n    +     *<br/>\n    +     * @param e the exception<br/>\n    +     */<br/>\n    +    protected void handleException(Throwable e)<br/>\n    +    </p>\n{\n    +LOG.error(\"\", e);\n    +    }\n<p>    +<br/>\n    +    private void handleStateChange(ConnectionState newState)<br/>\n    +    {<br/>\n    +switch ( newState )<br/>\n    +{<br/>\n    +case SUSPENDED:<br/>\n    +    publishEvent(TreeCacheEvent.Type.CONNECTION_SUSPENDED);<br/>\n    +    break;<br/>\n    +<br/>\n    +case LOST:<br/>\n    +    publishEvent(TreeCacheEvent.Type.CONNECTION_LOST);<br/>\n    +    break;<br/>\n    +<br/>\n    +case RECONNECTED:<br/>\n    +    try<br/>\n    +    </p>\n{\n    +root.wasReconnected();\n    +publishEvent(TreeCacheEvent.Type.CONNECTION_RECONNECTED);\n    +    }\n<p>    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }\n<p>    +    break;<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void publishEvent(TreeCacheEvent.Type type)<br/>\n    +    </p>\n{\n    +publishEvent(new TreeCacheEvent(type, null));\n    +    }\n<p>    +<br/>\n    +    private void publishEvent(TreeCacheEvent.Type type, String path)<br/>\n    +    </p>\n{\n    +publishEvent(new TreeCacheEvent(type, new ChildData(path, null, null)));\n    +    }\n<p>    +<br/>\n    +    private void publishEvent(TreeCacheEvent.Type type, ChildData data)<br/>\n    +    </p>\n{\n    +publishEvent(new TreeCacheEvent(type, data));\n    +    }\n<p>    +<br/>\n    +    private void publishEvent(final TreeCacheEvent event)<br/>\n    +    {<br/>\n    +System.out.println(event);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Remove</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695616","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695616","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695616,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU2MTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T06:07:21Z","updated_at":"2025-01-21T13:10:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#discussion_r15387439\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#discussion_r15387439</a></p>\n\n<p>    &#8212; Diff: curator-recipes/src/main/java/org/apache/curator/framework/recipes/cache/TreeCache.java &#8212;<br/>\n    @@ -0,0 +1,600 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + *   <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing,<br/>\n    + * software distributed under the License is distributed on an<br/>\n    + * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br/>\n    + * KIND, either express or implied.  See the License for the<br/>\n    + * specific language governing permissions and limitations<br/>\n    + * under the License.<br/>\n    + */<br/>\n    +<br/>\n    +package org.apache.curator.framework.recipes.cache;<br/>\n    +<br/>\n    +import com.google.common.base.Function;<br/>\n    +import com.google.common.collect.ImmutableSortedSet;<br/>\n    +import com.google.common.collect.Maps;<br/>\n    +import org.apache.curator.framework.CuratorFramework;<br/>\n    +import org.apache.curator.framework.api.BackgroundCallback;<br/>\n    +import org.apache.curator.framework.api.CuratorEvent;<br/>\n    +import org.apache.curator.framework.listen.ListenerContainer;<br/>\n    +import org.apache.curator.framework.state.ConnectionState;<br/>\n    +import org.apache.curator.framework.state.ConnectionStateListener;<br/>\n    +import org.apache.curator.utils.CloseableExecutorService;<br/>\n    +import org.apache.curator.utils.ThreadUtils;<br/>\n    +import org.apache.curator.utils.ZKPaths;<br/>\n    +import org.apache.zookeeper.KeeperException;<br/>\n    +import org.apache.zookeeper.WatchedEvent;<br/>\n    +import org.apache.zookeeper.Watcher;<br/>\n    +import org.apache.zookeeper.data.Stat;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import java.io.Closeable;<br/>\n    +import java.io.IOException;<br/>\n    +import java.util.ArrayList;<br/>\n    +import java.util.Collections;<br/>\n    +import java.util.List;<br/>\n    +import java.util.SortedSet;<br/>\n    +import java.util.concurrent.ConcurrentMap;<br/>\n    +import java.util.concurrent.ExecutorService;<br/>\n    +import java.util.concurrent.Executors;<br/>\n    +import java.util.concurrent.ThreadFactory;<br/>\n    +import java.util.concurrent.atomic.AtomicLong;<br/>\n    +import java.util.concurrent.atomic.AtomicReference;<br/>\n    +<br/>\n    +/**<br/>\n    + * <p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class<br/>\n    + * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can<br/>\n    + * register a listener that will get notified when changes occur.</p><br/>\n    + * <p></p><br/>\n    + * <p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must<br/>\n    + * be prepared for false-positives and false-negatives. Additionally, always use the version number<br/>\n    + * when updating data to avoid overwriting another process' change.</p><br/>\n    + */<br/>\n    +public class TreeCache implements Closeable<br/>\n    +{<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(TreeCache.class);<br/>\n    +<br/>\n    +    private enum NodeState<br/>\n    +    </p>\n{\n    +PENDING, LIVE, DEAD\n    +    }\n<p>    +<br/>\n    +    final class TreeNode implements Watcher, BackgroundCallback<br/>\n    +    {<br/>\n    +private final AtomicReference<NodeState> nodeState = new AtomicReference<NodeState>(NodeState.PENDING);<br/>\n    +private final String path;<br/>\n    +private final TreeNode parent;<br/>\n    +private final AtomicReference<Stat> stat = new AtomicReference<Stat>();<br/>\n    +private final AtomicReference<byte[]> data = new AtomicReference<byte[]>();<br/>\n    +private final AtomicReference<ConcurrentMap<String, TreeNode>> children = new AtomicReference<ConcurrentMap<String, TreeNode>>();<br/>\n    +<br/>\n    +TreeNode(String path, TreeNode parent)<br/>\n    +</p>\n{\n    +    this.path = path;\n    +    this.parent = parent;\n    +}\n<p>    +<br/>\n    +private void refreshChildren() throws Exception<br/>\n    +</p>\n{\n    +    outstandingOps.incrementAndGet();\n    +    client.getChildren().usingWatcher(this).inBackground(this).forPath(path);\n    +}\n<p>    +<br/>\n    +private void refreshData() throws Exception<br/>\n    +{<br/>\n    +    outstandingOps.incrementAndGet();<br/>\n    +    if ( dataIsCompressed )<br/>\n    +    </p>\n{\n    +client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    </p>\n{\n    +client.getData().usingWatcher(this).inBackground(this).forPath(path);\n    +    }\n<p>    +}<br/>\n    +<br/>\n    +private void wasReconnected() throws Exception<br/>\n    +{<br/>\n    +    refreshData();<br/>\n    +    refreshChildren();<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +for ( TreeNode child : childMap.values() )<br/>\n    +</p>\n{\n    +    child.wasReconnected();\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +private void wasCreated() throws Exception<br/>\n    +</p>\n{\n    +    refreshData();\n    +    refreshChildren();\n    +}\n<p>    +<br/>\n    +private void wasDeleted() throws Exception<br/>\n    +{<br/>\n    +    stat.set(null);<br/>\n    +    data.set(null);<br/>\n    +    client.clearWatcherReferences(this);<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.getAndSet(null);<br/>\n    +    if ( childMap != null )<br/>\n    +    {<br/>\n    +ArrayList<TreeNode> childCopy = new ArrayList<TreeNode>(childMap.values());<br/>\n    +childMap.clear();<br/>\n    +for ( TreeNode child : childCopy )<br/>\n    +</p>\n{\n    +    child.wasDeleted();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    if ( treeState.get() == TreeState.CLOSED )<br/>\n    +    </p>\n{\n    +return;\n    +    }\n<p>    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.LIVE, NodeState.DEAD) )<br/>\n    +    </p>\n{\n    +publishEvent(TreeCacheEvent.Type.NODE_REMOVED, path);\n    +    }\n<p>    +<br/>\n    +    if ( parent == null )<br/>\n    +    </p>\n{\n    +// Root node; use an exist query to watch for existence.\n    +client.checkExists().usingWatcher(this).inBackground().forPath(path);\n    +    }\n<p>    +    else<br/>\n    +    {<br/>\n    +// Remove from parent if we're currently a child<br/>\n    +ConcurrentMap<String, TreeNode> parentChildMap = parent.children.get();<br/>\n    +if ( parentChildMap != null )<br/>\n    +</p>\n{\n    +    parentChildMap.remove(ZKPaths.getNodeFromPath(path), this);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void process(WatchedEvent event)<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    try<br/>\n    +    {<br/>\n    +switch ( event.getType() )<br/>\n    +</p>\n{\n    +case NodeCreated:\n    +    assert parent == null;\n    +    wasCreated();\n    +    break;\n    +case NodeChildrenChanged:\n    +    refreshChildren();\n    +    break;\n    +case NodeDataChanged:\n    +    refreshData();\n    +    break;\n    +case NodeDeleted:\n    +    wasDeleted();\n    +    break;\n    +}\n<p>    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    </p>\n{\n    +handleException(e);\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +@Override<br/>\n    +public void processResult(CuratorFramework client, CuratorEvent event) throws Exception<br/>\n    +{<br/>\n    +    System.out.println(event);<br/>\n    +    switch ( event.getType() )<br/>\n    +    {<br/>\n    +    case EXISTS:<br/>\n    +// TODO: should only happen for root node<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{\n    +    nodeState.compareAndSet(NodeState.DEAD, NodeState.PENDING);\n    +    wasCreated();\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    case CHILDREN:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    stat.set(event.getStat());<br/>\n    +<br/>\n    +    if ( event.getChildren().isEmpty() )<br/>\n    +    {\n    +break;\n    +    }<br/>\n    +<br/>\n    +    ConcurrentMap<String, TreeNode> childMap = children.get();<br/>\n    +    if ( childMap == null )<br/>\n    +    {<br/>\n    +childMap = Maps.newConcurrentMap();<br/>\n    +if ( !children.compareAndSet(null, childMap) )<br/>\n    +{\n    +    childMap = children.get();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    for ( String child : event.getChildren() )<br/>\n    +    {<br/>\n    +String fullPath = ZKPaths.makePath(path, child);<br/>\n    +if ( !childMap.containsKey(child) )<br/>\n    +{<br/>\n    +    TreeNode node = new TreeNode(fullPath, this);<br/>\n    +    if ( childMap.putIfAbsent(child, node) == null )<br/>\n    +    {\n    +node.wasCreated();\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{    +    wasDeleted();    +}<br/>\n    +break;<br/>\n    +    case GET_DATA:<br/>\n    +if ( event.getResultCode() == KeeperException.Code.OK.intValue() )<br/>\n    +{<br/>\n    +    Stat oldStat = stat.getAndSet(event.getStat());<br/>\n    +    if ( cacheData )<br/>\n    +    {\n    +data.set(event.getData());\n    +    }<br/>\n    +<br/>\n    +    if ( nodeState.compareAndSet(NodeState.PENDING, NodeState.LIVE) )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_ADDED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +    else if ( oldStat.getMzxid() != event.getStat().getMzxid() )<br/>\n    +    {\n    +publishEvent(TreeCacheEvent.Type.NODE_UPDATED, new ChildData(event.getPath(), event.getStat(), event.getData()));\n    +    }<br/>\n    +}<br/>\n    +else if ( event.getResultCode() == KeeperException.Code.NONODE.intValue() )<br/>\n    +{\n    +    wasDeleted();\n    +}<br/>\n    +break;<br/>\n    +    default:<br/>\n    +handleException(new Exception(String.format(\"Unknown event %s\", event)));<br/>\n    +    }<br/>\n    +<br/>\n    +    if ( outstandingOps.decrementAndGet() == 0 )<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.LATENT, TreeState.STARTED) )<br/>\n    +{\n    +    publishEvent(TreeCacheEvent.Type.INITIALIZED);\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private enum TreeState<br/>\n    +    {\n    +LATENT,\n    +STARTED,\n    +CLOSED\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Detemines when to publish the initialized event.<br/>\n    +     */<br/>\n    +    private final AtomicLong outstandingOps = new AtomicLong(0);<br/>\n    +<br/>\n    +    private final TreeNode root;<br/>\n    +    private final CuratorFramework client;<br/>\n    +    private final CloseableExecutorService executorService;<br/>\n    +    private final boolean cacheData;<br/>\n    +    private final boolean dataIsCompressed;<br/>\n    +    private final ListenerContainer<TreeCacheListener> listeners = new ListenerContainer<TreeCacheListener>();<br/>\n    +    private final AtomicReference<TreeState> treeState = new AtomicReference<TreeState>(TreeState.LATENT);<br/>\n    +<br/>\n    +    private final ConnectionStateListener connectionStateListener = new ConnectionStateListener()<br/>\n    +    {<br/>\n    +@Override<br/>\n    +public void stateChanged(CuratorFramework client, ConnectionState newState)<br/>\n    +{\n    +    handleStateChange(newState);\n    +}<br/>\n    +    };<br/>\n    +<br/>\n    +    private static final ThreadFactory defaultThreadFactory = ThreadUtils.newThreadFactory(\"TreeCache\");<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client    the client<br/>\n    +     * @param path      path to watch<br/>\n    +     * @param cacheData if true, node contents are cached in addition to the stat<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(defaultThreadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param clientthe client<br/>\n    +     * @param path  path to watch<br/>\n    +     * @param cacheData     if true, node contents are cached in addition to the stat<br/>\n    +     * @param threadFactory factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, false, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param threadFactory    factory to use when creating internal threads<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, ThreadFactory threadFactory)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory), true));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final ExecutorService executorService)<br/>\n    +    {\n    +this(client, path, cacheData, dataIsCompressed, new CloseableExecutorService(executorService));\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * @param client   the client<br/>\n    +     * @param path     path to watch<br/>\n    +     * @param cacheDataif true, node contents are cached in addition to the stat<br/>\n    +     * @param dataIsCompressed if true, data in the path is compressed<br/>\n    +     * @param executorService  Closeable ExecutorService to use for the TreeCache's background thread<br/>\n    +     */<br/>\n    +    public TreeCache(CuratorFramework client, String path, boolean cacheData, boolean dataIsCompressed, final CloseableExecutorService executorService)<br/>\n    +    {\n    +this.root = new TreeNode(path, null);\n    +this.client = client;\n    +this.cacheData = cacheData;\n    +this.dataIsCompressed = dataIsCompressed;\n    +this.executorService = executorService;\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Start the cache. The cache is not started automatically. You must call this method.<br/>\n    +     *<br/>\n    +     * @throws Exception errors<br/>\n    +     */<br/>\n    +    public void start() throws Exception<br/>\n    +    {\n    +client.getConnectionStateListenable().addListener(connectionStateListener);\n    +root.wasCreated();\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Close/end the cache<br/>\n    +     *<br/>\n    +     * @throws java.io.IOException errors<br/>\n    +     */<br/>\n    +    @Override<br/>\n    +    public void close() throws IOException<br/>\n    +    {<br/>\n    +if ( treeState.compareAndSet(TreeState.STARTED, TreeState.CLOSED) )<br/>\n    +{<br/>\n    +    client.getConnectionStateListenable().removeListener(connectionStateListener);<br/>\n    +    listeners.clear();<br/>\n    +    executorService.close();<br/>\n    +    try<br/>\n    +    {\n    +root.wasDeleted();\n    +    }<br/>\n    +    catch ( Exception e )<br/>\n    +    {    +handleException(e);    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the cache listenable<br/>\n    +     *<br/>\n    +     * @return listenable<br/>\n    +     */<br/>\n    +    public ListenerContainer<TreeCacheListener> getListenable()<br/>\n    +    </p>\n{\n    +return listeners;\n    +    }\n<p>    +<br/>\n    +    private TreeNode find(String fullPath)<br/>\n    +    {<br/>\n    +if ( !fullPath.startsWith(root.path) )<br/>\n    +</p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +TreeNode current = root;<br/>\n    +if ( fullPath.length() > root.path.length() )<br/>\n    +{<br/>\n    +    List<String> split = ZKPaths.split(fullPath.substring(root.path.length()));<br/>\n    +    for ( String part : split )<br/>\n    +    {<br/>\n    +ConcurrentMap<String, TreeNode> map = current.children.get();<br/>\n    +if ( map == null )<br/>\n    +</p>\n{\n    +    return null;\n    +}<br/>\n    +current = map.get(part);<br/>\n    +if ( current == null )<br/>\n    +{    +    return null;    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return current;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Return the current set of children. There are no guarantees of accuracy. This is<br/>\n    +     * merely the most recent view of the data. The data is returned in sorted order. If there is<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I think that it would be nice for this method to return the the subtree for the path.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695616/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50111927","html_url":"https://github.com/apache/curator/pull/17#issuecomment-50111927","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":50111927,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMTExOTI3","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T06:20:07Z","updated_at":"2014-07-25T06:20:07Z","author_association":"CONTRIBUTOR","body":"Overall, looks really good. I've made a few minor comments. My only other comment would be that it would be nice to see some more unit tests specific to a multi level cache. It's good that the TreeCache works against all of the PathChildrenCache tests, but I could only see 1 test that specifically deals with data with a depth > 2.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50111927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695621","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695621","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695621,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU2MjE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T06:20:17Z","updated_at":"2025-01-21T13:10:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-50111927\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-50111927</a></p>\n\n<p>    Overall, looks really good. I've made a few minor comments. My only other comment would be that it would be nice to see some more unit tests specific to a multi level cache. It's good that the TreeCache works against all of the PathChildrenCache tests, but I could only see 1 test that specifically deals with data with a depth > 2.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695621/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710290","html_url":"https://github.com/apache/curator/issues/648#issuecomment-2604710290","issue_url":"https://api.github.com/repos/apache/curator/issues/648","id":2604710290,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAyOTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T18:25:03Z","updated_at":"2025-01-21T13:16:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user madrob opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/21\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/21</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-127\" title=\"Fix trivial warnings\" class=\"issue-link\" data-issue-key=\"CURATOR-127\"><del>CURATOR-127</del></a> Fix trivial warnings</p>\n\n<p>    Remove wildcard imports. Add generic types to Class.<br/>\n    Add serialVersionUID to Serializable.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/madrob/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/madrob/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-127\" title=\"Fix trivial warnings\" class=\"issue-link\" data-issue-key=\"CURATOR-127\"><del>CURATOR-127</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/21.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/21.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #21</p>\n\n<hr />\n<p>commit 15a0aaceca48da49898dc25a9c7cc6521708e8ff<br/>\nAuthor: Mike Drob <mdrob@cloudera.com><br/>\nDate:   2014-07-25T18:23:10Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-127\" title=\"Fix trivial warnings\" class=\"issue-link\" data-issue-key=\"CURATOR-127\"><del>CURATOR-127</del></a> Fix trivial warnings</p>\n\n<p>    Remove wildcard imports. Add generic types to Class.<br/>\n    Add serialVersionUID to Serializable.</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710290/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710297","html_url":"https://github.com/apache/curator/issues/648#issuecomment-2604710297","issue_url":"https://api.github.com/repos/apache/curator/issues/648","id":2604710297,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAyOTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-25T23:03:05Z","updated_at":"2025-01-21T13:16:55Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/21\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/21</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710297/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709868","html_url":"https://github.com/apache/curator/issues/646#issuecomment-2604709868","issue_url":"https://api.github.com/repos/apache/curator/issues/646","id":2604709868,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MDk4Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-26T04:21:23Z","updated_at":"2025-01-21T13:16:45Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benjamin.jaton\">benjamin.jaton</a>:</i>\n<p>I recreated everything from the trunk version of ZooKeeper and Curator.<br/>\nI could reproduce the problem described above right away using the Curator API.</p>\n\n<p>I tried to mimic my test case with the ZooKeeper API, basically I created a client with Watcher, and I did a .exists with Watcher as well, but I couldn't reproduce the behavior (flickering of states)<br/>\nAt this point I don't know the Curator API enough to bridge the gap and prove that it comes from Curator or ZooKeeper.</p>\n\n<p>There is a problem somewhere though.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604709868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50246127","html_url":"https://github.com/apache/curator/pull/17#issuecomment-50246127","issue_url":"https://api.github.com/repos/apache/curator/issues/17","id":50246127,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMjQ2MTI3","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-26T19:30:50Z","updated_at":"2014-07-26T19:30:50Z","author_association":"CONTRIBUTOR","body":"Great!  I'll remove the prints, add a getSubtree(), and add more tests.  Wanted to be sure the basic approach was good before I added too much more. :)\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50246127/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695626","html_url":"https://github.com/apache/curator/issues/554#issuecomment-2604695626","issue_url":"https://api.github.com/repos/apache/curator/issues/554","id":2604695626,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTU2MjY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-26T19:30:57Z","updated_at":"2025-01-21T13:10:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/17#issuecomment-50246127\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/17#issuecomment-50246127</a></p>\n\n<p>    Great!  I'll remove the prints, add a getSubtree(), and add more tests.  Wanted to be sure the basic approach was good before I added too much more. <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604695626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710007","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710007","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710007,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwMDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T06:18:18Z","updated_at":"2025-01-21T13:16:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>I've had a bit of a look at this and have a unit test to reproduce the issue. It would seem that (unless I'm missing something), it would be simplest just to shutdown the executor thread before the ZooKeeper client is closed. </p>\n\n<p>In the CuratorFrameworkImpl method, this:</p>\n\n<p>    client.close();<br/>\n    namespaceWatcherMap.close();<br/>\n    if ( executorService != null )</p>\n    {\nexecutorService.shutdownNow();\n    }<br/>\n<br/>\nwould be changed to:<br/>\n    namespaceWatcherMap.close();<br/>\n    if ( executorService != null )<br/>\n    {executorService.shutdownNow();    }\n\n<p>    client.close();</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710011","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710011","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710011,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwMTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T13:10:41Z","updated_at":"2025-01-21T13:16:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>I think the above change is a good idea, but it probably won't totally solve the problem. executorService.shutdownNow() will just interrupt the threads and, so, the client will still get closed while a background thread is executing. </p>\n\n<p>We could consider calling executorService.awaitTermination() but that would be a significant change.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710011/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710014","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710014","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710014,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwMTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T17:45:08Z","updated_at":"2025-01-21T13:16:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>Honestly, the executor is only used to start one thread.  I would just replace the Executor with a Thread, and join() it.  If you guys like I can cook up a patch.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710014/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710019","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710019","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710019,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwMTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T17:47:15Z","updated_at":"2025-01-21T13:16:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>Also, versions of Java < 1.8 have a bug in FutureTask.cancel() where the <b>wrong thread</b> will sometimes get interrupted (and that's the underlying thing that happens when you call Executor.shutdownNow()).</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710019/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710023","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710023","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710023,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwMjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T17:47:34Z","updated_at":"2025-01-21T13:16:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>An Executor is just a thread as well. I'm not sure how changing to a Thread would help.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710023/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50380674","html_url":"https://github.com/apache/curator/pull/22#issuecomment-50380674","issue_url":"https://api.github.com/repos/apache/curator/issues/22","id":50380674,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMzgwNjc0","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T18:45:32Z","updated_at":"2014-07-28T18:45:32Z","author_association":"CONTRIBUTOR","body":"oops wrong number\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50380674/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710027","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710027","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710027,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwMjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T18:45:57Z","updated_at":"2025-01-21T13:16:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user dragonsinth opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a>: Fix race condition in CuratorFrameworkImpl.close()</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/dragonsinth/curator\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/dragonsinth/curator</a> <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #23</p>\n\n<hr />\n<p>commit 247e02152a96b58f344439d589d02065f1bd2632<br/>\nAuthor: Scott Blum <scottb@squareup.com><br/>\nDate:   2014-07-28T18:10:37Z</p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a>: Fix race condition in CuratorFrameworkImpl.close()</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710027/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710031","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710031","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710031,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwMzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T18:48:58Z","updated_at":"2025-01-21T13:16:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>You're right, Thread.interrupt(), Thread.join() is almost identical to Executor.shutdownNow(), Executor.awaitTermination().... EXCEPT for the JDK bug which affects Executor.shutdownNow().</p>\n\n<p><a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7132378\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7132378</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710031/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710037","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710037","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710037,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwMzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:04:18Z","updated_at":"2025-01-21T13:16:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15483096\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15483096</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -722,39 +725,35 @@ public void retriesExhausted(OperationAndData<String> operationAndData)</p>\n\n<p> private <DATA_TYPE> void handleBackgroundOperationException(OperationAndData<DATA_TYPE> operationAndData, Throwable e)<br/>\n {</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>do<br/>\n    +if ( (operationAndData != null) && RetryLoop.isRetryException(e) )<br/>\n     {</li>\n\t<li>if ( (operationAndData != null) && RetryLoop.isRetryException(e) )<br/>\n    +    if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )<br/>\n    +    \n{\n    +log.debug(\"Retry-able exception received\", e);\n    +    }\n<p>    +    if ( client.getRetryPolicy().allowRetry(operationAndData.getThenIncrementRetryCount(), operationAndData.getElapsedTimeMs(), operationAndData) )<br/>\n {<br/>\n     if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )</p>\n     {\n    -    log.debug(\"Retry-able exception received\", e);\n    +    log.debug(\"Retrying operation\");\n     }</li>\n\t<li>if ( client.getRetryPolicy().allowRetry(operationAndData.getThenIncrementRetryCount(), operationAndData.getElapsedTimeMs(), operationAndData) )<br/>\n    +backgroundOperations.offer(operationAndData);<br/>\n    +return;<br/>\n    +    }<br/>\n    +    else<br/>\n    +    {<br/>\n    +if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )<br/>\n     {</li>\n\t<li>if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )</li>\n\t<li>{\n    -log.debug(\"Retrying operation\");\n    -    }</li>\n\t<li>backgroundOperations.offer(operationAndData);</li>\n\t<li>break;<br/>\n    +    log.debug(\"Retry policy did not allow retry\");<br/>\n     }</li>\n\t<li>else<br/>\n    +if ( operationAndData.getErrorCallback() != null )<br/>\n     {</li>\n\t<li>if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )</li>\n\t<li>{\n    -log.debug(\"Retry policy did not allow retry\");\n    -    }</li>\n\t<li>if ( operationAndData.getErrorCallback() != null )</li>\n\t<li>{\n    -operationAndData.getErrorCallback().retriesExhausted(operationAndData);\n    -    }\n<p>    +    operationAndData.getErrorCallback().retriesExhausted(operationAndData);<br/>\n     }<br/>\n }<br/>\n    -</p></li>\n\t<li>logError(\"Background exception was not retry-able or retry gave up\", e);<br/>\n     }</li>\n\t<li>while ( false );<br/>\n    +<br/>\n    +logError(\"Background exception was not retry-able or retry gave up\", e);\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    This is unrelated to the main change.  While I was in here, I noticed this method was more complicated than it needed to be.  I could revert this section if you guys would prefer to isolate changes.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710037/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710042","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710042","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710042,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwNDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:05:55Z","updated_at":"2025-01-21T13:16:49Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15483196\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15483196</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -770,9 +769,8 @@ private void backgroundOperationsLoop()<br/>\n debugListener.listen(operationAndData);<br/>\n     }<br/>\n }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>catch ( InterruptedException e )<br/>\n    +    catch ( InterruptedException ignored )<br/>\n {</li>\n\t<li>Thread.currentThread().interrupt();\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    not necessary; also inconsistent with the while condition.  If the loop exits because the while condition test reads the interrupted value, it's not resetting the interrupted flag anyway, so there's no point doing it on this exit path either.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710042/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710049","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710049","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710049,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwNDk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:07:33Z","updated_at":"2025-01-21T13:16:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15483300\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15483300</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -300,12 +295,20 @@ public Void apply(CuratorListener listener)<br/>\n listeners.clear();<br/>\n unhandledErrorListeners.clear();<br/>\n connectionStateManager.close();<br/>\n    +    if (backgroundThread != null) {<br/>\n    +backgroundThread.interrupt();<br/>\n    +try<br/>\n    +{<br/>\n    +    backgroundThread.join(1000);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I totally made this number up.  What's the right thing here?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710049/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710054","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710054","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710054,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwNTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:44:25Z","updated_at":"2025-01-21T13:16:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15485565\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15485565</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -300,12 +295,20 @@ public Void apply(CuratorListener listener)<br/>\n listeners.clear();<br/>\n unhandledErrorListeners.clear();<br/>\n connectionStateManager.close();<br/>\n    +    if (backgroundThread != null) {<br/>\n    +backgroundThread.interrupt();<br/>\n    +try<br/>\n    +{<br/>\n    +    backgroundThread.join(1000);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Add a field to the CuratorFrameworkFactory builder so that this value can be configured.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710054/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710057","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710057","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710057,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwNTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:45:08Z","updated_at":"2025-01-21T13:16:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15485603\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15485603</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -722,39 +725,35 @@ public void retriesExhausted(OperationAndData<String> operationAndData)</p>\n\n<p> private <DATA_TYPE> void handleBackgroundOperationException(OperationAndData<DATA_TYPE> operationAndData, Throwable e)<br/>\n {</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>do<br/>\n    +if ( (operationAndData != null) && RetryLoop.isRetryException(e) )<br/>\n     {</li>\n\t<li>if ( (operationAndData != null) && RetryLoop.isRetryException(e) )<br/>\n    +    if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )<br/>\n    +    \n{\n    +log.debug(\"Retry-able exception received\", e);\n    +    }\n<p>    +    if ( client.getRetryPolicy().allowRetry(operationAndData.getThenIncrementRetryCount(), operationAndData.getElapsedTimeMs(), operationAndData) )<br/>\n {<br/>\n     if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )</p>\n     {\n    -    log.debug(\"Retry-able exception received\", e);\n    +    log.debug(\"Retrying operation\");\n     }</li>\n\t<li>if ( client.getRetryPolicy().allowRetry(operationAndData.getThenIncrementRetryCount(), operationAndData.getElapsedTimeMs(), operationAndData) )<br/>\n    +backgroundOperations.offer(operationAndData);<br/>\n    +return;<br/>\n    +    }<br/>\n    +    else<br/>\n    +    {<br/>\n    +if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )<br/>\n     {</li>\n\t<li>if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )</li>\n\t<li>{\n    -log.debug(\"Retrying operation\");\n    -    }</li>\n\t<li>backgroundOperations.offer(operationAndData);</li>\n\t<li>break;<br/>\n    +    log.debug(\"Retry policy did not allow retry\");<br/>\n     }</li>\n\t<li>else<br/>\n    +if ( operationAndData.getErrorCallback() != null )<br/>\n     {</li>\n\t<li>if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )</li>\n\t<li>{\n    -log.debug(\"Retry policy did not allow retry\");\n    -    }</li>\n\t<li>if ( operationAndData.getErrorCallback() != null )</li>\n\t<li>{\n    -operationAndData.getErrorCallback().retriesExhausted(operationAndData);\n    -    }\n<p>    +    operationAndData.getErrorCallback().retriesExhausted(operationAndData);<br/>\n     }<br/>\n }<br/>\n    -</p></li>\n\t<li>logError(\"Background exception was not retry-able or retry gave up\", e);<br/>\n     }</li>\n\t<li>while ( false );<br/>\n    +<br/>\n    +logError(\"Background exception was not retry-able or retry gave up\", e);\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Yes, please revert. Create a separate PR if you like.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710057/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710063","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710063","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710063,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwNjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:46:37Z","updated_at":"2025-01-21T13:16:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15485690\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15485690</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -770,9 +769,8 @@ private void backgroundOperationsLoop()<br/>\n debugListener.listen(operationAndData);<br/>\n     }<br/>\n }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>catch ( InterruptedException e )<br/>\n    +    catch ( InterruptedException ignored )<br/>\n {</li>\n\t<li>Thread.currentThread().interrupt();\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Threads should always be re-interrupted. It may be that a break statement should be added.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710063/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710065","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710065","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710065,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwNjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:47:38Z","updated_at":"2025-01-21T13:16:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15485742\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15485742</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -770,9 +769,8 @@ private void backgroundOperationsLoop()<br/>\n debugListener.listen(operationAndData);<br/>\n     }<br/>\n }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>catch ( InterruptedException e )<br/>\n    +    catch ( InterruptedException ignored )<br/>\n {</li>\n\t<li>Thread.currentThread().interrupt();\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    This is not correct. <em>Always</em> re-set the interrupted state of threads. The break statement exists the while condition.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710065/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710067","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710067","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710067,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwNjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:49:16Z","updated_at":"2025-01-21T13:16:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15485833\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15485833</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -74,7 +71,7 @@<br/>\n private final NamespaceFacadeCache namespaceFacadeCache;<br/>\n private final NamespaceWatcherMap namespaceWatcherMap = new NamespaceWatcherMap(this);</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>private volatile ExecutorService executorService;<br/>\n    +    private volatile Thread backgroundThread;\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    I disagree with changing this to Thread. I understand that there are some bugs with Executor but that's a much larger issues. Curator uses Executor everywhere. If the Executor bug will exhibit here it will do so everywhere. We can consider a global fix for the bug (which I don't yet understand).</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710067/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710072","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710072","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710072,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwNzI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:51:48Z","updated_at":"2025-01-21T13:16:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15485966\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15485966</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -722,39 +725,35 @@ public void retriesExhausted(OperationAndData<String> operationAndData)</p>\n\n<p> private <DATA_TYPE> void handleBackgroundOperationException(OperationAndData<DATA_TYPE> operationAndData, Throwable e)<br/>\n {</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>do<br/>\n    +if ( (operationAndData != null) && RetryLoop.isRetryException(e) )<br/>\n     {</li>\n\t<li>if ( (operationAndData != null) && RetryLoop.isRetryException(e) )<br/>\n    +    if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )<br/>\n    +    \n{\n    +log.debug(\"Retry-able exception received\", e);\n    +    }\n<p>    +    if ( client.getRetryPolicy().allowRetry(operationAndData.getThenIncrementRetryCount(), operationAndData.getElapsedTimeMs(), operationAndData) )<br/>\n {<br/>\n     if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )</p>\n     {\n    -    log.debug(\"Retry-able exception received\", e);\n    +    log.debug(\"Retrying operation\");\n     }</li>\n\t<li>if ( client.getRetryPolicy().allowRetry(operationAndData.getThenIncrementRetryCount(), operationAndData.getElapsedTimeMs(), operationAndData) )<br/>\n    +backgroundOperations.offer(operationAndData);<br/>\n    +return;<br/>\n    +    }<br/>\n    +    else<br/>\n    +    {<br/>\n    +if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )<br/>\n     {</li>\n\t<li>if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )</li>\n\t<li>{\n    -log.debug(\"Retrying operation\");\n    -    }</li>\n\t<li>backgroundOperations.offer(operationAndData);</li>\n\t<li>break;<br/>\n    +    log.debug(\"Retry policy did not allow retry\");<br/>\n     }</li>\n\t<li>else<br/>\n    +if ( operationAndData.getErrorCallback() != null )<br/>\n     {</li>\n\t<li>if ( !Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES) )</li>\n\t<li>{\n    -log.debug(\"Retry policy did not allow retry\");\n    -    }</li>\n\t<li>if ( operationAndData.getErrorCallback() != null )</li>\n\t<li>{\n    -operationAndData.getErrorCallback().retriesExhausted(operationAndData);\n    -    }\n<p>    +    operationAndData.getErrorCallback().retriesExhausted(operationAndData);<br/>\n     }<br/>\n }<br/>\n    -</p></li>\n\t<li>logError(\"Background exception was not retry-able or retry gave up\", e);<br/>\n     }</li>\n\t<li>while ( false );<br/>\n    +<br/>\n    +logError(\"Background exception was not retry-able or retry gave up\", e);\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Sure thing.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710081","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710081","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710081,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:56:17Z","updated_at":"2025-01-21T13:16:50Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15486219\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15486219</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -770,9 +769,8 @@ private void backgroundOperationsLoop()<br/>\n debugListener.listen(operationAndData);<br/>\n     }<br/>\n }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>catch ( InterruptedException e )<br/>\n    +    catch ( InterruptedException ignored )<br/>\n {</li>\n\t<li>Thread.currentThread().interrupt();\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Let me be more clear.  The way the loop is constructed:</p>\n\n<p>    ```<br/>\nprivate void backgroundOperationsLoop()<br/>\n{<br/>\n    while ( !Thread.interrupted() )</p>\n    { ... }\n<p>    ```<br/>\n    ALREADY eats the interrupted status.  Simply checking `Thread.interrupted()` consumes it.  If you want to consistently enforce a rule that you always re-interrupt threads (which is a good rule in general, although not necessary here) then you need an unconditional re-interrupt at the end of the method.</p>\n\n<p>    Do you want me to add that?</p>\n\n<p>    My point is that putting the interrupt only in the catch block is inconsistent.  It re-interrupts in the case where an InterruptedException gets throws, and fails to re-interrupt when the loop exits without exception.</p>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710092","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710092","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710092,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAwOTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:58:18Z","updated_at":"2025-01-21T13:16:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15486333\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15486333</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -770,9 +769,8 @@ private void backgroundOperationsLoop()<br/>\n debugListener.listen(operationAndData);<br/>\n     }<br/>\n }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>catch ( InterruptedException e )<br/>\n    +    catch ( InterruptedException ignored )<br/>\n {</li>\n\t<li>Thread.currentThread().interrupt();\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Actually, that's a bug! I didn't see it. It should be Thread.currentThread().isInterrupted() which doesn't clear the state. Normally I use that one. I'm going to greg the code for other instances of this.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710092/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710100","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710100","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710100,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxMDA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T19:59:48Z","updated_at":"2025-01-21T13:16:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15486439\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15486439</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -770,9 +769,8 @@ private void backgroundOperationsLoop()<br/>\n debugListener.listen(operationAndData);<br/>\n     }<br/>\n }</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li>catch ( InterruptedException e )<br/>\n    +    catch ( InterruptedException ignored )<br/>\n {</li>\n\t<li>Thread.currentThread().interrupt();\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    I just checked - that's the only instance of it in the code. If you don't mind, please fix it as part of this PR.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710100/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710105","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710105","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710105,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxMDU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T20:07:54Z","updated_at":"2025-01-21T13:16:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15487030\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15487030</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -74,7 +71,7 @@<br/>\n private final NamespaceFacadeCache namespaceFacadeCache;<br/>\n private final NamespaceWatcherMap namespaceWatcherMap = new NamespaceWatcherMap(this);</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>private volatile ExecutorService executorService;<br/>\n    +    private volatile Thread backgroundThread;\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    The bug is simple: Executor.shutdownNow() calls FutureTask.cancel(), which on older JDK versions has a bug where it can interrupt the wrong thread, causing all sorts of problems.  Manually interrupting a thread does not have this problem.  Given that this Executor is only every used to run one task (the backgroundOperationsLoop) we can simply switch to a Thread and avoid that bug.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710105/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710110","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710110","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710110,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxMTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T20:08:40Z","updated_at":"2025-01-21T13:16:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15487087\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15487087</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -300,12 +295,20 @@ public Void apply(CuratorListener listener)<br/>\n listeners.clear();<br/>\n unhandledErrorListeners.clear();<br/>\n connectionStateManager.close();<br/>\n    +    if (backgroundThread != null) {<br/>\n    +backgroundThread.interrupt();<br/>\n    +try<br/>\n    +{<br/>\n    +    backgroundThread.join(1000);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Done. I set the default to 1 second, let me know if should be different.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710110/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710116","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710116","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710116,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxMTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T20:14:13Z","updated_at":"2025-01-21T13:16:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15487369\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15487369</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -74,7 +71,7 @@<br/>\n private final NamespaceFacadeCache namespaceFacadeCache;<br/>\n private final NamespaceWatcherMap namespaceWatcherMap = new NamespaceWatcherMap(this);</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>private volatile ExecutorService executorService;<br/>\n    +    private volatile Thread backgroundThread;\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    But doesn't that mean that Executor.shutdownNow() is broken throughout the code? If so, I think there should be a separate issue to fix it globally.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710116/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710118","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710118","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710118,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxMTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T20:20:08Z","updated_at":"2025-01-21T13:16:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15487723\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15487723</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -74,7 +71,7 @@<br/>\n private final NamespaceFacadeCache namespaceFacadeCache;<br/>\n private final NamespaceWatcherMap namespaceWatcherMap = new NamespaceWatcherMap(this);</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>private volatile ExecutorService executorService;<br/>\n    +    private volatile Thread backgroundThread;\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Potentially.  I guess if you feel super strongly I can revert that part of the change and just add an awaitTermination.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710118/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710125","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710125","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710125,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxMjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T20:25:20Z","updated_at":"2025-01-21T13:16:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15488051\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15488051</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -74,7 +71,7 @@<br/>\n private final NamespaceFacadeCache namespaceFacadeCache;<br/>\n private final NamespaceWatcherMap namespaceWatcherMap = new NamespaceWatcherMap(this);</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>private volatile ExecutorService executorService;<br/>\n    +    private volatile Thread backgroundThread;\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    I'm just concerned it's a larger problem. Executors are used throughout Curator and I've relied on shutdownNow to work correctly. I didn't know about the bug. So, I'd feel better having an open issue to deal with it directly. Curator already has the CloseableExecutorService wrapper and my gut feeling is that it can be fixed inside of there.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710125/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710131","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710131","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710131,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxMzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T20:58:33Z","updated_at":"2025-01-21T13:16:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15490243\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15490243</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/imps/CuratorFrameworkImpl.java &#8212;<br/>\n    @@ -74,7 +71,7 @@<br/>\n private final NamespaceFacadeCache namespaceFacadeCache;<br/>\n private final NamespaceWatcherMap namespaceWatcherMap = new NamespaceWatcherMap(this);</p>\n\n<ul class=\"alternate\" type=\"square\">\n\t<li>private volatile ExecutorService executorService;<br/>\n    +    private volatile Thread backgroundThread;\n\t<ul class=\"alternate\" type=\"square\">\n\t\t<li>\n\t\t<ul class=\"alternate\" type=\"square\">\n\t\t\t<li>End diff &#8211;</li>\n\t\t</ul>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<p>    Fair point, I'll revert.</p>\n\n<p>    BTW: I tried tracing back through the code and was not able to locate the code path from ExecutorService.shutdownNow() -> FutureTask.cancel() under 1.6.  So I might actually be confused and thinking of a Guava executor and not a JDK one, it's possible the JDK shutdownNow() is actually safe.  If so, apologizes for the mis-info.</p>\n\n<p>    Either way, CloseableExecutorService.close() probably does have the issue since it does an explicit cancel(true).</p>\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710139","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710139","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710139,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxMzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T21:00:37Z","updated_at":"2025-01-21T13:16:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15490376\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15490376</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/CuratorFrameworkFactory.java &#8212;<br/>\n    @@ -239,6 +241,16 @@ public Builder connectionTimeoutMs(int connectionTimeoutMs)<br/>\n     }</p>\n\n<p>     /**<br/>\n    + * @param closeWaitMs time to wait during close to join background threads<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Sorry to be pedantic, but this would be better named \"maxCloseWaitMs\". </p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710139/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710147","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710147","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710147,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxNDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T21:13:52Z","updated_at":"2025-01-21T13:16:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15491274\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15491274</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/CuratorFrameworkFactory.java &#8212;<br/>\n    @@ -239,6 +241,16 @@ public Builder connectionTimeoutMs(int connectionTimeoutMs)<br/>\n     }</p>\n\n<p>     /**<br/>\n    + * @param closeWaitMs time to wait during close to join background threads<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    done; what about the constant?</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710147/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710152","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710152","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710152,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxNTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T21:15:02Z","updated_at":"2025-01-21T13:16:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#discussion_r15491355\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#discussion_r15491355</a></p>\n\n<p>    &#8212; Diff: curator-framework/src/main/java/org/apache/curator/framework/CuratorFrameworkFactory.java &#8212;<br/>\n    @@ -239,6 +241,16 @@ public Builder connectionTimeoutMs(int connectionTimeoutMs)<br/>\n     }</p>\n\n<p>     /**<br/>\n    + * @param closeWaitMs time to wait during close to join background threads<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I think that’s less important as it’s not visible. Up to you.</p>\n\n<p>    From: Scott Blum <notifications@github.com><br/>\n    Reply: apache/curator <reply@reply.github.com>><br/>\n    Date: July 28, 2014 at 4:13:43 PM<br/>\n    To: apache/curator <curator@noreply.github.com>><br/>\n    Cc: Jordan Zimmerman <jordan@jordanzimmerman.com>><br/>\n    Subject:  Re: <span class=\"error\">&#91;curator&#93;</span> <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a>: Fix race condition in CuratorFrameworkImpl.close() (#23)  </p>\n\n<p>    In curator-framework/src/main/java/org/apache/curator/framework/CuratorFrameworkFactory.java:</p>\n\n<p>    > @@ -239,6 +241,16 @@ public Builder connectionTimeoutMs(int connectionTimeoutMs)<br/>\n    >  }<br/>\n    >   <br/>\n    >  /**<br/>\n    > + * @param closeWaitMs time to wait during close to join background threads<br/>\n    done; what about the constant?</p>\n\n<p>    —<br/>\n    Reply to this email directly or view it on GitHub.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50406175","html_url":"https://github.com/apache/curator/pull/23#issuecomment-50406175","issue_url":"https://api.github.com/repos/apache/curator/issues/23","id":50406175,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDA2MTc1","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T21:41:56Z","updated_at":"2014-07-28T21:41:56Z","author_association":"CONTRIBUTOR","body":"Do you have a unit test to reproduce? I cooked one up which could reproduce the issue, but I hadn't found a way for it to work with assertions. I could only verify that the exception was being logged. I can still commit it though if it's considered of use.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50406175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710158","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710158","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710158,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxNTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T21:42:03Z","updated_at":"2025-01-21T13:16:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#issuecomment-50406175\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#issuecomment-50406175</a></p>\n\n<p>    Do you have a unit test to reproduce? I cooked one up which could reproduce the issue, but I hadn't found a way for it to work with assertions. I could only verify that the exception was being logged. I can still commit it though if it's considered of use.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710158/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50406296","html_url":"https://github.com/apache/curator/pull/23#issuecomment-50406296","issue_url":"https://api.github.com/repos/apache/curator/issues/23","id":50406296,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDA2Mjk2","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T21:42:54Z","updated_at":"2014-07-28T21:42:54Z","author_association":"MEMBER","body":"Yeah - please do. Can’t hurt.\n\nFrom: cammckenzie notifications@github.com\nReply: apache/curator reply@reply.github.com>\nDate: July 28, 2014 at 4:41:57 PM\nTo: apache/curator curator@noreply.github.com>\nCc: Jordan Zimmerman jordan@jordanzimmerman.com>\nSubject:  Re: [curator] CURATOR-126: Fix race condition in CuratorFrameworkImpl.close() (#23)  \n\nDo you have a unit test to reproduce? I cooked one up which could reproduce the issue, but I hadn't found a way for it to work with assertions. I could only verify that the exception was being logged. I can still commit it though if it's considered of use.\n\n—\nReply to this email directly or view it on GitHub.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50406296/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710163","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710163","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710163,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxNjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T21:43:03Z","updated_at":"2025-01-21T13:16:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#issuecomment-50406296\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#issuecomment-50406296</a></p>\n\n<p>    Yeah - please do. Can’t hurt.</p>\n\n<p>    From: cammckenzie <notifications@github.com><br/>\n    Reply: apache/curator <reply@reply.github.com>><br/>\n    Date: July 28, 2014 at 4:41:57 PM<br/>\n    To: apache/curator <curator@noreply.github.com>><br/>\n    Cc: Jordan Zimmerman <jordan@jordanzimmerman.com>><br/>\n    Subject:  Re: <span class=\"error\">&#91;curator&#93;</span> <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a>: Fix race condition in CuratorFrameworkImpl.close() (#23)  </p>\n\n<p>    Do you have a unit test to reproduce? I cooked one up which could reproduce the issue, but I hadn't found a way for it to work with assertions. I could only verify that the exception was being logged. I can still commit it though if it's considered of use.</p>\n\n<p>    —<br/>\n    Reply to this email directly or view it on GitHub.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710163/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50407804","html_url":"https://github.com/apache/curator/pull/23#issuecomment-50407804","issue_url":"https://api.github.com/repos/apache/curator/issues/23","id":50407804,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDA3ODA0","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T21:55:15Z","updated_at":"2014-07-28T21:55:15Z","author_association":"CONTRIBUTOR","body":"That would be great.  If you can send me a commit or diff, I'd be happy to play with trying to test it programmatically.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50407804/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710168","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710168","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710168,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxNjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T21:55:21Z","updated_at":"2025-01-21T13:16:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#issuecomment-50407804\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#issuecomment-50407804</a></p>\n\n<p>    That would be great.  If you can send me a commit or diff, I'd be happy to play with trying to test it programmatically.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710168/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50416483","html_url":"https://github.com/apache/curator/pull/23#issuecomment-50416483","issue_url":"https://api.github.com/repos/apache/curator/issues/23","id":50416483,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDE2NDgz","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T23:29:45Z","updated_at":"2014-07-28T23:29:45Z","author_association":"CONTRIBUTOR","body":"I have pushed a unit test up onto the CURATOR-126 branch. Have a play with it, I still seem to be getting the error logged when running against the fix. Could be something bogus in the test though.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50416483/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710173","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710173","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710173,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxNzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-28T23:29:52Z","updated_at":"2025-01-21T13:16:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#issuecomment-50416483\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#issuecomment-50416483</a></p>\n\n<p>    I have pushed a unit test up onto the <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a> branch. Have a play with it, I still seem to be getting the error logged when running against the fix. Could be something bogus in the test though.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710173/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50418758","html_url":"https://github.com/apache/curator/pull/23#issuecomment-50418758","issue_url":"https://api.github.com/repos/apache/curator/issues/23","id":50418758,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDE4NzU4","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:01:25Z","updated_at":"2014-07-29T00:01:25Z","author_association":"MEMBER","body":"I pushed an update to the test that has an assert. I tested it with the old background thread code and the test fails. It succeeds with the new code.\n\n-JZ\n\nFrom: cammckenzie notifications@github.com\nReply: apache/curator reply@reply.github.com>\nDate: July 28, 2014 at 6:29:46 PM\nTo: apache/curator curator@noreply.github.com>\nCc: Jordan Zimmerman jordan@jordanzimmerman.com>\nSubject:  Re: [curator] CURATOR-126: Fix race condition in CuratorFrameworkImpl.close() (#23)  \n\nI have pushed a unit test up onto the CURATOR-126 branch. Have a play with it, I still seem to be getting the error logged when running against the fix. Could be something bogus in the test though.\n\n—\nReply to this email directly or view it on GitHub.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50418758/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710178","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710178","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710178,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxNzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:01:31Z","updated_at":"2025-01-21T13:16:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#issuecomment-50418758\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#issuecomment-50418758</a></p>\n\n<p>    I pushed an update to the test that has an assert. I tested it with the old background thread code and the test fails. It succeeds with the new code.</p>\n\n<p>    -JZ</p>\n\n<p>    From: cammckenzie <notifications@github.com><br/>\n    Reply: apache/curator <reply@reply.github.com>><br/>\n    Date: July 28, 2014 at 6:29:46 PM<br/>\n    To: apache/curator <curator@noreply.github.com>><br/>\n    Cc: Jordan Zimmerman <jordan@jordanzimmerman.com>><br/>\n    Subject:  Re: <span class=\"error\">&#91;curator&#93;</span> <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a>: Fix race condition in CuratorFrameworkImpl.close() (#23)  </p>\n\n<p>    I have pushed a unit test up onto the <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a> branch. Have a play with it, I still seem to be getting the error logged when running against the fix. Could be something bogus in the test though.</p>\n\n<p>    —<br/>\n    Reply to this email directly or view it on GitHub.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710178/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50418934","html_url":"https://github.com/apache/curator/pull/23#issuecomment-50418934","issue_url":"https://api.github.com/repos/apache/curator/issues/23","id":50418934,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDE4OTM0","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:03:45Z","updated_at":"2014-07-29T00:03:45Z","author_association":"CONTRIBUTOR","body":"Where are the commits?  I did a git remote update on both my fork and apache and couldn't find them.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50418934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710181","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710181","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710181,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxODE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:03:54Z","updated_at":"2025-01-21T13:16:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#issuecomment-50418934\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#issuecomment-50418934</a></p>\n\n<p>    Where are the commits?  I did a git remote update on both my fork and apache and couldn't find them.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710181/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50419008","html_url":"https://github.com/apache/curator/pull/23#issuecomment-50419008","issue_url":"https://api.github.com/repos/apache/curator/issues/23","id":50419008,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDE5MDA4","user":{"login":"cammckenzie","id":7763121,"node_id":"MDQ6VXNlcjc3NjMxMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7763121?v=4","gravatar_id":"","url":"https://api.github.com/users/cammckenzie","html_url":"https://github.com/cammckenzie","followers_url":"https://api.github.com/users/cammckenzie/followers","following_url":"https://api.github.com/users/cammckenzie/following{/other_user}","gists_url":"https://api.github.com/users/cammckenzie/gists{/gist_id}","starred_url":"https://api.github.com/users/cammckenzie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cammckenzie/subscriptions","organizations_url":"https://api.github.com/users/cammckenzie/orgs","repos_url":"https://api.github.com/users/cammckenzie/repos","events_url":"https://api.github.com/users/cammckenzie/events{/privacy}","received_events_url":"https://api.github.com/users/cammckenzie/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:04:33Z","updated_at":"2014-07-29T00:04:33Z","author_association":"CONTRIBUTOR","body":"They're there for me, I just pulled off the apache master (CURATOR-126 branch). The changes look good to me Jordan, I was trying to avoid changing the CuratorFrameworkImpl to add additional debug stuff, but I think it's the way to go.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50419008/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710182","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710182","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710182,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxODI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:04:38Z","updated_at":"2025-01-21T13:16:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user cammckenzie commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#issuecomment-50419008\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#issuecomment-50419008</a></p>\n\n<p>    They're there for me, I just pulled off the apache master (<a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a> branch). The changes look good to me Jordan, I was trying to avoid changing the CuratorFrameworkImpl to add additional debug stuff, but I think it's the way to go.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710182/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50419120","html_url":"https://github.com/apache/curator/pull/23#issuecomment-50419120","issue_url":"https://api.github.com/repos/apache/curator/issues/23","id":50419120,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDE5MTIw","user":{"login":"Randgalt","id":264818,"node_id":"MDQ6VXNlcjI2NDgxOA==","avatar_url":"https://avatars.githubusercontent.com/u/264818?v=4","gravatar_id":"","url":"https://api.github.com/users/Randgalt","html_url":"https://github.com/Randgalt","followers_url":"https://api.github.com/users/Randgalt/followers","following_url":"https://api.github.com/users/Randgalt/following{/other_user}","gists_url":"https://api.github.com/users/Randgalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Randgalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Randgalt/subscriptions","organizations_url":"https://api.github.com/users/Randgalt/orgs","repos_url":"https://api.github.com/users/Randgalt/repos","events_url":"https://api.github.com/users/Randgalt/events{/privacy}","received_events_url":"https://api.github.com/users/Randgalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:06:20Z","updated_at":"2014-07-29T00:06:20Z","author_association":"MEMBER","body":"Sorry Scott - it looks like CURATOR-126 hasn’t sync’d yet to the Github repo. The whole Github sync think is a lot of black magic. It is, however, here: https://git-wip-us.apache.org/repos/asf?p=curator.git;a=tree;h=refs/heads/CURATOR-126;hb=CURATOR-126\n\nFrom: Scott Blum notifications@github.com\nReply: apache/curator reply@reply.github.com>\nDate: July 28, 2014 at 7:03:46 PM\nTo: apache/curator curator@noreply.github.com>\nCc: Jordan Zimmerman jordan@jordanzimmerman.com>\nSubject:  Re: [curator] CURATOR-126: Fix race condition in CuratorFrameworkImpl.close() (#23)  \n\nWhere are the commits? I did a git remote update on both my fork and apache and couldn't find them.\n\n—\nReply to this email directly or view it on GitHub.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50419120/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710189","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710189","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710189,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxODk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:06:27Z","updated_at":"2025-01-21T13:16:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user Randgalt commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#issuecomment-50419120\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#issuecomment-50419120</a></p>\n\n<p>    Sorry Scott - it looks like <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a> hasn’t sync’d yet to the Github repo. The whole Github sync think is a lot of black magic. It is, however, here: <a href=\"https://git-wip-us.apache.org/repos/asf?p=curator.git;a=tree;h=refs/heads/CURATOR-126;hb=CURATOR-126\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://git-wip-us.apache.org/repos/asf?p=curator.git;a=tree;h=refs/heads/CURATOR-126;hb=CURATOR-126</a></p>\n\n<p>    From: Scott Blum <notifications@github.com><br/>\n    Reply: apache/curator <reply@reply.github.com>><br/>\n    Date: July 28, 2014 at 7:03:46 PM<br/>\n    To: apache/curator <curator@noreply.github.com>><br/>\n    Cc: Jordan Zimmerman <jordan@jordanzimmerman.com>><br/>\n    Subject:  Re: <span class=\"error\">&#91;curator&#93;</span> <a href=\"https://issues.apache.org/jira/browse/CURATOR-126\" title=\"IllegalStateException in performBackgroundOperation during close\" class=\"issue-link\" data-issue-key=\"CURATOR-126\"><del>CURATOR-126</del></a>: Fix race condition in CuratorFrameworkImpl.close() (#23)  </p>\n\n<p>    Where are the commits? I did a git remote update on both my fork and apache and couldn't find them.</p>\n\n<p>    —<br/>\n    Reply to this email directly or view it on GitHub.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710189/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/50420280","html_url":"https://github.com/apache/curator/pull/23#issuecomment-50420280","issue_url":"https://api.github.com/repos/apache/curator/issues/23","id":50420280,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDIwMjgw","user":{"login":"dragonsinth","id":1919660,"node_id":"MDQ6VXNlcjE5MTk2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1919660?v=4","gravatar_id":"","url":"https://api.github.com/users/dragonsinth","html_url":"https://github.com/dragonsinth","followers_url":"https://api.github.com/users/dragonsinth/followers","following_url":"https://api.github.com/users/dragonsinth/following{/other_user}","gists_url":"https://api.github.com/users/dragonsinth/gists{/gist_id}","starred_url":"https://api.github.com/users/dragonsinth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dragonsinth/subscriptions","organizations_url":"https://api.github.com/users/dragonsinth/orgs","repos_url":"https://api.github.com/users/dragonsinth/repos","events_url":"https://api.github.com/users/dragonsinth/events{/privacy}","received_events_url":"https://api.github.com/users/dragonsinth/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:24:01Z","updated_at":"2014-07-29T00:24:01Z","author_association":"CONTRIBUTOR","body":"Sweet, looks good.\n","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/50420280/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710194","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710194","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710194,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxOTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T00:24:07Z","updated_at":"2025-01-21T13:16:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user dragonsinth commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23#issuecomment-50420280\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23#issuecomment-50420280</a></p>\n\n<p>    Sweet, looks good.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710194/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710433","html_url":"https://github.com/apache/curator/issues/649#issuecomment-2604710433","issue_url":"https://api.github.com/repos/apache/curator/issues/649","id":2604710433,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTA0MzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T01:13:49Z","updated_at":"2025-01-21T13:16:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>I think that it would be preferable to be consistent. So, \"/\" would refer to the root of the namespace, or the root if non namespace is used.</p>\n\n<p>To fix this without potentially breaking peoples code would rely on making \"/\" and \"\" synonymous. I think it would be cleaner to always refer to the root as \"/\" though.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710433/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710441","html_url":"https://github.com/apache/curator/issues/649#issuecomment-2604710441","issue_url":"https://api.github.com/repos/apache/curator/issues/649","id":2604710441,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTA0NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T01:39:52Z","updated_at":"2025-01-21T13:16:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>The problem in ZKPaths.makePath() is longstanding but there's not much that can be done about it now. It would break too much existing code.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710441/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710448","html_url":"https://github.com/apache/curator/issues/649#issuecomment-2604710448","issue_url":"https://api.github.com/repos/apache/curator/issues/649","id":2604710448,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTA0NDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T04:56:23Z","updated_at":"2025-01-21T13:16:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dragonsinth\">dragonsinth</a>:</i>\n<p>It couldn't be made more lenient?</p>\n\n<p>e.g.</p>\n\n<p>\"/\" + \"/foo\" = \"/foo\"<br/>\n\"\" + \"foo\" = \"/foo<br/>\n\"/\" + \"foo\" = \"/foo\"<br/>\n\"\" + \"/foo\" = \"/foo</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710448/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710450","html_url":"https://github.com/apache/curator/issues/649#issuecomment-2604710450","issue_url":"https://api.github.com/repos/apache/curator/issues/649","id":2604710450,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTA0NTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T05:24:20Z","updated_at":"2025-01-21T13:16:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>This sounds ok to me. It assumes that no one is basing any logic on the makePath() method throwing errors for particular cases though. It seems like an unlikely use case.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710450/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604697359","html_url":"https://github.com/apache/curator/issues/563#issuecomment-2604697359","issue_url":"https://api.github.com/repos/apache/curator/issues/563","id":2604697359,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ2OTczNTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T06:52:29Z","updated_at":"2025-01-21T13:11:22Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cammckenzie\">cammckenzie</a>:</i>\n<p>Just had a look at this, the delete definitely gets retried even though the node doesn't exist. But it only gets retried once. This is because the retry is called with inBackground() with no callback, so the failure no the retry never gets propagated to the code that does another retry.</p>\n\n<p>I will fix it so that it doesn't do the initial retry, as it's unnecessary.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604697359/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710455","html_url":"https://github.com/apache/curator/issues/649#issuecomment-2604710455","issue_url":"https://api.github.com/repos/apache/curator/issues/649","id":2604710455,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTA0NTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T12:15:51Z","updated_at":"2025-01-21T13:16:59Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=randgalt\">randgalt</a>:</i>\n<p>This makes me very nervous. What's the reason to change this behavior? It's not affecting any of the recipes.</p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710455/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710199","html_url":"https://github.com/apache/curator/issues/647#issuecomment-2604710199","issue_url":"https://api.github.com/repos/apache/curator/issues/647","id":2604710199,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDQ3MTAxOTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2014-07-29T12:57:29Z","updated_at":"2025-01-21T13:16:53Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/curator/pull/23\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/curator/pull/23</a></p>","reactions":{"url":"https://api.github.com/repos/apache/curator/issues/comments/2604710199/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]