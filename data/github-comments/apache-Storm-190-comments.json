[{"url":"https://api.github.com/repos/apache/storm/issues/comments/193974692","html_url":"https://github.com/apache/storm/pull/1191#issuecomment-193974692","issue_url":"https://api.github.com/repos/apache/storm/issues/1191","id":193974692,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzk3NDY5Mg==","user":{"login":"abellina","id":1901059,"node_id":"MDQ6VXNlcjE5MDEwNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1901059?v=4","gravatar_id":"","url":"https://api.github.com/users/abellina","html_url":"https://github.com/abellina","followers_url":"https://api.github.com/users/abellina/followers","following_url":"https://api.github.com/users/abellina/following{/other_user}","gists_url":"https://api.github.com/users/abellina/gists{/gist_id}","starred_url":"https://api.github.com/users/abellina/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abellina/subscriptions","organizations_url":"https://api.github.com/users/abellina/orgs","repos_url":"https://api.github.com/users/abellina/repos","events_url":"https://api.github.com/users/abellina/events{/privacy}","received_events_url":"https://api.github.com/users/abellina/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:26:20Z","updated_at":"2016-03-08T21:26:20Z","author_association":"CONTRIBUTOR","body":"Test failures appear to be unrelated to my change.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193974692/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645067","html_url":"https://github.com/apache/storm/issues/5070#issuecomment-2612645067","issue_url":"https://api.github.com/repos/apache/storm/issues/5070","id":2612645067,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDUwNjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:26:22Z","updated_at":"2025-01-24T14:20:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abellina commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1191#issuecomment-193974692\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1191#issuecomment-193974692</a></p>\n\n<p>    Test failures appear to be unrelated to my change.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612645067/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881213","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881213","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881213,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyMTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:35:22Z","updated_at":"2025-01-24T16:06:15Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55431809\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55431809</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -151,10 +164,35 @@<br/>\n     bootstrap = createClientBootstrap(factory, bufferSize, stormConf);<br/>\n     dstAddress = new InetSocketAddress(host, port);<br/>\n     dstAddressPrefixedName = prefixedName(dstAddress);<br/>\n    +launchChannelAliveThread();<br/>\n     scheduleConnect(NO_DELAY_MS);<br/>\n     batcher = new MessageBuffer(messageBatchSize);<br/>\n }</p>\n\n<p>    +    /**<br/>\n    +     * This thread helps us to check for channel connection periodically.<br/>\n    +     * This is performed just to know whether the destination address<br/>\n    +     * is alive or attempts to refresh connections if not alive. This<br/>\n    +     * solution is better than what we have now in case of a bad channel.<br/>\n    +     */<br/>\n    +    private void launchChannelAliveThread() {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Let's move the code in the static block above down here at the beginning of `launchChannelAliveThread`, so that as @revans2 suggests, the stack trace will not be so confusing.</p>\n\n<p>    ```Java<br/>\n    if (timer == null) {<br/>\n      synchronized (Client.class) {<br/>\nif (timer == null) </p>\n{\n  timer = new Timer(\"Netty-ChannelAlive-Timer\", true);\n}\n<p>      }<br/>\n    }<br/>\n    ```</p>\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881213/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881217","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881217","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881217,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyMTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:37:08Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55432071\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55432071</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -151,10 +164,35 @@<br/>\n     bootstrap = createClientBootstrap(factory, bufferSize, stormConf);<br/>\n     dstAddress = new InetSocketAddress(host, port);<br/>\n     dstAddressPrefixedName = prefixedName(dstAddress);<br/>\n    +launchChannelAliveThread();<br/>\n     scheduleConnect(NO_DELAY_MS);<br/>\n     batcher = new MessageBuffer(messageBatchSize);<br/>\n }</p>\n\n<p>    +    /**<br/>\n    +     * This thread helps us to check for channel connection periodically.<br/>\n    +     * This is performed just to know whether the destination address<br/>\n    +     * is alive or attempts to refresh connections if not alive. This<br/>\n    +     * solution is better than what we have now in case of a bad channel.<br/>\n    +     */<br/>\n    +    private void launchChannelAliveThread() {<br/>\n    +// netty TimerTask is already defined and hence a fully<br/>\n    +// qualified name<br/>\n    +timer.schedule(new java.util.TimerTask() {<br/>\n    +    public void run() {<br/>\n    +try {<br/>\n    +    LOG.debug(\"running timer task, address {}\", dstAddress);<br/>\n    +    if(closing) {<br/>\n    +this.cancel();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Just to be cleaner and avoid a possible race, let's return here so we don't call `getConnectedChannel`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881217/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881222","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881222","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881222,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyMjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:38:50Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55432309\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55432309</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -108,6 +110,13 @@<br/>\n private final AtomicInteger messagesLost = new AtomicInteger(0);</p>\n\n<p> /**<br/>\n    +     * Periodically checks for connected channel in order to avoid loss<br/>\n    +     * of messages<br/>\n    +     */<br/>\n    +    private final long CHANNEL_ALIVE_INTERVAL_MS = 30000L;<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    minor: extra line</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881222/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193979600","html_url":"https://github.com/apache/storm/pull/1188#issuecomment-193979600","issue_url":"https://api.github.com/repos/apache/storm/issues/1188","id":193979600,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzk3OTYwMA==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:40:00Z","updated_at":"2016-03-08T21:40:00Z","author_association":"MEMBER","body":"This doesn't compile, as @abellina pointed out. Adding back the parens on line 1337 fixed the compilation error and all tests pass.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193979600/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880454","html_url":"https://github.com/apache/storm/issues/5439#issuecomment-2612880454","issue_url":"https://api.github.com/repos/apache/storm/issues/5439","id":2612880454,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA0NTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:40:03Z","updated_at":"2025-01-24T16:05:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1188#issuecomment-193979600\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1188#issuecomment-193979600</a></p>\n\n<p>    This doesn't compile, as @abellina pointed out. Adding back the parens on line 1337 fixed the compilation error and all tests pass.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/193979685","html_url":"https://github.com/apache/storm/pull/1194#issuecomment-193979685","issue_url":"https://api.github.com/repos/apache/storm/issues/1194","id":193979685,"node_id":"MDEyOklzc3VlQ29tbWVudDE5Mzk3OTY4NQ==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:40:20Z","updated_at":"2016-03-08T21:40:20Z","author_association":"NONE","body":"Had some usability concerns, but otherwise looks good.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/193979685/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881225","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881225","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881225,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyMjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T21:40:21Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#issuecomment-193979685\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#issuecomment-193979685</a></p>\n\n<p>    Had some usability concerns, but otherwise looks good.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881225/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881229","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881229","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881229,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyMjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T22:25:58Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55439564\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55439564</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -151,10 +164,35 @@<br/>\n     bootstrap = createClientBootstrap(factory, bufferSize, stormConf);<br/>\n     dstAddress = new InetSocketAddress(host, port);<br/>\n     dstAddressPrefixedName = prefixedName(dstAddress);<br/>\n    +launchChannelAliveThread();<br/>\n     scheduleConnect(NO_DELAY_MS);<br/>\n     batcher = new MessageBuffer(messageBatchSize);<br/>\n }</p>\n\n<p>    +    /**<br/>\n    +     * This thread helps us to check for channel connection periodically.<br/>\n    +     * This is performed just to know whether the destination address<br/>\n    +     * is alive or attempts to refresh connections if not alive. This<br/>\n    +     * solution is better than what we have now in case of a bad channel.<br/>\n    +     */<br/>\n    +    private void launchChannelAliveThread() {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Good suggestion, I will do that thank you d2r</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881229/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881234","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881234","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881234,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyMzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T22:36:19Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55440955\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55440955</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -151,10 +164,35 @@<br/>\n     bootstrap = createClientBootstrap(factory, bufferSize, stormConf);<br/>\n     dstAddress = new InetSocketAddress(host, port);<br/>\n     dstAddressPrefixedName = prefixedName(dstAddress);<br/>\n    +launchChannelAliveThread();<br/>\n     scheduleConnect(NO_DELAY_MS);<br/>\n     batcher = new MessageBuffer(messageBatchSize);<br/>\n }</p>\n\n<p>    +    /**<br/>\n    +     * This thread helps us to check for channel connection periodically.<br/>\n    +     * This is performed just to know whether the destination address<br/>\n    +     * is alive or attempts to refresh connections if not alive. This<br/>\n    +     * solution is better than what we have now in case of a bad channel.<br/>\n    +     */<br/>\n    +    private void launchChannelAliveThread() {<br/>\n    +// netty TimerTask is already defined and hence a fully<br/>\n    +// qualified name<br/>\n    +timer.schedule(new java.util.TimerTask() {<br/>\n    +    public void run() {<br/>\n    +try {<br/>\n    +    LOG.debug(\"running timer task, address {}\", dstAddress);<br/>\n    +    if(closing) {<br/>\n    +this.cancel();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    fixed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881234/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881239","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881239","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881239,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyMzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T22:36:36Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55441002\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55441002</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -151,10 +164,35 @@<br/>\n     bootstrap = createClientBootstrap(factory, bufferSize, stormConf);<br/>\n     dstAddress = new InetSocketAddress(host, port);<br/>\n     dstAddressPrefixedName = prefixedName(dstAddress);<br/>\n    +launchChannelAliveThread();<br/>\n     scheduleConnect(NO_DELAY_MS);<br/>\n     batcher = new MessageBuffer(messageBatchSize);<br/>\n }</p>\n\n<p>    +    /**<br/>\n    +     * This thread helps us to check for channel connection periodically.<br/>\n    +     * This is performed just to know whether the destination address<br/>\n    +     * is alive or attempts to refresh connections if not alive. This<br/>\n    +     * solution is better than what we have now in case of a bad channel.<br/>\n    +     */<br/>\n    +    private void launchChannelAliveThread() {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    fixed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881239/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881246","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881246","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881246,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyNDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T22:36:57Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55441072\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55441072</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -108,6 +110,13 @@<br/>\n private final AtomicInteger messagesLost = new AtomicInteger(0);</p>\n\n<p> /**<br/>\n    +     * Periodically checks for connected channel in order to avoid loss<br/>\n    +     * of messages<br/>\n    +     */<br/>\n    +    private final long CHANNEL_ALIVE_INTERVAL_MS = 30000L;<br/>\n    +<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    fixed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881246/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194000825","html_url":"https://github.com/apache/storm/pull/1194#issuecomment-194000825","issue_url":"https://api.github.com/repos/apache/storm/issues/1194","id":194000825,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDAwMDgyNQ==","user":{"login":"redsanket","id":8295799,"node_id":"MDQ6VXNlcjgyOTU3OTk=","avatar_url":"https://avatars.githubusercontent.com/u/8295799?v=4","gravatar_id":"","url":"https://api.github.com/users/redsanket","html_url":"https://github.com/redsanket","followers_url":"https://api.github.com/users/redsanket/followers","following_url":"https://api.github.com/users/redsanket/following{/other_user}","gists_url":"https://api.github.com/users/redsanket/gists{/gist_id}","starred_url":"https://api.github.com/users/redsanket/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/redsanket/subscriptions","organizations_url":"https://api.github.com/users/redsanket/orgs","repos_url":"https://api.github.com/users/redsanket/repos","events_url":"https://api.github.com/users/redsanket/events{/privacy}","received_events_url":"https://api.github.com/users/redsanket/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T22:37:29Z","updated_at":"2016-03-08T22:37:29Z","author_association":"NONE","body":"@d2r Addressed your comments\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194000825/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881251","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881251","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881251,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyNTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T22:37:30Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#issuecomment-194000825\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#issuecomment-194000825</a></p>\n\n<p>    @d2r Addressed your comments</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881251/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194008759","html_url":"https://github.com/apache/storm/pull/1194#issuecomment-194008759","issue_url":"https://api.github.com/repos/apache/storm/issues/1194","id":194008759,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDAwODc1OQ==","user":{"login":"d2r","id":905298,"node_id":"MDQ6VXNlcjkwNTI5OA==","avatar_url":"https://avatars.githubusercontent.com/u/905298?v=4","gravatar_id":"","url":"https://api.github.com/users/d2r","html_url":"https://github.com/d2r","followers_url":"https://api.github.com/users/d2r/followers","following_url":"https://api.github.com/users/d2r/following{/other_user}","gists_url":"https://api.github.com/users/d2r/gists{/gist_id}","starred_url":"https://api.github.com/users/d2r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d2r/subscriptions","organizations_url":"https://api.github.com/users/d2r/orgs","repos_url":"https://api.github.com/users/d2r/repos","events_url":"https://api.github.com/users/d2r/events{/privacy}","received_events_url":"https://api.github.com/users/d2r/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T23:03:13Z","updated_at":"2016-03-08T23:03:13Z","author_association":"NONE","body":"Looks good +1.\nI see unrelated failures in supervisor-test and transactional-test.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194008759/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881252","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881252","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881252,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyNTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-08T23:03:14Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user d2r commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#issuecomment-194008759\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#issuecomment-194008759</a></p>\n\n<p>    Looks good +1.<br/>\n    I see unrelated failures in supervisor-test and transactional-test.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881252/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194074562","html_url":"https://github.com/apache/storm/pull/1192#issuecomment-194074562","issue_url":"https://api.github.com/repos/apache/storm/issues/1192","id":194074562,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDA3NDU2Mg==","user":{"login":"zhuoliu","id":11683054,"node_id":"MDQ6VXNlcjExNjgzMDU0","avatar_url":"https://avatars.githubusercontent.com/u/11683054?v=4","gravatar_id":"","url":"https://api.github.com/users/zhuoliu","html_url":"https://github.com/zhuoliu","followers_url":"https://api.github.com/users/zhuoliu/followers","following_url":"https://api.github.com/users/zhuoliu/following{/other_user}","gists_url":"https://api.github.com/users/zhuoliu/gists{/gist_id}","starred_url":"https://api.github.com/users/zhuoliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhuoliu/subscriptions","organizations_url":"https://api.github.com/users/zhuoliu/orgs","repos_url":"https://api.github.com/users/zhuoliu/repos","events_url":"https://api.github.com/users/zhuoliu/events{/privacy}","received_events_url":"https://api.github.com/users/zhuoliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T02:23:20Z","updated_at":"2016-03-09T02:23:20Z","author_association":"NONE","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194074562/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881510","html_url":"https://github.com/apache/storm/issues/5445#issuecomment-2612881510","issue_url":"https://api.github.com/repos/apache/storm/issues/5445","id":2612881510,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE1MTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T02:23:21Z","updated_at":"2025-01-24T16:06:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user zhuoliu commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192#issuecomment-194074562\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192#issuecomment-194074562</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881510/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194076581","html_url":"https://github.com/apache/storm/pull/1183#issuecomment-194076581","issue_url":"https://api.github.com/repos/apache/storm/issues/1183","id":194076581,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDA3NjU4MQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T02:28:37Z","updated_at":"2016-03-09T02:28:37Z","author_association":"CONTRIBUTOR","body":"@knusbaum \nYes, I'll send the mail to dev mailing list. For now, I'm also in favor of separating issue as `fixing UT` and `catching up change with backporting`.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194076581/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880193","html_url":"https://github.com/apache/storm/issues/5438#issuecomment-2612880193","issue_url":"https://api.github.com/repos/apache/storm/issues/5438","id":2612880193,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODAxOTM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T02:28:38Z","updated_at":"2025-01-24T16:05:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1183#issuecomment-194076581\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1183#issuecomment-194076581</a></p>\n\n<p>    @knusbaum <br/>\n    Yes, I'll send the mail to dev mailing list. For now, I'm also in favor of separating issue as `fixing UT` and `catching up change with backporting`.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880193/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881259","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881259","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881259,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyNTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T02:30:19Z","updated_at":"2025-01-24T16:06:16Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bugzmanov commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55464579\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55464579</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -151,10 +159,43 @@<br/>\n     bootstrap = createClientBootstrap(factory, bufferSize, stormConf);<br/>\n     dstAddress = new InetSocketAddress(host, port);<br/>\n     dstAddressPrefixedName = prefixedName(dstAddress);<br/>\n    +launchChannelAliveThread();<br/>\n     scheduleConnect(NO_DELAY_MS);<br/>\n     batcher = new MessageBuffer(messageBatchSize);<br/>\n }</p>\n\n<p>    +    /**<br/>\n    +     * This thread helps us to check for channel connection periodically.<br/>\n    +     * This is performed just to know whether the destination address<br/>\n    +     * is alive or attempts to refresh connections if not alive. This<br/>\n    +     * solution is better than what we have now in case of a bad channel.<br/>\n    +     */<br/>\n    +    private void launchChannelAliveThread() {<br/>\n    +// netty TimerTask is already defined and hence a fully<br/>\n    +// qualified name<br/>\n    +if (timer == null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This looks a lot like racy(incorrect) version of:<br/>\n    <a href=\"https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java</a></p>\n\n<p>    So you might end up with two instances of timer running 1 job each</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881259/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194101069","html_url":"https://github.com/apache/storm/pull/1183#issuecomment-194101069","issue_url":"https://api.github.com/repos/apache/storm/issues/1183","id":194101069,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDEwMTA2OQ==","user":{"login":"HeartSaVioR","id":1317309,"node_id":"MDQ6VXNlcjEzMTczMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1317309?v=4","gravatar_id":"","url":"https://api.github.com/users/HeartSaVioR","html_url":"https://github.com/HeartSaVioR","followers_url":"https://api.github.com/users/HeartSaVioR/followers","following_url":"https://api.github.com/users/HeartSaVioR/following{/other_user}","gists_url":"https://api.github.com/users/HeartSaVioR/gists{/gist_id}","starred_url":"https://api.github.com/users/HeartSaVioR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HeartSaVioR/subscriptions","organizations_url":"https://api.github.com/users/HeartSaVioR/orgs","repos_url":"https://api.github.com/users/HeartSaVioR/repos","events_url":"https://api.github.com/users/HeartSaVioR/events{/privacy}","received_events_url":"https://api.github.com/users/HeartSaVioR/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T03:44:22Z","updated_at":"2016-03-09T03:44:22Z","author_association":"CONTRIBUTOR","body":"OK, sent the mail to dev. I'll merge this...\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194101069/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880197","html_url":"https://github.com/apache/storm/issues/5438#issuecomment-2612880197","issue_url":"https://api.github.com/repos/apache/storm/issues/5438","id":2612880197,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODAxOTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T03:44:24Z","updated_at":"2025-01-24T16:05:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user HeartSaVioR commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1183#issuecomment-194101069\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1183#issuecomment-194101069</a></p>\n\n<p>    OK, sent the mail to dev. I'll merge this...</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880197/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880204","html_url":"https://github.com/apache/storm/issues/5438#issuecomment-2612880204","issue_url":"https://api.github.com/repos/apache/storm/issues/5438","id":2612880204,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODAyMDQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T04:03:28Z","updated_at":"2025-01-24T16:05:52Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1183\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1183</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194115823","html_url":"https://github.com/apache/storm/pull/1147#issuecomment-194115823","issue_url":"https://api.github.com/repos/apache/storm/issues/1147","id":194115823,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDExNTgyMw==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T05:10:15Z","updated_at":"2016-03-09T05:10:15Z","author_association":"NONE","body":"@revans2 you're right about the possible NPE, I've updated code.\nAlso I added a lot of method comments.\nI have tested web ui with new code and compared stats data and all looks good.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194115823/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648412","html_url":"https://github.com/apache/storm/issues/5089#issuecomment-2612648412","issue_url":"https://api.github.com/repos/apache/storm/issues/5089","id":2612648412,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NDg0MTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T05:10:16Z","updated_at":"2025-01-24T14:21:58Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1147#issuecomment-194115823\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1147#issuecomment-194115823</a></p>\n\n<p>    @revans2 you're right about the possible NPE, I've updated code.<br/>\n    Also I added a lot of method comments.<br/>\n    I have tested web ui with new code and compared stats data and all looks good.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612648412/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881657","html_url":"https://github.com/apache/storm/issues/5446#issuecomment-2612881657","issue_url":"https://api.github.com/repos/apache/storm/issues/5446","id":2612881657,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE2NTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T07:52:38Z","updated_at":"2025-01-24T16:06:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user hustfxj opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1611\" title=\"port org.apache.storm.pacemaker.pacemaker to java\" class=\"issue-link\" data-issue-key=\"STORM-1611\"><del>STORM-1611</del></a> port org.apache.storm.pacemaker.pacemaker to java</p>\n\n<p>    1 port pacemaker&pacemaker_test to java;<br/>\n    2 Update all the callings to cluster;<br/>\n    3 remove pacemaker.register about jmx;<br/>\n    4 fix the bug about #1071 , this is my fault on this worker.</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/hustfxj/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/hustfxj/storm</a> pacemaker</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1195</p>\n\n<hr />\n<p>commit 83c72d5d3f80797be473368c60e2f3deb7b49e90<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-03-08T12:58:36Z</p>\n\n<p>    port pacemaker.clj&pacemaker_test.clj to java</p>\n\n<p>commit f22673af95de6386528b829b09af5ad500d6ac0d<br/>\nAuthor: xiaojian.fxj <xiaojian.fxj@alibaba-inc.com><br/>\nDate:   2016-03-09T07:41:37Z</p>\n\n<p>    fix bug @<a href=\"https://issues.apache.org/jira/browse/STORM-1273\" title=\"port backtype.storm.cluster to java\" class=\"issue-link\" data-issue-key=\"STORM-1273\"><del>STORM-1273</del></a></p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881657/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194168476","html_url":"https://github.com/apache/storm/pull/1195#issuecomment-194168476","issue_url":"https://api.github.com/repos/apache/storm/issues/1195","id":194168476,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDE2ODQ3Ng==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T07:57:50Z","updated_at":"2016-03-09T07:57:50Z","author_association":"CONTRIBUTOR","body":"when we start up nimbus before starting up pacemaker, the nimbus will die. Because nimbus can't read the workers' heartbeats by \"heartbeat-storms\". In my opinion, it shouldn't be like this. @revans2  Do you think?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194168476/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881662","html_url":"https://github.com/apache/storm/issues/5446#issuecomment-2612881662","issue_url":"https://api.github.com/repos/apache/storm/issues/5446","id":2612881662,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE2NjI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T07:57:51Z","updated_at":"2025-01-24T16:06:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195#issuecomment-194168476\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195#issuecomment-194168476</a></p>\n\n<p>    when we start up nimbus before starting up pacemaker, the nimbus will die. Because nimbus can't read the workers' heartbeats by \"heartbeat-storms\". In my opinion, it shouldn't be like this. @revans2  Do you think?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881662/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880641","html_url":"https://github.com/apache/storm/issues/5440#issuecomment-2612880641","issue_url":"https://api.github.com/repos/apache/storm/issues/5440","id":2612880641,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA2NDE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:08:17Z","updated_at":"2025-01-24T16:06:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user unsleepy22 opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1196\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1196</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1605\" title=\"storm shell script should use /bin/env python to check python version\" class=\"issue-link\" data-issue-key=\"STORM-1605\"><del>STORM-1605</del></a> use '/usr/bin/env python' to check python version</p>\n\n<p>    Current python version check is hard-coded and it cannot detect python 2.7.x versions. Changed to /usr/bin/env to keep consistent with storm.py</p>\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/unsleepy22/storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/unsleepy22/storm</a> <a href=\"https://issues.apache.org/jira/browse/STORM-1605\" title=\"storm shell script should use /bin/env python to check python version\" class=\"issue-link\" data-issue-key=\"STORM-1605\"><del>STORM-1605</del></a></p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1196.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1196.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1196</p>\n\n<hr />\n<p>commit 20f1497c213c97a8a72b2f43039ad59ce9ce5169<br/>\nAuthor: 卫乐 <weiyue.wy@taobao.com><br/>\nDate:   2016-03-09T08:05:04Z</p>\n\n<p>    use '/usr/bin/env python' to check python version</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880641/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881667","html_url":"https://github.com/apache/storm/issues/5446#issuecomment-2612881667","issue_url":"https://api.github.com/repos/apache/storm/issues/5446","id":2612881667,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE2Njc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:12:51Z","updated_at":"2025-01-24T16:06:26Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195#discussion_r55483738\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195#discussion_r55483738</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/pacemaker/Pacemaker.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.pacemaker;<br/>\n    +<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import uk.org.lidalia.sysoutslf4j.context.SysOutOverSLF4J;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class Pacemaker implements IServerMessageHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Pacemaker.class);<br/>\n    +<br/>\n    +    private Map heartbeats;<br/>\n    +    private PacemakerStats pacemakerStats;<br/>\n    +    private Map conf;<br/>\n    +    private final long sleepSeconds = 60;<br/>\n    +<br/>\n    +    private static class PacemakerStats </p>\n{\n    +public AtomicInteger sendPulseCount = new AtomicInteger();\n    +public AtomicInteger totalReceivedSize = new AtomicInteger();\n    +public AtomicInteger getPulseCount = new AtomicInteger();\n    +public AtomicInteger totalSentSize = new AtomicInteger();\n    +public AtomicInteger largestHeartbeatSize = new AtomicInteger();\n    +public AtomicInteger averageHeartbeatSize = new AtomicInteger();\n    +    }\n<p>    +<br/>\n    +    public Pacemaker(Map conf) </p>\n{\n    +heartbeats = new ConcurrentHashMap();\n    +pacemakerStats = new PacemakerStats();\n    +this.conf = conf;\n    +startStatsThread();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public HBMessage handleMessage(HBMessage m, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +HBMessageData data = m.get_data();<br/>\n    +switch (m.get_type()) {<br/>\n    +case CREATE_PATH:<br/>\n    +    response = createPath(data.get_path());<br/>\n    +    break;<br/>\n    +case EXISTS:<br/>\n    +    response = exists(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case SEND_PULSE:<br/>\n    +    response = sendPulse(data.get_pulse());<br/>\n    +    break;<br/>\n    +case GET_ALL_PULSE_FOR_PATH:<br/>\n    +    response = getAllPulseForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_ALL_NODES_FOR_PATH:<br/>\n    +    response = getAllNodesForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_PULSE:<br/>\n    +    response = getPulse(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case DELETE_PATH:<br/>\n    +    response = deletePath(data.get_path());<br/>\n    +    break;<br/>\n    +case DELETE_PULSE_ID:<br/>\n    +    response = deletePulseId(data.get_path());<br/>\n    +    break;<br/>\n    +default:<br/>\n    +    LOG.info(\"Got Unexpected Type: {}\", m.get_type());<br/>\n    +    break;<br/>\n    +}<br/>\n    +if (response != null)<br/>\n    +    response.set_message_id(m.get_message_id());<br/>\n    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage createPath(String path) </p>\n{\n    +return new HBMessage(HBServerMessageType.CREATE_PATH_RESPONSE, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage exists(String path, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +if (authenticated) {<br/>\n    +    boolean itDoes = heartbeats.containsKey(path);<br/>\n    +    LOG.debug(\"Checking if path [ {} ] exists... {} .\", path, itDoes);<br/>\n    +    response = new HBMessage(HBServerMessageType.EXISTS_RESPONSE, HBMessageData.boolval(itDoes));<br/>\n    +} else </p>\n{\n    +    response = notAuthorized();\n    +}\n<p>    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage notAuthorized() </p>\n{\n    +return new HBMessage(HBServerMessageType.NOT_AUTHORIZED, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage sendPulse(HBPulse pulse) {<br/>\n    +String id = pulse.get_id();<br/>\n    +byte[] details = pulse.get_details();<br/>\n    +LOG.debug(\"Saving Pulse for id [ {} ] data [ {} ].\", id, details);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    new String(details) will print the bytes correctly.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881667/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881668","html_url":"https://github.com/apache/storm/issues/5446#issuecomment-2612881668","issue_url":"https://api.github.com/repos/apache/storm/issues/5446","id":2612881668,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE2Njg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:17:33Z","updated_at":"2025-01-24T16:06:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195#discussion_r55484087\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195#discussion_r55484087</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/pacemaker/Pacemaker.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.pacemaker;<br/>\n    +<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import uk.org.lidalia.sysoutslf4j.context.SysOutOverSLF4J;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class Pacemaker implements IServerMessageHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Pacemaker.class);<br/>\n    +<br/>\n    +    private Map heartbeats;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    this can be `private Map<String, byte[]> heartbeats`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881668/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194179024","html_url":"https://github.com/apache/storm/pull/1192#issuecomment-194179024","issue_url":"https://api.github.com/repos/apache/storm/issues/1192","id":194179024,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDE3OTAyNA==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:21:10Z","updated_at":"2016-03-09T08:21:10Z","author_association":"CONTRIBUTOR","body":"@zhuoliu @satishd @knusbaum @abhishekagarwal87  Thank you. I have addressed your comments.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194179024/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881518","html_url":"https://github.com/apache/storm/issues/5445#issuecomment-2612881518","issue_url":"https://api.github.com/repos/apache/storm/issues/5445","id":2612881518,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE1MTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:21:14Z","updated_at":"2025-01-24T16:06:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192#issuecomment-194179024\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192#issuecomment-194179024</a></p>\n\n<p>    @zhuoliu @satishd @knusbaum @abhishekagarwal87  Thank you. I have addressed your comments.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881518/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881673","html_url":"https://github.com/apache/storm/issues/5446#issuecomment-2612881673","issue_url":"https://api.github.com/repos/apache/storm/issues/5446","id":2612881673,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE2NzM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:24:05Z","updated_at":"2025-01-24T16:06:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195#discussion_r55484666\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195#discussion_r55484666</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/pacemaker/Pacemaker.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.pacemaker;<br/>\n    +<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import uk.org.lidalia.sysoutslf4j.context.SysOutOverSLF4J;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class Pacemaker implements IServerMessageHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Pacemaker.class);<br/>\n    +<br/>\n    +    private Map heartbeats;<br/>\n    +    private PacemakerStats pacemakerStats;<br/>\n    +    private Map conf;<br/>\n    +    private final long sleepSeconds = 60;<br/>\n    +<br/>\n    +    private static class PacemakerStats </p>\n{\n    +public AtomicInteger sendPulseCount = new AtomicInteger();\n    +public AtomicInteger totalReceivedSize = new AtomicInteger();\n    +public AtomicInteger getPulseCount = new AtomicInteger();\n    +public AtomicInteger totalSentSize = new AtomicInteger();\n    +public AtomicInteger largestHeartbeatSize = new AtomicInteger();\n    +public AtomicInteger averageHeartbeatSize = new AtomicInteger();\n    +    }\n<p>    +<br/>\n    +    public Pacemaker(Map conf) </p>\n{\n    +heartbeats = new ConcurrentHashMap();\n    +pacemakerStats = new PacemakerStats();\n    +this.conf = conf;\n    +startStatsThread();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public HBMessage handleMessage(HBMessage m, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +HBMessageData data = m.get_data();<br/>\n    +switch (m.get_type()) {<br/>\n    +case CREATE_PATH:<br/>\n    +    response = createPath(data.get_path());<br/>\n    +    break;<br/>\n    +case EXISTS:<br/>\n    +    response = exists(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case SEND_PULSE:<br/>\n    +    response = sendPulse(data.get_pulse());<br/>\n    +    break;<br/>\n    +case GET_ALL_PULSE_FOR_PATH:<br/>\n    +    response = getAllPulseForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_ALL_NODES_FOR_PATH:<br/>\n    +    response = getAllNodesForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_PULSE:<br/>\n    +    response = getPulse(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case DELETE_PATH:<br/>\n    +    response = deletePath(data.get_path());<br/>\n    +    break;<br/>\n    +case DELETE_PULSE_ID:<br/>\n    +    response = deletePulseId(data.get_path());<br/>\n    +    break;<br/>\n    +default:<br/>\n    +    LOG.info(\"Got Unexpected Type: {}\", m.get_type());<br/>\n    +    break;<br/>\n    +}<br/>\n    +if (response != null)<br/>\n    +    response.set_message_id(m.get_message_id());<br/>\n    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage createPath(String path) </p>\n{\n    +return new HBMessage(HBServerMessageType.CREATE_PATH_RESPONSE, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage exists(String path, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +if (authenticated) {<br/>\n    +    boolean itDoes = heartbeats.containsKey(path);<br/>\n    +    LOG.debug(\"Checking if path [ {} ] exists... {} .\", path, itDoes);<br/>\n    +    response = new HBMessage(HBServerMessageType.EXISTS_RESPONSE, HBMessageData.boolval(itDoes));<br/>\n    +} else </p>\n{\n    +    response = notAuthorized();\n    +}\n<p>    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage notAuthorized() </p>\n{\n    +return new HBMessage(HBServerMessageType.NOT_AUTHORIZED, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage sendPulse(HBPulse pulse) {<br/>\n    +String id = pulse.get_id();<br/>\n    +byte[] details = pulse.get_details();<br/>\n    +LOG.debug(\"Saving Pulse for id [ {} ] data [ {} ].\", id, details);<br/>\n    +pacemakerStats.sendPulseCount.incrementAndGet();<br/>\n    +pacemakerStats.totalReceivedSize.addAndGet(details.length);<br/>\n    +updateLargestHbSize(details.length);<br/>\n    +updateAverageHbSize(details.length);<br/>\n    +heartbeats.put(id, details);<br/>\n    +return new HBMessage(HBServerMessageType.SEND_PULSE_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage getAllPulseForPath(String path, boolean authenticated) {<br/>\n    +if (authenticated) </p>\n{\n    +    return new HBMessage(HBServerMessageType.GET_ALL_PULSE_FOR_PATH_RESPONSE, null);\n    +}\n<p> else </p>\n{\n    +    return notAuthorized();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage getAllNodesForPath(String path, boolean authenticated) {<br/>\n    +LOG.debug(\"List all nodes for path {}\", path);<br/>\n    +if (authenticated) {<br/>\n    +    Set<String> pulseIds = new HashSet<>();<br/>\n    +    for (Object key : heartbeats.keySet()) {<br/>\n    +String k = (String) key;<br/>\n    +String[] replaceStr = k.replaceFirst(path, \"\").split(\"/\");<br/>\n    +String trimmmed = null;<br/>\n    +for (String str : replaceStr) {<br/>\n    +    if (!str.equals(\"\")) {\n    +trimmmed = str;\n    +break;\n    +    }<br/>\n    +}<br/>\n    +if (trimmmed != null && k.indexOf(path) == 0) {\n    +    pulseIds.add(trimmmed);\n    +}<br/>\n    +    }<br/>\n    +    HBMessageData hbMessageData = HBMessageData.nodes(new HBNodes(new ArrayList(pulseIds)));<br/>\n    +    return new HBMessage(HBServerMessageType.GET_ALL_NODES_FOR_PATH_RESPONSE, hbMessageData);<br/>\n    +} else {    +    return notAuthorized();    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private HBMessage getPulse(String path, boolean authenticated) {<br/>\n    +if (authenticated) {<br/>\n    +    byte[] details = (byte[]) heartbeats.get(path);<br/>\n    +    LOG.debug(\"Getting Pulse for path [ {} ]...data [ {} ].\", path, details);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    new String(details)</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881673/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881679","html_url":"https://github.com/apache/storm/issues/5446#issuecomment-2612881679","issue_url":"https://api.github.com/repos/apache/storm/issues/5446","id":2612881679,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE2Nzk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:34:21Z","updated_at":"2025-01-24T16:06:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195#discussion_r55485672\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195#discussion_r55485672</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/pacemaker/Pacemaker.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.pacemaker;<br/>\n    +<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import uk.org.lidalia.sysoutslf4j.context.SysOutOverSLF4J;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class Pacemaker implements IServerMessageHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Pacemaker.class);<br/>\n    +<br/>\n    +    private Map heartbeats;<br/>\n    +    private PacemakerStats pacemakerStats;<br/>\n    +    private Map conf;<br/>\n    +    private final long sleepSeconds = 60;<br/>\n    +<br/>\n    +    private static class PacemakerStats </p>\n{\n    +public AtomicInteger sendPulseCount = new AtomicInteger();\n    +public AtomicInteger totalReceivedSize = new AtomicInteger();\n    +public AtomicInteger getPulseCount = new AtomicInteger();\n    +public AtomicInteger totalSentSize = new AtomicInteger();\n    +public AtomicInteger largestHeartbeatSize = new AtomicInteger();\n    +public AtomicInteger averageHeartbeatSize = new AtomicInteger();\n    +    }\n<p>    +<br/>\n    +    public Pacemaker(Map conf) </p>\n{\n    +heartbeats = new ConcurrentHashMap();\n    +pacemakerStats = new PacemakerStats();\n    +this.conf = conf;\n    +startStatsThread();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public HBMessage handleMessage(HBMessage m, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +HBMessageData data = m.get_data();<br/>\n    +switch (m.get_type()) {<br/>\n    +case CREATE_PATH:<br/>\n    +    response = createPath(data.get_path());<br/>\n    +    break;<br/>\n    +case EXISTS:<br/>\n    +    response = exists(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case SEND_PULSE:<br/>\n    +    response = sendPulse(data.get_pulse());<br/>\n    +    break;<br/>\n    +case GET_ALL_PULSE_FOR_PATH:<br/>\n    +    response = getAllPulseForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_ALL_NODES_FOR_PATH:<br/>\n    +    response = getAllNodesForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_PULSE:<br/>\n    +    response = getPulse(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case DELETE_PATH:<br/>\n    +    response = deletePath(data.get_path());<br/>\n    +    break;<br/>\n    +case DELETE_PULSE_ID:<br/>\n    +    response = deletePulseId(data.get_path());<br/>\n    +    break;<br/>\n    +default:<br/>\n    +    LOG.info(\"Got Unexpected Type: {}\", m.get_type());<br/>\n    +    break;<br/>\n    +}<br/>\n    +if (response != null)<br/>\n    +    response.set_message_id(m.get_message_id());<br/>\n    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage createPath(String path) </p>\n{\n    +return new HBMessage(HBServerMessageType.CREATE_PATH_RESPONSE, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage exists(String path, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +if (authenticated) {<br/>\n    +    boolean itDoes = heartbeats.containsKey(path);<br/>\n    +    LOG.debug(\"Checking if path [ {} ] exists... {} .\", path, itDoes);<br/>\n    +    response = new HBMessage(HBServerMessageType.EXISTS_RESPONSE, HBMessageData.boolval(itDoes));<br/>\n    +} else </p>\n{\n    +    response = notAuthorized();\n    +}\n<p>    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage notAuthorized() </p>\n{\n    +return new HBMessage(HBServerMessageType.NOT_AUTHORIZED, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage sendPulse(HBPulse pulse) {<br/>\n    +String id = pulse.get_id();<br/>\n    +byte[] details = pulse.get_details();<br/>\n    +LOG.debug(\"Saving Pulse for id [ {} ] data [ {} ].\", id, details);<br/>\n    +pacemakerStats.sendPulseCount.incrementAndGet();<br/>\n    +pacemakerStats.totalReceivedSize.addAndGet(details.length);<br/>\n    +updateLargestHbSize(details.length);<br/>\n    +updateAverageHbSize(details.length);<br/>\n    +heartbeats.put(id, details);<br/>\n    +return new HBMessage(HBServerMessageType.SEND_PULSE_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage getAllPulseForPath(String path, boolean authenticated) {<br/>\n    +if (authenticated) </p>\n{\n    +    return new HBMessage(HBServerMessageType.GET_ALL_PULSE_FOR_PATH_RESPONSE, null);\n    +}\n<p> else </p>\n{\n    +    return notAuthorized();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage getAllNodesForPath(String path, boolean authenticated) {<br/>\n    +LOG.debug(\"List all nodes for path {}\", path);<br/>\n    +if (authenticated) {<br/>\n    +    Set<String> pulseIds = new HashSet<>();<br/>\n    +    for (Object key : heartbeats.keySet()) {<br/>\n    +String k = (String) key;<br/>\n    +String[] replaceStr = k.replaceFirst(path, \"\").split(\"/\");<br/>\n    +String trimmmed = null;<br/>\n    +for (String str : replaceStr) {<br/>\n    +    if (!str.equals(\"\")) {\n    +trimmmed = str;\n    +break;\n    +    }<br/>\n    +}<br/>\n    +if (trimmmed != null && k.indexOf(path) == 0) {\n    +    pulseIds.add(trimmmed);\n    +}<br/>\n    +    }<br/>\n    +    HBMessageData hbMessageData = HBMessageData.nodes(new HBNodes(new ArrayList(pulseIds)));<br/>\n    +    return new HBMessage(HBServerMessageType.GET_ALL_NODES_FOR_PATH_RESPONSE, hbMessageData);<br/>\n    +} else {    +    return notAuthorized();    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private HBMessage getPulse(String path, boolean authenticated) {<br/>\n    +if (authenticated) {<br/>\n    +    byte[] details = (byte[]) heartbeats.get(path);<br/>\n    +    LOG.debug(\"Getting Pulse for path [ {} ]...data [ {} ].\", path, details);<br/>\n    +    pacemakerStats.getPulseCount.incrementAndGet();<br/>\n    +    if (details != null) </p>\n{\n    +pacemakerStats.totalSentSize.addAndGet(details.length);\n    +    }\n<p>    +    HBPulse hbPulse = new HBPulse();<br/>\n    +    hbPulse.set_id(path);<br/>\n    +    hbPulse.set_details(details);<br/>\n    +    return new HBMessage(HBServerMessageType.GET_PULSE_RESPONSE, HBMessageData.pulse(hbPulse));<br/>\n    +} else </p>\n{\n    +    return notAuthorized();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private HBMessage deletePath(String path) {<br/>\n    +String prefix = path.endsWith(\"/\") ? path : (path + \"/\");<br/>\n    +for (Object key : heartbeats.keySet()) </p>\n{\n    +    if (((String) key).indexOf(prefix) == 0)\n    +deletePulseId((String) key);\n    +}\n<p>    +return new HBMessage(HBServerMessageType.DELETE_PATH_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage deletePulseId(String path) {<br/>\n    +LOG.debug(\"Deleting Pulse for id [ {} ].\", path);<br/>\n    +heartbeats.remove(path);<br/>\n    +return new HBMessage(HBServerMessageType.DELETE_PULSE_ID_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private void updateLargestHbSize(int size) {<br/>\n    +int newValue = size;<br/>\n    +while (true) {<br/>\n    +    int oldValue = pacemakerStats.largestHeartbeatSize.get();<br/>\n    +    if (newValue > oldValue) </p>\n{\n    +if (!pacemakerStats.largestHeartbeatSize.compareAndSet(oldValue, newValue))\n    +    continue;\n    +    }\n<p>    +    break;<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void updateAverageHbSize(int size) {<br/>\n    +int newValue = size;<br/>\n    +while (true) {<br/>\n    +    int oldValue = pacemakerStats.averageHeartbeatSize.get();<br/>\n    +    int count = pacemakerStats.sendPulseCount.get();<br/>\n    +    newValue = ((count * oldValue) + newValue) / (count + 1);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    This will keep modifying the newValue. I think it should be something like this<br/>\n    ` newValue = ((count * oldValue) + size) / (count + 1);`</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881679/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881684","html_url":"https://github.com/apache/storm/issues/5446#issuecomment-2612881684","issue_url":"https://api.github.com/repos/apache/storm/issues/5446","id":2612881684,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE2ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:35:53Z","updated_at":"2025-01-24T16:06:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195#discussion_r55485829\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195#discussion_r55485829</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/pacemaker/Pacemaker.java &#8212;<br/>\n    @@ -0,0 +1,248 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.pacemaker;<br/>\n    +<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import uk.org.lidalia.sysoutslf4j.context.SysOutOverSLF4J;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class Pacemaker implements IServerMessageHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Pacemaker.class);<br/>\n    +<br/>\n    +    private Map heartbeats;<br/>\n    +    private PacemakerStats pacemakerStats;<br/>\n    +    private Map conf;<br/>\n    +    private final long sleepSeconds = 60;<br/>\n    +<br/>\n    +    private static class PacemakerStats </p>\n{\n    +public AtomicInteger sendPulseCount = new AtomicInteger();\n    +public AtomicInteger totalReceivedSize = new AtomicInteger();\n    +public AtomicInteger getPulseCount = new AtomicInteger();\n    +public AtomicInteger totalSentSize = new AtomicInteger();\n    +public AtomicInteger largestHeartbeatSize = new AtomicInteger();\n    +public AtomicInteger averageHeartbeatSize = new AtomicInteger();\n    +    }\n<p>    +<br/>\n    +    public Pacemaker(Map conf) </p>\n{\n    +heartbeats = new ConcurrentHashMap();\n    +pacemakerStats = new PacemakerStats();\n    +this.conf = conf;\n    +startStatsThread();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public HBMessage handleMessage(HBMessage m, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +HBMessageData data = m.get_data();<br/>\n    +switch (m.get_type()) {<br/>\n    +case CREATE_PATH:<br/>\n    +    response = createPath(data.get_path());<br/>\n    +    break;<br/>\n    +case EXISTS:<br/>\n    +    response = exists(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case SEND_PULSE:<br/>\n    +    response = sendPulse(data.get_pulse());<br/>\n    +    break;<br/>\n    +case GET_ALL_PULSE_FOR_PATH:<br/>\n    +    response = getAllPulseForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_ALL_NODES_FOR_PATH:<br/>\n    +    response = getAllNodesForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_PULSE:<br/>\n    +    response = getPulse(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case DELETE_PATH:<br/>\n    +    response = deletePath(data.get_path());<br/>\n    +    break;<br/>\n    +case DELETE_PULSE_ID:<br/>\n    +    response = deletePulseId(data.get_path());<br/>\n    +    break;<br/>\n    +default:<br/>\n    +    LOG.info(\"Got Unexpected Type: {}\", m.get_type());<br/>\n    +    break;<br/>\n    +}<br/>\n    +if (response != null)<br/>\n    +    response.set_message_id(m.get_message_id());<br/>\n    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage createPath(String path) </p>\n{\n    +return new HBMessage(HBServerMessageType.CREATE_PATH_RESPONSE, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage exists(String path, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +if (authenticated) {<br/>\n    +    boolean itDoes = heartbeats.containsKey(path);<br/>\n    +    LOG.debug(\"Checking if path [ {} ] exists... {} .\", path, itDoes);<br/>\n    +    response = new HBMessage(HBServerMessageType.EXISTS_RESPONSE, HBMessageData.boolval(itDoes));<br/>\n    +} else </p>\n{\n    +    response = notAuthorized();\n    +}\n<p>    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage notAuthorized() </p>\n{\n    +return new HBMessage(HBServerMessageType.NOT_AUTHORIZED, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage sendPulse(HBPulse pulse) {<br/>\n    +String id = pulse.get_id();<br/>\n    +byte[] details = pulse.get_details();<br/>\n    +LOG.debug(\"Saving Pulse for id [ {} ] data [ {} ].\", id, details);<br/>\n    +pacemakerStats.sendPulseCount.incrementAndGet();<br/>\n    +pacemakerStats.totalReceivedSize.addAndGet(details.length);<br/>\n    +updateLargestHbSize(details.length);<br/>\n    +updateAverageHbSize(details.length);<br/>\n    +heartbeats.put(id, details);<br/>\n    +return new HBMessage(HBServerMessageType.SEND_PULSE_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage getAllPulseForPath(String path, boolean authenticated) {<br/>\n    +if (authenticated) </p>\n{\n    +    return new HBMessage(HBServerMessageType.GET_ALL_PULSE_FOR_PATH_RESPONSE, null);\n    +}\n<p> else </p>\n{\n    +    return notAuthorized();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage getAllNodesForPath(String path, boolean authenticated) {<br/>\n    +LOG.debug(\"List all nodes for path {}\", path);<br/>\n    +if (authenticated) {<br/>\n    +    Set<String> pulseIds = new HashSet<>();<br/>\n    +    for (Object key : heartbeats.keySet()) {<br/>\n    +String k = (String) key;<br/>\n    +String[] replaceStr = k.replaceFirst(path, \"\").split(\"/\");<br/>\n    +String trimmmed = null;<br/>\n    +for (String str : replaceStr) {<br/>\n    +    if (!str.equals(\"\")) {\n    +trimmmed = str;\n    +break;\n    +    }<br/>\n    +}<br/>\n    +if (trimmmed != null && k.indexOf(path) == 0) {\n    +    pulseIds.add(trimmmed);\n    +}<br/>\n    +    }<br/>\n    +    HBMessageData hbMessageData = HBMessageData.nodes(new HBNodes(new ArrayList(pulseIds)));<br/>\n    +    return new HBMessage(HBServerMessageType.GET_ALL_NODES_FOR_PATH_RESPONSE, hbMessageData);<br/>\n    +} else {    +    return notAuthorized();    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private HBMessage getPulse(String path, boolean authenticated) {<br/>\n    +if (authenticated) {<br/>\n    +    byte[] details = (byte[]) heartbeats.get(path);<br/>\n    +    LOG.debug(\"Getting Pulse for path [ {} ]...data [ {} ].\", path, details);<br/>\n    +    pacemakerStats.getPulseCount.incrementAndGet();<br/>\n    +    if (details != null) </p>\n{\n    +pacemakerStats.totalSentSize.addAndGet(details.length);\n    +    }\n<p>    +    HBPulse hbPulse = new HBPulse();<br/>\n    +    hbPulse.set_id(path);<br/>\n    +    hbPulse.set_details(details);<br/>\n    +    return new HBMessage(HBServerMessageType.GET_PULSE_RESPONSE, HBMessageData.pulse(hbPulse));<br/>\n    +} else </p>\n{\n    +    return notAuthorized();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private HBMessage deletePath(String path) {<br/>\n    +String prefix = path.endsWith(\"/\") ? path : (path + \"/\");<br/>\n    +for (Object key : heartbeats.keySet()) </p>\n{\n    +    if (((String) key).indexOf(prefix) == 0)\n    +deletePulseId((String) key);\n    +}\n<p>    +return new HBMessage(HBServerMessageType.DELETE_PATH_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage deletePulseId(String path) {<br/>\n    +LOG.debug(\"Deleting Pulse for id [ {} ].\", path);<br/>\n    +heartbeats.remove(path);<br/>\n    +return new HBMessage(HBServerMessageType.DELETE_PULSE_ID_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private void updateLargestHbSize(int size) {<br/>\n    +int newValue = size;<br/>\n    +while (true) {<br/>\n    +    int oldValue = pacemakerStats.largestHeartbeatSize.get();<br/>\n    +    if (newValue > oldValue) </p>\n{\n    +if (!pacemakerStats.largestHeartbeatSize.compareAndSet(oldValue, newValue))\n    +    continue;\n    +    }\n<p>    +    break;<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void updateAverageHbSize(int size) {<br/>\n    +int newValue = size;<br/>\n    +while (true) {<br/>\n    +    int oldValue = pacemakerStats.averageHeartbeatSize.get();<br/>\n    +    int count = pacemakerStats.sendPulseCount.get();<br/>\n    +    newValue = ((count * oldValue) + newValue) / (count + 1);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    \"value to add\" should remain the same. Only the \"value to set\" should change. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881684/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194183788","html_url":"https://github.com/apache/storm/pull/1192#issuecomment-194183788","issue_url":"https://api.github.com/repos/apache/storm/issues/1192","id":194183788,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDE4Mzc4OA==","user":{"login":"satishd","id":2577761,"node_id":"MDQ6VXNlcjI1Nzc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/2577761?v=4","gravatar_id":"","url":"https://api.github.com/users/satishd","html_url":"https://github.com/satishd","followers_url":"https://api.github.com/users/satishd/followers","following_url":"https://api.github.com/users/satishd/following{/other_user}","gists_url":"https://api.github.com/users/satishd/gists{/gist_id}","starred_url":"https://api.github.com/users/satishd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satishd/subscriptions","organizations_url":"https://api.github.com/users/satishd/orgs","repos_url":"https://api.github.com/users/satishd/repos","events_url":"https://api.github.com/users/satishd/events{/privacy}","received_events_url":"https://api.github.com/users/satishd/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:36:59Z","updated_at":"2016-03-09T08:36:59Z","author_association":"MEMBER","body":"+1 LGTM\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194183788/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881523","html_url":"https://github.com/apache/storm/issues/5445#issuecomment-2612881523","issue_url":"https://api.github.com/repos/apache/storm/issues/5445","id":2612881523,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE1MjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:37:00Z","updated_at":"2025-01-24T16:06:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user satishd commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192#issuecomment-194183788\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192#issuecomment-194183788</a></p>\n\n<p>    +1 LGTM</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881523/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194185091","html_url":"https://github.com/apache/storm/pull/1192#issuecomment-194185091","issue_url":"https://api.github.com/repos/apache/storm/issues/1192","id":194185091,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDE4NTA5MQ==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:42:13Z","updated_at":"2016-03-09T08:42:13Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194185091/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881529","html_url":"https://github.com/apache/storm/issues/5445#issuecomment-2612881529","issue_url":"https://api.github.com/repos/apache/storm/issues/5445","id":2612881529,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE1Mjk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T08:42:15Z","updated_at":"2025-01-24T16:06:23Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1192#issuecomment-194185091\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1192#issuecomment-194185091</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881529/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652071","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652071","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652071,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwNzE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T09:02:43Z","updated_at":"2025-01-24T14:23:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55488501\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55488501</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,605 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterId = null;<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() {<br/>\n    +return new Acker();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes, it is for mocking in with-tracked-cluster.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652071/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652074","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652074","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652074,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwNzQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T09:03:20Z","updated_at":"2025-01-24T14:23:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55488575\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55488575</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,605 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK. I will update it.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652077","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652077","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652077,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwNzc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T09:08:50Z","updated_at":"2025-01-24T14:23:31Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55489222\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55489222</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,605 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @revans2  Yes, the major purpose here is to reduce the access to zk. Anyway, I am OK for keeping consistent with the original code.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652077/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652080","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652080","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652080,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwODA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T09:14:24Z","updated_at":"2025-01-24T14:23:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55489803\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55489803</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/common.clj &#8212;<br/>\n    @@ -86,26 +40,6 @@<br/>\n     (defn new-executor-stats []<br/>\n       (ExecutorStats. 0 0 0 0 0))<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Yes, I recommend to just use the thrift classes directly when we work on relative modules. It can save much effort now for the converting between clojure and jave. Please refer to my comments at the beginning of this PR. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652080/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652087","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652087","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652087,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwODc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T09:16:05Z","updated_at":"2025-01-24T14:23:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55489975\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55489975</a></p>\n\n<p>    &#8212; Diff: storm-core/src/clj/org/apache/storm/daemon/common.clj &#8212;<br/>\n    @@ -408,19 +69,3 @@<br/>\n       (:default-shared-resources worker)<br/>\n       (:user-shared-resources worker)<br/>\n       ))<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    OK, I will create one.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652087/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652094","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652094","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652094,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwOTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T09:21:01Z","updated_at":"2025-01-24T14:23:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55490580\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55490580</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,605 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterId = null;<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) </p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +ComponentCommon common = null;<br/>\n    +if (component instanceof StateSpoutSpec) </p>\n{\n    +    common = ((StateSpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof SpoutSpec) </p>\n{\n    +    common = ((SpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof Bolt) </p>\n{\n    +    common = ((Bolt) component).get_common();\n    +}\n<p>    +return common;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"task-info\", \"data-points\"));\n    +common.put_to_streams(Constants.METRICS_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addSystemStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"event\"));\n    +common.put_to_streams(SYSTEM_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> eventLoggerBoltFields() </p>\n{\n    +List<String> fields = Arrays.asList(EventLoggerBolt.FIELD_COMPONENT_ID, EventLoggerBolt.FIELD_MESSAGE_ID, EventLoggerBolt.FIELD_TS,\n    +EventLoggerBolt.FIELD_VALUES);\n    +return fields;\n    +    }\n<p>    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> eventLoggerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> allIds = new HashSet<String>();<br/>\n    +allIds.addAll(topology.get_bolts().keySet());<br/>\n    +allIds.addAll(topology.get_spouts().keySet());<br/>\n    +<br/>\n    +for(String id : allIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, EVENTLOGGER_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"component-id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addEventLogger(Map conf, StormTopology topology) {<br/>\n    +Integer numExecutors = Utils.getInt(conf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +HashMap<String, Object> componentConf = new HashMap<String, Object>();<br/>\n    +componentConf.put(Config.TOPOLOGY_TASKS, numExecutors);<br/>\n    +componentConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +Bolt eventLoggerBolt = Thrift.prepareSerializedBoltDetails(eventLoggerInputs(topology), new EventLoggerBolt(), null, numExecutors, componentConf);<br/>\n    +<br/>\n    +for(Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +common.put_to_streams(EVENTLOGGER_STREAM_ID, Thrift.outputFields(eventLoggerBoltFields()));\n    +    }\n<p>    +}<br/>\n    +topology.put_to_bolts(EVENTLOGGER_COMPONENT_ID, eventLoggerBolt);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, Bolt> metricsConsumerBoltSpecs(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = new HashMap<String, Bolt>();<br/>\n    +<br/>\n    +Set<String> componentIdsEmitMetrics = new HashSet<String>();<br/>\n    +componentIdsEmitMetrics.addAll(allComponents(topology).keySet());<br/>\n    +componentIdsEmitMetrics.add(Constants.SYSTEM_COMPONENT_ID);<br/>\n    +<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +for (String componentId : componentIdsEmitMetrics) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(componentId, Constants.METRICS_STREAM_ID), Thrift.prepareShuffleGrouping());\n    +}\n<p>    +<br/>\n    +List<Map<String, Object>> registerInfo = (List<Map<String, Object>>) conf.get(Config.TOPOLOGY_METRICS_CONSUMER_REGISTER);<br/>\n    +if (registerInfo != null) {<br/>\n    +    Map<String, Integer> classOccurrencesMap = new HashMap<String, Integer>();<br/>\n    +    for (Map<String, Object> info : registerInfo) {<br/>\n    +String className = (String) info.get(\"class\");<br/>\n    +Object argument = info.get(\"argument\");<br/>\n    +Integer phintNum = Utils.getInt(info.get(\"parallelism.hint\"), 1);<br/>\n    +Map<String, Object> metricsConsumerConf = new HashMap<String, Object>();<br/>\n    +metricsConsumerConf.put(Config.TOPOLOGY_TASKS, phintNum);<br/>\n    +Bolt metricsConsumerBolt = Thrift.prepareSerializedBoltDetails(inputs, new MetricsConsumerBolt(className, argument), null, phintNum, metricsConsumerConf);<br/>\n    +<br/>\n    +String id = className;<br/>\n    +if (classOccurrencesMap.containsKey(className)) </p>\n{\n    +    // e.g. [\\\"a\\\", \\\"b\\\", \\\"a\\\"]) => [\\\"a\\\", \\\"b\\\", \\\"a#2\\\"]\"\n    +    int occurrenceNum = classOccurrencesMap.get(className);\n    +    occurrenceNum++;\n    +    classOccurrencesMap.put(className, occurrenceNum);\n    +    id = Constants.METRICS_COMPONENT_ID_PREFIX + className + \"#\" + occurrenceNum;\n    +}\n<p> else </p>\n{\n    +    classOccurrencesMap.put(className, 1);\n    +}\n<p>    +metricsConsumerBolts.put(id, metricsConsumerBolt);<br/>\n    +    }<br/>\n    +}<br/>\n    +return metricsConsumerBolts;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricComponents(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = metricsConsumerBoltSpecs(conf, topology);<br/>\n    +for (Map.Entry<String, Bolt> entry : metricsConsumerBolts.entrySet()) </p>\n{\n    +    topology.put_to_bolts(entry.getKey(), entry.getValue());\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addSystemComponents(Map conf, StormTopology topology) </p>\n{\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();\n    +outputStreams.put(Constants.SYSTEM_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"rate_secs\")));\n    +outputStreams.put(Constants.METRICS_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"interval\")));\n    +outputStreams.put(Constants.CREDENTIALS_CHANGED_STREAM_ID, Thrift.outputFields(Arrays.asList(\"creds\")));\n    +\n    +Map<String, Object> boltConf = new HashMap<String, Object>();\n    +boltConf.put(Config.TOPOLOGY_TASKS, 0);\n    +\n    +Bolt systemBoltSpec = Thrift.prepareSerializedBoltDetails(null, new SystemBolt(), outputStreams, 0, boltConf);\n    +topology.put_to_bolts(Constants.SYSTEM_COMPONENT_ID, systemBoltSpec);\n    +    }\n<p>    +<br/>\n    +    public static StormTopology systemTopology(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +return _instance.systemTopologyImpl(stormConf, topology);\n    +    }\n<p>    +<br/>\n    +    protected StormTopology systemTopologyImpl(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +validateBasic(topology);\n    +\n    +StormTopology ret = topology.deepCopy();\n    +addAcker(stormConf, ret);\n    +addEventLogger(stormConf, ret);\n    +addMetricComponents(stormConf, ret);\n    +addSystemComponents(stormConf, ret);\n    +addMetricStreams(ret);\n    +addSystemStreams(ret);\n    +\n    +validateStructure(ret);\n    +\n    +return ret;\n    +    }\n<p>    +<br/>\n    +    public static boolean hasAckers(Map stormConf) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I prefer to just keep the same with origin code since these functions are related to \"topology component\", not a utils function. It is better to keep these kind functions in common.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652094/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194200201","html_url":"https://github.com/apache/storm/pull/1174#issuecomment-194200201","issue_url":"https://api.github.com/repos/apache/storm/issues/1174","id":194200201,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDIwMDIwMQ==","user":{"login":"runesl","id":1193502,"node_id":"MDQ6VXNlcjExOTM1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/1193502?v=4","gravatar_id":"","url":"https://api.github.com/users/runesl","html_url":"https://github.com/runesl","followers_url":"https://api.github.com/users/runesl/followers","following_url":"https://api.github.com/users/runesl/following{/other_user}","gists_url":"https://api.github.com/users/runesl/gists{/gist_id}","starred_url":"https://api.github.com/users/runesl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/runesl/subscriptions","organizations_url":"https://api.github.com/users/runesl/orgs","repos_url":"https://api.github.com/users/runesl/repos","events_url":"https://api.github.com/users/runesl/events{/privacy}","received_events_url":"https://api.github.com/users/runesl/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T09:22:16Z","updated_at":"2016-03-09T09:22:16Z","author_association":"NONE","body":"As all review comments are addressed, will it be merged soon? :-)\nWe need this feature in the IoT storm topology we're building, where bolts send to unstable external systems and we need at-least-once consistency, so dropping tuples on tuple timeout is bad for us.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194200201/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872314","html_url":"https://github.com/apache/storm/issues/5384#issuecomment-2612872314","issue_url":"https://api.github.com/repos/apache/storm/issues/5384","id":2612872314,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIzMTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T09:22:18Z","updated_at":"2025-01-24T16:02:10Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user rsltrifork commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1174#issuecomment-194200201\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1174#issuecomment-194200201</a></p>\n\n<p>    As all review comments are addressed, will it be merged soon? <img class=\"emoticon\" src=\"https://issues.apache.org/jira/images/icons/emoticons/smile.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/><br/>\n    We need this feature in the IoT storm topology we're building, where bolts send to unstable external systems and we need at-least-once consistency, so dropping tuples on tuple timeout is bad for us.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612872314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652099","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652099","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652099,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIwOTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T10:57:21Z","updated_at":"2025-01-24T14:23:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55502112\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55502112</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,604 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) {<br/>\n    +    throw new InvalidTopologyException(\"Component: <span class=\"error\">&#91;\" + componentId + \"&#93;</span> subscribes from stream: <span class=\"error\">&#91;\" + sourceStreamId  +\"&#93;</span> of component \" +<br/>\n    +    \"<span class=\"error\">&#91;\" + sourceComponentId + \"&#93;</span> + with non-existent fields: \" + fields);<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Addressed</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652099/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652695","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652695","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652695,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2OTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T11:09:19Z","updated_at":"2025-01-24T14:23:46Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55503401\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55503401</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @revans2  I can see the same errors when I run Drpc of master branch.  Later I find we maybe misunderstand it. As follows:<br/>\n    $ curl <a href=\"http://localhost:3774/drpc/exclamation/hi\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://localhost:3774/drpc/exclamation/hi</a><br/>\n    hi!<br/>\n    It's ok. So the URL should like \"\"/drpc/:func/*\"</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652695/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652699","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652699","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652699,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI2OTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T11:10:10Z","updated_at":"2025-01-24T14:23:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55503487\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55503487</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @revans2  I have adjust the order of initHttp(). Thank you again.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652699/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652102","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652102","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652102,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIxMDI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T11:13:37Z","updated_at":"2025-01-24T14:23:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55503834\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55503834</a></p>\n\n<p>    &#8212; Diff: storm-core/test/jvm/org/apache/storm/utils/staticmocking/CommonInstaller.java &#8212;<br/>\n    @@ -0,0 +1,38 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one or more<br/>\n    + * contributor license agreements.  See the NOTICE file distributed with<br/>\n    + * this work for additional information regarding copyright ownership.<br/>\n    + * The ASF licenses this file to you under the Apache License, Version<br/>\n    + * 2.0 (the \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.utils.staticmocking;<br/>\n    +<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +<br/>\n    +public class CommonInstaller implements AutoCloseable {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    CommonInstaller is used for mocking in clojure testing. It is the same way of mocking as Utils and ConfigUtils. I am not sure if there is a better solution. Any suggestion?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194268412","html_url":"https://github.com/apache/storm/pull/1190#issuecomment-194268412","issue_url":"https://api.github.com/repos/apache/storm/issues/1190","id":194268412,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDI2ODQxMg==","user":{"login":"arunmahadevan","id":6792890,"node_id":"MDQ6VXNlcjY3OTI4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/6792890?v=4","gravatar_id":"","url":"https://api.github.com/users/arunmahadevan","html_url":"https://github.com/arunmahadevan","followers_url":"https://api.github.com/users/arunmahadevan/followers","following_url":"https://api.github.com/users/arunmahadevan/following{/other_user}","gists_url":"https://api.github.com/users/arunmahadevan/gists{/gist_id}","starred_url":"https://api.github.com/users/arunmahadevan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arunmahadevan/subscriptions","organizations_url":"https://api.github.com/users/arunmahadevan/orgs","repos_url":"https://api.github.com/users/arunmahadevan/repos","events_url":"https://api.github.com/users/arunmahadevan/events{/privacy}","received_events_url":"https://api.github.com/users/arunmahadevan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T12:12:29Z","updated_at":"2016-03-09T12:12:29Z","author_association":"CONTRIBUTOR","body":"@revans2 @ptgoetz I have refactored the code and removed the auto anchoring/acking for both stateful and non-stateful bolts in a stateful topology. Currently state checkpointing provides at least once processing and we could consider providing a best effort checkpointing and relax the acking/anchoring requirements as a separate feature. \n\nWe expect IStatefulBolt implementations also to ack/anchor now and hence passing OuputCollector in the stateful bolt's prepare method should be fine.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194268412/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881107","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881107","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881107,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODExMDc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T12:12:33Z","updated_at":"2025-01-24T16:06:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#issuecomment-194268412\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#issuecomment-194268412</a></p>\n\n<p>    @revans2 @ptgoetz I have refactored the code and removed the auto anchoring/acking for both stateful and non-stateful bolts in a stateful topology. Currently state checkpointing provides at least once processing and we could consider providing a best effort checkpointing and relax the acking/anchoring requirements as a separate feature. </p>\n\n<p>    We expect IStatefulBolt implementations also to ack/anchor now and hence passing OuputCollector in the stateful bolt's prepare method should be fine.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881107/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194271492","html_url":"https://github.com/apache/storm/pull/1185#issuecomment-194271492","issue_url":"https://api.github.com/repos/apache/storm/issues/1185","id":194271492,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDI3MTQ5Mg==","user":{"login":"bastiliu","id":7921256,"node_id":"MDQ6VXNlcjc5MjEyNTY=","avatar_url":"https://avatars.githubusercontent.com/u/7921256?v=4","gravatar_id":"","url":"https://api.github.com/users/bastiliu","html_url":"https://github.com/bastiliu","followers_url":"https://api.github.com/users/bastiliu/followers","following_url":"https://api.github.com/users/bastiliu/following{/other_user}","gists_url":"https://api.github.com/users/bastiliu/gists{/gist_id}","starred_url":"https://api.github.com/users/bastiliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bastiliu/subscriptions","organizations_url":"https://api.github.com/users/bastiliu/orgs","repos_url":"https://api.github.com/users/bastiliu/repos","events_url":"https://api.github.com/users/bastiliu/events{/privacy}","received_events_url":"https://api.github.com/users/bastiliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T12:21:07Z","updated_at":"2016-03-09T12:21:07Z","author_association":"CONTRIBUTOR","body":"I have updated the code according to your comments, and remove the unnecessary null checks.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194271492/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652106","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652106","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652106,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIxMDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T12:21:08Z","updated_at":"2025-01-24T14:23:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#issuecomment-194271492\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#issuecomment-194271492</a></p>\n\n<p>    I have updated the code according to your comments, and remove the unnecessary null checks.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652106/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194280649","html_url":"https://github.com/apache/storm/pull/1195#issuecomment-194280649","issue_url":"https://api.github.com/repos/apache/storm/issues/1195","id":194280649,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDI4MDY0OQ==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T12:47:08Z","updated_at":"2016-03-09T12:47:08Z","author_association":"CONTRIBUTOR","body":"@abhishekagarwal87  Thank you. But I hope only it is the same as before for the details.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194280649/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881688","html_url":"https://github.com/apache/storm/issues/5446#issuecomment-2612881688","issue_url":"https://api.github.com/repos/apache/storm/issues/5446","id":2612881688,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE2ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T12:47:09Z","updated_at":"2025-01-24T16:06:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195#issuecomment-194280649\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195#issuecomment-194280649</a></p>\n\n<p>    @abhishekagarwal87  Thank you. But I hope only it is the same as before for the details.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881688/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881697","html_url":"https://github.com/apache/storm/issues/5446#issuecomment-2612881697","issue_url":"https://api.github.com/repos/apache/storm/issues/5446","id":2612881697,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODE2OTc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T13:54:07Z","updated_at":"2025-01-24T16:06:27Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user abhishekagarwal87 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1195#discussion_r55520029\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1195#discussion_r55520029</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/pacemaker/Pacemaker.java &#8212;<br/>\n    @@ -0,0 +1,246 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.pacemaker;<br/>\n    +<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +import uk.org.lidalia.sysoutslf4j.context.SysOutOverSLF4J;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.Callable;<br/>\n    +import java.util.concurrent.ConcurrentHashMap;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class Pacemaker implements IServerMessageHandler {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(Pacemaker.class);<br/>\n    +<br/>\n    +    private Map<String, byte[]> heartbeats;<br/>\n    +    private PacemakerStats pacemakerStats;<br/>\n    +    private Map conf;<br/>\n    +    private final long sleepSeconds = 60;<br/>\n    +<br/>\n    +    private static class PacemakerStats </p>\n{\n    +public AtomicInteger sendPulseCount = new AtomicInteger();\n    +public AtomicInteger totalReceivedSize = new AtomicInteger();\n    +public AtomicInteger getPulseCount = new AtomicInteger();\n    +public AtomicInteger totalSentSize = new AtomicInteger();\n    +public AtomicInteger largestHeartbeatSize = new AtomicInteger();\n    +public AtomicInteger averageHeartbeatSize = new AtomicInteger();\n    +    }\n<p>    +<br/>\n    +    public Pacemaker(Map conf) </p>\n{\n    +heartbeats = new ConcurrentHashMap();\n    +pacemakerStats = new PacemakerStats();\n    +this.conf = conf;\n    +startStatsThread();\n    +    }\n<p>    +<br/>\n    +    @Override<br/>\n    +    public HBMessage handleMessage(HBMessage m, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +HBMessageData data = m.get_data();<br/>\n    +switch (m.get_type()) {<br/>\n    +case CREATE_PATH:<br/>\n    +    response = createPath(data.get_path());<br/>\n    +    break;<br/>\n    +case EXISTS:<br/>\n    +    response = exists(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case SEND_PULSE:<br/>\n    +    response = sendPulse(data.get_pulse());<br/>\n    +    break;<br/>\n    +case GET_ALL_PULSE_FOR_PATH:<br/>\n    +    response = getAllPulseForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_ALL_NODES_FOR_PATH:<br/>\n    +    response = getAllNodesForPath(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case GET_PULSE:<br/>\n    +    response = getPulse(data.get_path(), authenticated);<br/>\n    +    break;<br/>\n    +case DELETE_PATH:<br/>\n    +    response = deletePath(data.get_path());<br/>\n    +    break;<br/>\n    +case DELETE_PULSE_ID:<br/>\n    +    response = deletePulseId(data.get_path());<br/>\n    +    break;<br/>\n    +default:<br/>\n    +    LOG.info(\"Got Unexpected Type: {}\", m.get_type());<br/>\n    +    break;<br/>\n    +}<br/>\n    +if (response != null)<br/>\n    +    response.set_message_id(m.get_message_id());<br/>\n    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage createPath(String path) </p>\n{\n    +return new HBMessage(HBServerMessageType.CREATE_PATH_RESPONSE, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage exists(String path, boolean authenticated) {<br/>\n    +HBMessage response = null;<br/>\n    +if (authenticated) {<br/>\n    +    boolean itDoes = heartbeats.containsKey(path);<br/>\n    +    LOG.debug(\"Checking if path [ {} ] exists... {} .\", path, itDoes);<br/>\n    +    response = new HBMessage(HBServerMessageType.EXISTS_RESPONSE, HBMessageData.boolval(itDoes));<br/>\n    +} else </p>\n{\n    +    response = notAuthorized();\n    +}\n<p>    +return response;<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage notAuthorized() </p>\n{\n    +return new HBMessage(HBServerMessageType.NOT_AUTHORIZED, null);\n    +    }\n<p>    +<br/>\n    +    private HBMessage sendPulse(HBPulse pulse) {<br/>\n    +String id = pulse.get_id();<br/>\n    +byte[] details = pulse.get_details();<br/>\n    +LOG.debug(\"Saving Pulse for id [ {} ] data [ {} ].\", id, details);<br/>\n    +pacemakerStats.sendPulseCount.incrementAndGet();<br/>\n    +pacemakerStats.totalReceivedSize.addAndGet(details.length);<br/>\n    +updateLargestHbSize(details.length);<br/>\n    +updateAverageHbSize(details.length);<br/>\n    +heartbeats.put(id, details);<br/>\n    +return new HBMessage(HBServerMessageType.SEND_PULSE_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage getAllPulseForPath(String path, boolean authenticated) {<br/>\n    +if (authenticated) </p>\n{\n    +    return new HBMessage(HBServerMessageType.GET_ALL_PULSE_FOR_PATH_RESPONSE, null);\n    +}\n<p> else </p>\n{\n    +    return notAuthorized();\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage getAllNodesForPath(String path, boolean authenticated) {<br/>\n    +LOG.debug(\"List all nodes for path {}\", path);<br/>\n    +if (authenticated) {<br/>\n    +    Set<String> pulseIds = new HashSet<>();<br/>\n    +    for (String key : heartbeats.keySet()) {<br/>\n    +String[] replaceStr = key.replaceFirst(path, \"\").split(\"/\");<br/>\n    +String trimmed = null;<br/>\n    +for (String str : replaceStr) {<br/>\n    +    if (!str.equals(\"\")) {\n    +trimmed = str;\n    +break;\n    +    }<br/>\n    +}<br/>\n    +if (trimmed != null && key.indexOf(path) == 0) {\n    +    pulseIds.add(trimmed);\n    +}<br/>\n    +    }<br/>\n    +    HBMessageData hbMessageData = HBMessageData.nodes(new HBNodes(new ArrayList(pulseIds)));<br/>\n    +    return new HBMessage(HBServerMessageType.GET_ALL_NODES_FOR_PATH_RESPONSE, hbMessageData);<br/>\n    +} else {    +    return notAuthorized();    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private HBMessage getPulse(String path, boolean authenticated) {<br/>\n    +if (authenticated) {<br/>\n    +    byte[] details = heartbeats.get(path);<br/>\n    +    LOG.debug(\"Getting Pulse for path [ {} ]...data [ {} ].\", path, details);<br/>\n    +    pacemakerStats.getPulseCount.incrementAndGet();<br/>\n    +    if (details != null) </p>\n{\n    +pacemakerStats.totalSentSize.addAndGet(details.length);\n    +    }\n<p>    +    HBPulse hbPulse = new HBPulse();<br/>\n    +    hbPulse.set_id(path);<br/>\n    +    hbPulse.set_details(details);<br/>\n    +    return new HBMessage(HBServerMessageType.GET_PULSE_RESPONSE, HBMessageData.pulse(hbPulse));<br/>\n    +} else </p>\n{\n    +    return notAuthorized();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private HBMessage deletePath(String path) {<br/>\n    +String prefix = path.endsWith(\"/\") ? path : (path + \"/\");<br/>\n    +for (String key : heartbeats.keySet()) </p>\n{\n    +    if (key.indexOf(prefix) == 0)\n    +deletePulseId(key);\n    +}\n<p>    +return new HBMessage(HBServerMessageType.DELETE_PATH_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private HBMessage deletePulseId(String path) {<br/>\n    +LOG.debug(\"Deleting Pulse for id [ {} ].\", path);<br/>\n    +heartbeats.remove(path);<br/>\n    +return new HBMessage(HBServerMessageType.DELETE_PULSE_ID_RESPONSE, null);<br/>\n    +    }<br/>\n    +<br/>\n    +    private void updateLargestHbSize(int size) {<br/>\n    +int newValue = size;<br/>\n    +while (true) {<br/>\n    +    int oldValue = pacemakerStats.largestHeartbeatSize.get();<br/>\n    +    if (newValue > oldValue) </p>\n{\n    +if (!pacemakerStats.largestHeartbeatSize.compareAndSet(oldValue, newValue))\n    +    continue;\n    +    }\n<p>    +    break;<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private void updateAverageHbSize(int size) {<br/>\n    +while (true) {<br/>\n    +    int oldValue = pacemakerStats.averageHeartbeatSize.get();<br/>\n    +    int count = pacemakerStats.sendPulseCount.get();<br/>\n    +    int newValue = ((count * oldValue) + size) / (count + 1);<br/>\n    +    if (!pacemakerStats.averageHeartbeatSize.compareAndSet(oldValue, newValue))<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Minor. It can be simplified to <br/>\n    ```<br/>\n    if (pacemakerStats.averageHeartbeatSize.compareAndSet(oldValue, newValue))<br/>\n     break;<br/>\n    ```<br/>\n    Basically you can check for true condition and then break. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881697/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881110","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881110","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881110,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODExMTA=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T15:16:51Z","updated_at":"2025-01-24T16:06:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#discussion_r55532861\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#discussion_r55532861</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/topology/StatefulBoltExecutor.java &#8212;<br/>\n    @@ -148,4 +148,19 @@ private void fail(List<Tuple> tuples) {<br/>\n     }<br/>\n }</p>\n\n<p>    +    private static class AckTrackingOutputCollector extends AnchoringOutputCollector {<br/>\n    +private OutputCollector delegate;<br/>\n    +private List<Tuple> ackedTuples;<br/>\n    +<br/>\n    +AckTrackingOutputCollector(OutputCollector delegate) {<br/>\n    +    super(delegate);<br/>\n    +    this.delegate = delegate;<br/>\n    +    this.ackedTuples = new ArrayList<>();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    All access to ackedTuples should ideally be thread safe, as the OutputCollector could be called from a different thread.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881110/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194341881","html_url":"https://github.com/apache/storm/pull/1190#issuecomment-194341881","issue_url":"https://api.github.com/repos/apache/storm/issues/1190","id":194341881,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDM0MTg4MQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T15:22:26Z","updated_at":"2016-03-09T15:22:26Z","author_association":"CONTRIBUTOR","body":"@arunmahadevan Thanks for doing this.  I still have not had time to dig into this feature in as much detail as I would like, but from what I have seen so far the contract with users looks good, and it is an important feature to have.  I have one concern now about thread safety in the AckTrackingOutputCollector, but beyond that it looks fine.\n\nI will leave support for best effort state checkpointing without at least once processing for a later time.  Like I said before I made an assumption that was wrong, and that was part of why I got confused.  I don't see it as a must have feature, just confusion on my part.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194341881/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881112","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881112","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881112,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODExMTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T15:22:27Z","updated_at":"2025-01-24T16:06:12Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#issuecomment-194341881\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#issuecomment-194341881</a></p>\n\n<p>    @arunmahadevan Thanks for doing this.  I still have not had time to dig into this feature in as much detail as I would like, but from what I have seen so far the contract with users looks good, and it is an important feature to have.  I have one concern now about thread safety in the AckTrackingOutputCollector, but beyond that it looks fine.</p>\n\n<p>    I will leave support for best effort state checkpointing without at least once processing for a later time.  Like I said before I made an assumption that was wrong, and that was part of why I got confused.  I don't see it as a must have feature, just confusion on my part.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652706","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652706","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652706,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI3MDY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T15:36:17Z","updated_at":"2025-01-24T14:23:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#discussion_r55535999\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#discussion_r55535999</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java &#8212;<br/>\n    @@ -0,0 +1,356 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.Meter;<br/>\n    +import com.google.common.collect.ImmutableMap;<br/>\n    +import org.apache.commons.lang.StringUtils;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.logging.ThriftAccessLogger;<br/>\n    +import org.apache.storm.metric.StormMetricsRegistry;<br/>\n    +import org.apache.storm.security.auth.*;<br/>\n    +import org.apache.storm.security.auth.authorizer.DRPCAuthorizerBase;<br/>\n    +import org.apache.storm.ui.FilterConfiguration;<br/>\n    +import org.apache.storm.ui.IConfigurator;<br/>\n    +import org.apache.storm.ui.UIHelpers;<br/>\n    +import org.apache.storm.utils.Time;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.apache.storm.utils.VersionInfo;<br/>\n    +import org.apache.thrift.TException;<br/>\n    +import org.eclipse.jetty.server.Server;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import javax.servlet.Servlet;<br/>\n    +import java.security.Principal;<br/>\n    +import java.util.*;<br/>\n    +import java.util.concurrent.*;<br/>\n    +import java.util.concurrent.atomic.AtomicInteger;<br/>\n    +<br/>\n    +public class DrpcServer implements DistributedRPC.Iface, DistributedRPCInvocations.Iface, AutoCloseable {<br/>\n    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(DrpcServer.class);<br/>\n    +    private final Long timeoutCheckSecs = 5L;<br/>\n    +<br/>\n    +    private Map conf;<br/>\n    +<br/>\n    +    private ThriftServer handlerServer;<br/>\n    +    private ThriftServer invokeServer;<br/>\n    +    private IHttpCredentialsPlugin httpCredsHandler;<br/>\n    +<br/>\n    +    private Thread clearThread;<br/>\n    +<br/>\n    +    private IAuthorizer authorizer;<br/>\n    +<br/>\n    +    private Servlet httpServlet;<br/>\n    +<br/>\n    +    private AtomicInteger ctr = new AtomicInteger(0);<br/>\n    +    private ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>> requestQueues = new ConcurrentHashMap<String, ConcurrentLinkedQueue<DRPCRequest>>();<br/>\n    +<br/>\n    +    private static class InternalRequest {<br/>\n    +public final Semaphore sem;<br/>\n    +public final int startTimeSecs;<br/>\n    +public final String function;<br/>\n    +public final DRPCRequest request;<br/>\n    +public volatile Object result;<br/>\n    +<br/>\n    +public InternalRequest(String function, DRPCRequest request) </p>\n{\n    +    sem = new Semaphore(0);\n    +    startTimeSecs = Time.currentTimeSecs();\n    +    this.function = function;\n    +    this.request = request;\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private ConcurrentHashMap<String, InternalRequest> outstandingRequests = new ConcurrentHashMap<>();<br/>\n    +<br/>\n    +    private final static Meter meterHttpRequests = StormMetricsRegistry.registerMeter(\"drpc:num-execute-http-requests\");<br/>\n    +    private final static Meter meterExecuteCalls = StormMetricsRegistry.registerMeter(\"drpc:num-execute-calls\");<br/>\n    +    private final static Meter meterResultCalls = StormMetricsRegistry.registerMeter(\"drpc:num-result-calls\");<br/>\n    +    private final static Meter meterFailRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-failRequest-calls\");<br/>\n    +    private final static Meter meterFetchRequestCalls = StormMetricsRegistry.registerMeter(\"drpc:num-fetchRequest-calls\");<br/>\n    +    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");<br/>\n    +<br/>\n    +    public DrpcServer(Map conf) </p>\n{\n    +this.conf = conf;\n    +this.authorizer = mkAuthorizationHandler((String) (this.conf.get(Config.DRPC_AUTHORIZER)));\n    +initClearThread();\n    +    }\n<p>    +<br/>\n    +    public void setHttpServlet(Servlet httpServlet) </p>\n{\n    +this.httpServlet = httpServlet;\n    +    }\n<p>    +<br/>\n    +    private ThriftServer initHandlerServer(final DrpcServer service) throws Exception {<br/>\n    +int port = (int) conf.get(Config.DRPC_PORT);<br/>\n    +if (port > 0) </p>\n{\n    +    handlerServer = new ThriftServer(conf, new DistributedRPC.Processor<DistributedRPC.Iface>(service), ThriftConnectionType.DRPC);\n    +}\n<p>    +return handlerServer;<br/>\n    +    }<br/>\n    +<br/>\n    +    private ThriftServer initInvokeServer(final DrpcServer service) throws Exception </p>\n{\n    +invokeServer = new ThriftServer(conf, new DistributedRPCInvocations.Processor<DistributedRPCInvocations.Iface>(service),\n    +ThriftConnectionType.DRPC_INVOCATIONS);\n    +return invokeServer;\n    +    }\n<p>    +<br/>\n    +    private void initHttp() throws Exception {<br/>\n    +LOG.info(\"Starting  RPC Http servers...\");<br/>\n    +Integer drpcHttpPort = (Integer) conf.get(Config.DRPC_HTTP_PORT);<br/>\n    +if (drpcHttpPort != null && drpcHttpPort > 0) {<br/>\n    +    String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));<br/>\n    +    Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));<br/>\n    +    FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);<br/>\n    +    final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);<br/>\n    +    final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);<br/>\n    +    final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));<br/>\n    +    final String httpsKsPassword = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PASSWORD));<br/>\n    +    final String httpsKsType = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_TYPE));<br/>\n    +    final String httpsKeyPassword = (String) (conf.get(Config.DRPC_HTTPS_KEY_PASSWORD));<br/>\n    +    final String httpsTsPath = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PATH));<br/>\n    +    final String httpsTsPassword = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_PASSWORD));<br/>\n    +    final String httpsTsType = (String) (conf.get(Config.DRPC_HTTPS_TRUSTSTORE_TYPE));<br/>\n    +    final Boolean httpsWantClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_WANT_CLIENT_AUTH));<br/>\n    +    final Boolean httpsNeedClientAuth = (Boolean) (conf.get(Config.DRPC_HTTPS_NEED_CLIENT_AUTH));<br/>\n    +<br/>\n    +    UIHelpers.stormRunJetty(drpcHttpPort, new IConfigurator() {<br/>\n    +@Override<br/>\n    +public void execute(Server s) </p>\n{\n    +    UIHelpers.configSsl(s, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    +    httpsNeedClientAuth, httpsWantClientAuth);\n    +    UIHelpers.configFilter(s, httpServlet, filterConfigurations);\n    +}\n<p>    +    });<br/>\n    +}<br/>\n    +<br/>\n    +    }<br/>\n    +<br/>\n    +    private void initThrift() throws Exception {<br/>\n    +<br/>\n    +handlerServer = initHandlerServer(this);<br/>\n    +invokeServer = initInvokeServer(this);<br/>\n    +httpCredsHandler = AuthUtils.GetDrpcHttpCredentialsPlugin(conf);<br/>\n    +Utils.addShutdownHookWithForceKillIn1Sec(new Runnable() {<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +if (handlerServer != null)\n    +    handlerServer.stop();\n    +invokeServer.stop();\n    +    }\n<p>    +});<br/>\n    +LOG.info(\"Starting Distributed RPC servers...\");<br/>\n    +new Thread(new Runnable() {<br/>\n    +<br/>\n    +    @Override<br/>\n    +    public void run() </p>\n{\n    +invokeServer.serve();\n    +    }\n<p>    +}).start();<br/>\n    +<br/>\n    +StormMetricsRegistry.startMetricsReporters(conf);<br/>\n    +<br/>\n    +if (handlerServer != null)<br/>\n    +    handlerServer.serve();<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    Crap you are right, I totally messed up the URL.  Great work!</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652706/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194358768","html_url":"https://github.com/apache/storm/pull/1156#issuecomment-194358768","issue_url":"https://api.github.com/repos/apache/storm/issues/1156","id":194358768,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDM1ODc2OA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T15:53:22Z","updated_at":"2016-03-09T15:53:22Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194358768/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652711","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652711","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652711,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI3MTE=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T15:53:24Z","updated_at":"2025-01-24T14:23:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156#issuecomment-194358768\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156#issuecomment-194358768</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652711/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652714","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652714","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652714,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI3MTQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T15:54:22Z","updated_at":"2025-01-24T14:23:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1156\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1156</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652714/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652719","html_url":"https://github.com/apache/storm/issues/5107#issuecomment-2612652719","issue_url":"https://api.github.com/repos/apache/storm/issues/5107","id":2612652719,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTI3MTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T15:54:47Z","updated_at":"2025-01-24T14:23:47Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Johnbaba\" class=\"user-hover\" rel=\"Johnbaba\">John Fang</a>,</p>\n\n<p>I merged this into master.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652719/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654164","html_url":"https://github.com/apache/storm/issues/5111#issuecomment-2612654164","issue_url":"https://api.github.com/repos/apache/storm/issues/5111","id":2612654164,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTQxNjQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T15:55:32Z","updated_at":"2025-01-24T14:24:24Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=revans2\">revans2</a>:</i>\n<p>Thanks <a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Johnbaba\" class=\"user-hover\" rel=\"Johnbaba\">John Fang</a>,</p>\n\n<p>I merged this into master as a part of <a href=\"https://issues.apache.org/jira/browse/STORM-1270\" title=\"port backtype.storm.daemon.drpc to java\" class=\"issue-link\" data-issue-key=\"STORM-1270\"><del>STORM-1270</del></a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612654164/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881263","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881263","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881263,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyNjM=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T16:36:05Z","updated_at":"2025-01-24T16:06:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55546601\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55546601</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -151,10 +159,43 @@<br/>\n     bootstrap = createClientBootstrap(factory, bufferSize, stormConf);<br/>\n     dstAddress = new InetSocketAddress(host, port);<br/>\n     dstAddressPrefixedName = prefixedName(dstAddress);<br/>\n    +launchChannelAliveThread();<br/>\n     scheduleConnect(NO_DELAY_MS);<br/>\n     batcher = new MessageBuffer(messageBatchSize);<br/>\n }</p>\n\n<p>    +    /**<br/>\n    +     * This thread helps us to check for channel connection periodically.<br/>\n    +     * This is performed just to know whether the destination address<br/>\n    +     * is alive or attempts to refresh connections if not alive. This<br/>\n    +     * solution is better than what we have now in case of a bad channel.<br/>\n    +     */<br/>\n    +    private void launchChannelAliveThread() {<br/>\n    +// netty TimerTask is already defined and hence a fully<br/>\n    +// qualified name<br/>\n    +if (timer == null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @d2r, @revans2  looking at it it seems a valid explanation. Would like to know whether it is better to revert to earlier static initialization</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881263/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194392972","html_url":"https://github.com/apache/storm/pull/1190#issuecomment-194392972","issue_url":"https://api.github.com/repos/apache/storm/issues/1190","id":194392972,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDM5Mjk3Mg==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T16:51:44Z","updated_at":"2016-03-09T16:51:44Z","author_association":"MEMBER","body":"+1 once @revans2's thread safety concern is addressed.\n\nWe may want to document that this feature requires ack'ing to be enabled, but that can be handled separately.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194392972/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881119","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881119","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881119,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODExMTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T16:51:47Z","updated_at":"2025-01-24T16:06:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#issuecomment-194392972\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#issuecomment-194392972</a></p>\n\n<p>    +1 once @revans2's thread safety concern is addressed.</p>\n\n<p>    We may want to document that this feature requires ack'ing to be enabled, but that can be handled separately.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194412502","html_url":"https://github.com/apache/storm/pull/1190#issuecomment-194412502","issue_url":"https://api.github.com/repos/apache/storm/issues/1190","id":194412502,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDQxMjUwMg==","user":{"login":"arunmahadevan","id":6792890,"node_id":"MDQ6VXNlcjY3OTI4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/6792890?v=4","gravatar_id":"","url":"https://api.github.com/users/arunmahadevan","html_url":"https://github.com/arunmahadevan","followers_url":"https://api.github.com/users/arunmahadevan/followers","following_url":"https://api.github.com/users/arunmahadevan/following{/other_user}","gists_url":"https://api.github.com/users/arunmahadevan/gists{/gist_id}","starred_url":"https://api.github.com/users/arunmahadevan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arunmahadevan/subscriptions","organizations_url":"https://api.github.com/users/arunmahadevan/orgs","repos_url":"https://api.github.com/users/arunmahadevan/repos","events_url":"https://api.github.com/users/arunmahadevan/events{/privacy}","received_events_url":"https://api.github.com/users/arunmahadevan/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T17:26:00Z","updated_at":"2016-03-09T17:26:00Z","author_association":"CONTRIBUTOR","body":"Addressed thread safety concern and raised [STORM-1615](https://issues.apache.org/jira/browse/STORM-1615) for updating the doc.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194412502/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881125","html_url":"https://github.com/apache/storm/issues/5443#issuecomment-2612881125","issue_url":"https://api.github.com/repos/apache/storm/issues/5443","id":2612881125,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODExMjU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T17:26:01Z","updated_at":"2025-01-24T16:06:13Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1190#issuecomment-194412502\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1190#issuecomment-194412502</a></p>\n\n<p>    Addressed thread safety concern and raised <a href=\"https://issues.apache.org/jira/browse/STORM-1615\" title=\"Update state checkpointing doc with bolt&#39;s acking contract\" class=\"issue-link\" data-issue-key=\"STORM-1615\"><del>STORM-1615</del></a>(<a href=\"https://issues.apache.org/jira/browse/STORM-1615\" class=\"external-link\" rel=\"nofollow\">https://issues.apache.org/jira/browse/STORM-1615</a>) for updating the doc.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881125/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881276","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881276","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881276,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyNzY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T18:10:19Z","updated_at":"2025-01-24T16:06:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user redsanket commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#discussion_r55561657\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#discussion_r55561657</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/messaging/netty/Client.java &#8212;<br/>\n    @@ -151,10 +159,43 @@<br/>\n     bootstrap = createClientBootstrap(factory, bufferSize, stormConf);<br/>\n     dstAddress = new InetSocketAddress(host, port);<br/>\n     dstAddressPrefixedName = prefixedName(dstAddress);<br/>\n    +launchChannelAliveThread();<br/>\n     scheduleConnect(NO_DELAY_MS);<br/>\n     batcher = new MessageBuffer(messageBatchSize);<br/>\n }</p>\n\n<p>    +    /**<br/>\n    +     * This thread helps us to check for channel connection periodically.<br/>\n    +     * This is performed just to know whether the destination address<br/>\n    +     * is alive or attempts to refresh connections if not alive. This<br/>\n    +     * solution is better than what we have now in case of a bad channel.<br/>\n    +     */<br/>\n    +    private void launchChannelAliveThread() {<br/>\n    +// netty TimerTask is already defined and hence a fully<br/>\n    +// qualified name<br/>\n    +if (timer == null) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    @d2r @revan2 reverted back to static initialization</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881276/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652115","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652115","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652115,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIxMTU=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T18:38:04Z","updated_at":"2025-01-24T14:23:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55565851\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55565851</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/daemon/StormCommon.java &#8212;<br/>\n    @@ -0,0 +1,605 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one<br/>\n    + * or more contributor license agreements.  See the NOTICE file<br/>\n    + * distributed with this work for additional information<br/>\n    + * regarding copyright ownership.  The ASF licenses this file<br/>\n    + * to you under the Apache License, Version 2.0 (the<br/>\n    + * \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.daemon;<br/>\n    +<br/>\n    +import com.codahale.metrics.MetricRegistry;<br/>\n    +import org.apache.storm.Config;<br/>\n    +import org.apache.storm.Constants;<br/>\n    +import org.apache.storm.Thrift;<br/>\n    +import org.apache.storm.cluster.IStormClusterState;<br/>\n    +import org.apache.storm.daemon.metrics.MetricsUtils;<br/>\n    +import org.apache.storm.daemon.metrics.reporters.PreparableReporter;<br/>\n    +import org.apache.storm.generated.*;<br/>\n    +import org.apache.storm.generated.StormBase;<br/>\n    +import org.apache.storm.metric.EventLoggerBolt;<br/>\n    +import org.apache.storm.metric.MetricsConsumerBolt;<br/>\n    +import org.apache.storm.metric.SystemBolt;<br/>\n    +import org.apache.storm.security.auth.IAuthorizer;<br/>\n    +import org.apache.storm.task.IBolt;<br/>\n    +import org.apache.storm.testing.NonRichBoltTracker;<br/>\n    +import org.apache.storm.utils.ConfigUtils;<br/>\n    +import org.apache.storm.utils.IPredicate;<br/>\n    +import org.apache.storm.utils.ThriftTopologyUtils;<br/>\n    +import org.apache.storm.utils.Utils;<br/>\n    +import org.json.simple.JSONValue;<br/>\n    +import org.slf4j.Logger;<br/>\n    +import org.slf4j.LoggerFactory;<br/>\n    +<br/>\n    +import java.util.*;<br/>\n    +<br/>\n    +public class StormCommon {<br/>\n    +    // A singleton instance allows us to mock delegated static methods in our<br/>\n    +    // tests by subclassing.<br/>\n    +    private static StormCommon _instance = new StormCommon();<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Provide an instance of this class for delegates to use.  To mock out<br/>\n    +     * delegated methods, provide an instance of a subclass that overrides the<br/>\n    +     * implementation of the delegated method.<br/>\n    +     * @param common a StormCommon instance<br/>\n    +     * @return the previously set instance<br/>\n    +     */<br/>\n    +    public static StormCommon setInstance(StormCommon common) </p>\n{\n    +StormCommon oldInstance = _instance;\n    +_instance = common;\n    +return oldInstance;\n    +    }\n<p>    +<br/>\n    +    private static final Logger LOG = LoggerFactory.getLogger(StormCommon.class);<br/>\n    +<br/>\n    +    public static final String ACKER_COMPONENT_ID = Acker.ACKER_COMPONENT_ID;<br/>\n    +    public static final String ACKER_INIT_STREAM_ID = Acker.ACKER_INIT_STREAM_ID;<br/>\n    +    public static final String ACKER_ACK_STREAM_ID = Acker.ACKER_ACK_STREAM_ID;<br/>\n    +    public static final String ACKER_FAIL_STREAM_ID = Acker.ACKER_FAIL_STREAM_ID;<br/>\n    +<br/>\n    +    public static final String SYSTEM_STREAM_ID = \"__system\";<br/>\n    +<br/>\n    +    public static final String EVENTLOGGER_COMPONENT_ID = \"__eventlogger\";<br/>\n    +    public static final String EVENTLOGGER_STREAM_ID = \"__eventlog\";<br/>\n    +<br/>\n    +    public static void startMetricsReporter(PreparableReporter report, Map conf) </p>\n{\n    +report.prepare(new MetricRegistry(), conf);\n    +report.start();\n    +LOG.info(\"Started statistics report plugin...\");\n    +    }\n<p>    +<br/>\n    +    public static void startMetricsReporters(Map conf) {<br/>\n    +List<PreparableReporter> reporters = MetricsUtils.getPreparableReporters(conf);<br/>\n    +for (PreparableReporter reporter : reporters) </p>\n{\n    +    startMetricsReporter(reporter, conf);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static String getTopologyNameById(String topologyId) {<br/>\n    +String topologyName = null;<br/>\n    +try </p>\n{\n    +    topologyName = topologyIdToName(topologyId);\n    +}\n<p> catch (InvalidTopologyException e) </p>\n{\n    +    LOG.error(\"Invalid topologyId=\" + topologyId);\n    +}\n<p>    +return topologyName;<br/>\n    +    }<br/>\n    +<br/>\n    +    /**<br/>\n    +     * Convert topologyId to topologyName. TopologyId = topoloygName-counter-timeStamp<br/>\n    +     *<br/>\n    +     * @param topologyId<br/>\n    +     * @return<br/>\n    +     */<br/>\n    +    public static String topologyIdToName(String topologyId) throws InvalidTopologyException {<br/>\n    +String ret = null;<br/>\n    +int index = topologyId.lastIndexOf('-');<br/>\n    +if (index != -1 && index > 2) </p>\n{\n    +    index = topologyId.lastIndexOf('-', index - 1);\n    +    if (index != -1 && index > 0)\n    +ret = topologyId.substring(0, index);\n    +    else\n    +throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");\n    +}\n<p> else<br/>\n    +    throw new InvalidTopologyException(topologyId + \" is not a valid topologyId\");<br/>\n    +return ret;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String getStormId(IStormClusterState stormClusterState, final String topologyName) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +IPredicate pred = new IPredicate<String>() {<br/>\n    +    @Override<br/>\n    +    public boolean test(String obj) </p>\n{\n    +return obj != null ? getTopologyNameById(obj).equals(topologyName) : false;\n    +    }\n<p>    +};<br/>\n    +return Utils.findOne(pred, activeTopologys);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, StormBase> topologyBases(IStormClusterState stormClusterState) </p>\n{\n    +return _instance.topologyBasesImpl(stormClusterState);\n    +    }\n<p>    +<br/>\n    +    protected Map<String, StormBase> topologyBasesImpl(IStormClusterState stormClusterState) {<br/>\n    +List<String> activeTopologys = stormClusterState.activeStorms();<br/>\n    +Map<String, StormBase> stormBases = new HashMap<String, StormBase>();<br/>\n    +if (activeTopologys != null) {<br/>\n    +    for (String topologyId : activeTopologys) {<br/>\n    +StormBase base = stormClusterState.stormBase(topologyId, null);<br/>\n    +if (base != null) </p>\n{\n    +    stormBases.put(topologyId, base);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +return stormBases;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateDistributedMode(Map conf) {<br/>\n    +if (ConfigUtils.isLocalMode(conf)) </p>\n{\n    +    throw new IllegalArgumentException(\"Cannot start server in local mode!\");\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static void validateIds(StormTopology topology) throws InvalidTopologyException {<br/>\n    +List<String> componentIds = new ArrayList<String>();<br/>\n    +<br/>\n    +for (StormTopology._Fields field : Thrift.getTopologyFields()) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) {<br/>\n    +Object value = topology.getFieldValue(field);<br/>\n    +if (value != null) {<br/>\n    +    Map<String, Object> componentMap = (Map<String, Object>) value;<br/>\n    +    componentIds.addAll(componentMap.keySet());<br/>\n    +<br/>\n    +    for (String id : componentMap.keySet()) {<br/>\n    +if (Utils.isSystemId(id)) </p>\n{\n    +    throw new InvalidTopologyException(id + \" is not a valid component id.\");\n    +}\n<p>    +    }<br/>\n    +    for (Object componentObj : componentMap.values()) {<br/>\n    +ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +Set<String> streamIds = common.get_streams().keySet();<br/>\n    +for (String id : streamIds) {<br/>\n    +    if (Utils.isSystemId(id)) </p>\n{\n    +throw new InvalidTopologyException(id + \" is not a valid stream id.\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +List<String> offending = Utils.getRepeat(componentIds);<br/>\n    +if (offending.isEmpty() == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Duplicate component ids: \" + offending);\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    private static boolean isEmptyInputs(ComponentCommon common) {<br/>\n    +if (common == null) </p>\n{\n    +    return true;\n    +} else if (common.get_inputs() == null) {    +    return true;    +}\n<p> else </p>\n{\n    +    return common.get_inputs().isEmpty();\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static Map<String, Object> allComponents(StormTopology topology) {<br/>\n    +Map<String, Object> components = new HashMap<String, Object>();<br/>\n    +List<StormTopology._Fields> topologyFields = Arrays.asList(Thrift.getTopologyFields());<br/>\n    +for (StormTopology._Fields field : topologyFields) {<br/>\n    +    if (ThriftTopologyUtils.isWorkerHook(field) == false) </p>\n{\n    +components.putAll(((Map) topology.getFieldValue(field)));\n    +    }\n<p>    +}<br/>\n    +return components;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map componentConf(Object component) {<br/>\n    +Map<Object, Object> conf = new HashMap<Object, Object>();<br/>\n    +ComponentCommon common = getComponentCommon(component);<br/>\n    +if (common != null) {<br/>\n    +    String jconf = common.get_json_conf();<br/>\n    +    if (jconf != null) </p>\n{\n    +conf.putAll((Map<Object, Object>) JSONValue.parse(jconf));\n    +    }\n<p>    +}<br/>\n    +return conf;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {<br/>\n    +validateIds(topology);<br/>\n    +<br/>\n    +List<StormTopology._Fields> spoutFields = Arrays.asList(Thrift.getSpoutFields());<br/>\n    +for (StormTopology._Fields field : spoutFields) {<br/>\n    +    Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);<br/>\n    +    if (spoutComponents != null) {<br/>\n    +for (Object obj : spoutComponents.values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(obj);<br/>\n    +    if (isEmptyInputs(common) == false) </p>\n{\n    +throw new InvalidTopologyException(\"May not declare inputs for a spout\");\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Object componentObj : componentMap.values()) {<br/>\n    +    Map conf = componentConf(componentObj);<br/>\n    +    ComponentCommon common = getComponentCommon(componentObj);<br/>\n    +    if (common != null) {<br/>\n    +int parallelismHintNum = Thrift.getParallelismHint(common);<br/>\n    +Integer taskNum = Utils.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);<br/>\n    +if (taskNum > 0 && parallelismHintNum <= 0) </p>\n{\n    +    throw new InvalidTopologyException(\"Number of executors must be greater than 0 when number of tasks is greater than 0\");\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    private static Set<String> getStreamOutputFields(Map<String, StreamInfo> streams) {<br/>\n    +Set<String> outputFields = new HashSet<String>();<br/>\n    +if (streams != null) {<br/>\n    +    for (StreamInfo streamInfo : streams.values()) </p>\n{\n    +outputFields.addAll(streamInfo.get_output_fields());\n    +    }\n<p>    +}<br/>\n    +return outputFields;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {<br/>\n    +Map<String, Object> componentMap = allComponents(topology);<br/>\n    +for (Map.Entry<String, Object> entry : componentMap.entrySet()) {<br/>\n    +    String componentId = entry.getKey();<br/>\n    +    ComponentCommon common = getComponentCommon(entry.getValue());<br/>\n    +    if (common != null) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = common.get_inputs();<br/>\n    +for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {<br/>\n    +    String sourceStreamId = input.getKey().get_streamId();<br/>\n    +    String sourceComponentId = input.getKey().get_componentId();<br/>\n    +    if(componentMap.keySet().contains(sourceComponentId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));<br/>\n    +    if (sourceComponent == null || sourceComponent.get_streams().containsKey(sourceStreamId) == false) </p>\n{\n    +throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from non-existent stream: \" +\n    +\"[\" + sourceStreamId + \"] of component [\" + sourceComponentId + \"]\");\n    +    }\n<p>    +<br/>\n    +    Grouping grouping = input.getValue();<br/>\n    +    if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {<br/>\n    +List<String> fields = grouping.get_fields();<br/>\n    +Map<String, StreamInfo> streams = sourceComponent.get_streams();<br/>\n    +Set<String> sourceOutputFields = getStreamOutputFields(streams);<br/>\n    +if (sourceOutputFields.containsAll(fields) == false) </p>\n{\n    +    throw new InvalidTopologyException(\"Component: [\" + componentId + \"] subscribes from stream: [\" + sourceStreamId  +\"] of component \" +\n    +    \"[\" + sourceComponentId + \"] + with non-existent fields: \" + fields);\n    +}\n<p>    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> ackerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> boltIds = topology.get_bolts().keySet();<br/>\n    +Set<String> spoutIds = topology.get_spouts().keySet();<br/>\n    +<br/>\n    +for(String id : spoutIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_INIT_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for(String id : boltIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_ACK_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +    inputs.put(Utils.getGlobalStreamId(id, ACKER_FAIL_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static String clusterId = null;<br/>\n    +    public static IBolt makeAckerBolt() </p>\n{\n    +return _instance.makeAckerBoltImpl();\n    +    }\n<p>    +    public IBolt makeAckerBoltImpl() </p>\n{\n    +return new Acker();\n    +    }\n<p>    +<br/>\n    +    public static void addAcker(Map conf, StormTopology topology) {<br/>\n    +int ackerNum = Utils.getInt(conf.get(Config.TOPOLOGY_ACKER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +Map<GlobalStreamId, Grouping> inputs = ackerInputs(topology);<br/>\n    +<br/>\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();<br/>\n    +outputStreams.put(ACKER_ACK_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +outputStreams.put(ACKER_FAIL_STREAM_ID, Thrift.directOutputFields(Arrays.asList(\"id\")));<br/>\n    +<br/>\n    +Map<String, Object> ackerConf = new HashMap<String, Object>();<br/>\n    +ackerConf.put(Config.TOPOLOGY_TASKS, ackerNum);<br/>\n    +ackerConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +<br/>\n    +Bolt acker = Thrift.prepareSerializedBoltDetails(inputs, makeAckerBolt(), outputStreams, ackerNum, ackerConf);<br/>\n    +<br/>\n    +for(Bolt bolt : topology.get_bolts().values()) </p>\n{\n    +    ComponentCommon common = bolt.get_common();\n    +    common.put_to_streams(ACKER_ACK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"ack-val\")));\n    +    common.put_to_streams(ACKER_FAIL_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\")));\n    +}\n<p>    +<br/>\n    +for (SpoutSpec spout : topology.get_spouts().values()) </p>\n{\n    +    ComponentCommon common = spout.get_common();\n    +    Map spoutConf = componentConf(spout);\n    +    spoutConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));\n    +    common.set_json_conf(JSONValue.toJSONString(spoutConf));\n    +    common.put_to_streams(ACKER_INIT_STREAM_ID, Thrift.outputFields(Arrays.asList(\"id\", \"init-val\", \"spout-task\")));\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_ACK_STREAM_ID), Thrift.prepareDirectGrouping());\n    +    common.put_to_inputs(Utils.getGlobalStreamId(ACKER_COMPONENT_ID, ACKER_FAIL_STREAM_ID), Thrift.prepareDirectGrouping());\n    +}\n<p>    +<br/>\n    +topology.put_to_bolts(ACKER_COMPONENT_ID, acker);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static ComponentCommon getComponentCommon(Object component) {<br/>\n    +if (component == null) </p>\n{\n    +    return null;\n    +}\n<p>    +<br/>\n    +ComponentCommon common = null;<br/>\n    +if (component instanceof StateSpoutSpec) </p>\n{\n    +    common = ((StateSpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof SpoutSpec) </p>\n{\n    +    common = ((SpoutSpec) component).get_common();\n    +}\n<p> else if (component instanceof Bolt) </p>\n{\n    +    common = ((Bolt) component).get_common();\n    +}\n<p>    +return common;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"task-info\", \"data-points\"));\n    +common.put_to_streams(Constants.METRICS_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addSystemStreams(StormTopology topology) {<br/>\n    +for (Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +StreamInfo streamInfo = Thrift.outputFields(Arrays.asList(\"event\"));\n    +common.put_to_streams(SYSTEM_STREAM_ID, streamInfo);\n    +    }\n<p>    +}<br/>\n    +    }<br/>\n    +<br/>\n    +    public static List<String> eventLoggerBoltFields() </p>\n{\n    +List<String> fields = Arrays.asList(EventLoggerBolt.FIELD_COMPONENT_ID, EventLoggerBolt.FIELD_MESSAGE_ID, EventLoggerBolt.FIELD_TS,\n    +EventLoggerBolt.FIELD_VALUES);\n    +return fields;\n    +    }\n<p>    +<br/>\n    +    public static Map<GlobalStreamId, Grouping> eventLoggerInputs(StormTopology topology) {<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +Set<String> allIds = new HashSet<String>();<br/>\n    +allIds.addAll(topology.get_bolts().keySet());<br/>\n    +allIds.addAll(topology.get_spouts().keySet());<br/>\n    +<br/>\n    +for(String id : allIds) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(id, EVENTLOGGER_STREAM_ID), Thrift.prepareFieldsGrouping(Arrays.asList(\"component-id\")));\n    +}\n<p>    +return inputs;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addEventLogger(Map conf, StormTopology topology) {<br/>\n    +Integer numExecutors = Utils.getInt(conf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS), Utils.getInt(conf.get(Config.TOPOLOGY_WORKERS)));<br/>\n    +HashMap<String, Object> componentConf = new HashMap<String, Object>();<br/>\n    +componentConf.put(Config.TOPOLOGY_TASKS, numExecutors);<br/>\n    +componentConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, Utils.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));<br/>\n    +Bolt eventLoggerBolt = Thrift.prepareSerializedBoltDetails(eventLoggerInputs(topology), new EventLoggerBolt(), null, numExecutors, componentConf);<br/>\n    +<br/>\n    +for(Object component : allComponents(topology).values()) {<br/>\n    +    ComponentCommon common = getComponentCommon(component);<br/>\n    +    if (common != null) </p>\n{\n    +common.put_to_streams(EVENTLOGGER_STREAM_ID, Thrift.outputFields(eventLoggerBoltFields()));\n    +    }\n<p>    +}<br/>\n    +topology.put_to_bolts(EVENTLOGGER_COMPONENT_ID, eventLoggerBolt);<br/>\n    +    }<br/>\n    +<br/>\n    +    public static Map<String, Bolt> metricsConsumerBoltSpecs(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = new HashMap<String, Bolt>();<br/>\n    +<br/>\n    +Set<String> componentIdsEmitMetrics = new HashSet<String>();<br/>\n    +componentIdsEmitMetrics.addAll(allComponents(topology).keySet());<br/>\n    +componentIdsEmitMetrics.add(Constants.SYSTEM_COMPONENT_ID);<br/>\n    +<br/>\n    +Map<GlobalStreamId, Grouping> inputs = new HashMap<GlobalStreamId, Grouping>();<br/>\n    +for (String componentId : componentIdsEmitMetrics) </p>\n{\n    +    inputs.put(Utils.getGlobalStreamId(componentId, Constants.METRICS_STREAM_ID), Thrift.prepareShuffleGrouping());\n    +}\n<p>    +<br/>\n    +List<Map<String, Object>> registerInfo = (List<Map<String, Object>>) conf.get(Config.TOPOLOGY_METRICS_CONSUMER_REGISTER);<br/>\n    +if (registerInfo != null) {<br/>\n    +    Map<String, Integer> classOccurrencesMap = new HashMap<String, Integer>();<br/>\n    +    for (Map<String, Object> info : registerInfo) {<br/>\n    +String className = (String) info.get(\"class\");<br/>\n    +Object argument = info.get(\"argument\");<br/>\n    +Integer phintNum = Utils.getInt(info.get(\"parallelism.hint\"), 1);<br/>\n    +Map<String, Object> metricsConsumerConf = new HashMap<String, Object>();<br/>\n    +metricsConsumerConf.put(Config.TOPOLOGY_TASKS, phintNum);<br/>\n    +Bolt metricsConsumerBolt = Thrift.prepareSerializedBoltDetails(inputs, new MetricsConsumerBolt(className, argument), null, phintNum, metricsConsumerConf);<br/>\n    +<br/>\n    +String id = className;<br/>\n    +if (classOccurrencesMap.containsKey(className)) </p>\n{\n    +    // e.g. [\\\"a\\\", \\\"b\\\", \\\"a\\\"]) => [\\\"a\\\", \\\"b\\\", \\\"a#2\\\"]\"\n    +    int occurrenceNum = classOccurrencesMap.get(className);\n    +    occurrenceNum++;\n    +    classOccurrencesMap.put(className, occurrenceNum);\n    +    id = Constants.METRICS_COMPONENT_ID_PREFIX + className + \"#\" + occurrenceNum;\n    +}\n<p> else </p>\n{\n    +    classOccurrencesMap.put(className, 1);\n    +}\n<p>    +metricsConsumerBolts.put(id, metricsConsumerBolt);<br/>\n    +    }<br/>\n    +}<br/>\n    +return metricsConsumerBolts;<br/>\n    +    }<br/>\n    +<br/>\n    +    public static void addMetricComponents(Map conf, StormTopology topology) {<br/>\n    +Map<String, Bolt> metricsConsumerBolts = metricsConsumerBoltSpecs(conf, topology);<br/>\n    +for (Map.Entry<String, Bolt> entry : metricsConsumerBolts.entrySet()) </p>\n{\n    +    topology.put_to_bolts(entry.getKey(), entry.getValue());\n    +}\n<p>    +    }<br/>\n    +<br/>\n    +    public static void addSystemComponents(Map conf, StormTopology topology) </p>\n{\n    +Map<String, StreamInfo> outputStreams = new HashMap<String, StreamInfo>();\n    +outputStreams.put(Constants.SYSTEM_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"rate_secs\")));\n    +outputStreams.put(Constants.METRICS_TICK_STREAM_ID, Thrift.outputFields(Arrays.asList(\"interval\")));\n    +outputStreams.put(Constants.CREDENTIALS_CHANGED_STREAM_ID, Thrift.outputFields(Arrays.asList(\"creds\")));\n    +\n    +Map<String, Object> boltConf = new HashMap<String, Object>();\n    +boltConf.put(Config.TOPOLOGY_TASKS, 0);\n    +\n    +Bolt systemBoltSpec = Thrift.prepareSerializedBoltDetails(null, new SystemBolt(), outputStreams, 0, boltConf);\n    +topology.put_to_bolts(Constants.SYSTEM_COMPONENT_ID, systemBoltSpec);\n    +    }\n<p>    +<br/>\n    +    public static StormTopology systemTopology(Map stormConf, StormTopology topology) throws InvalidTopologyException </p>\n{\n    +return _instance.systemTopologyImpl(stormConf, topology);\n    +    }\n<p>    +<br/>\n    +    protected StormTopology systemTopologyImpl(Map stormConf, StormTopology topology) throws InvalidTopologyException {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    That sounds fine, but could we do it in another follow on JIRA?  This is really close to being done.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652115/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652118","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652118","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652118,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIxMTg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T18:39:12Z","updated_at":"2025-01-24T14:23:32Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#discussion_r55566050\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#discussion_r55566050</a></p>\n\n<p>    &#8212; Diff: storm-core/test/jvm/org/apache/storm/utils/staticmocking/CommonInstaller.java &#8212;<br/>\n    @@ -0,0 +1,38 @@<br/>\n    +/**<br/>\n    + * Licensed to the Apache Software Foundation (ASF) under one or more<br/>\n    + * contributor license agreements.  See the NOTICE file distributed with<br/>\n    + * this work for additional information regarding copyright ownership.<br/>\n    + * The ASF licenses this file to you under the Apache License, Version<br/>\n    + * 2.0 (the \"License\"); you may not use this file except in compliance<br/>\n    + * with the License.  You may obtain a copy of the License at<br/>\n    + *<br/>\n    + * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://www.apache.org/licenses/LICENSE-2.0</a><br/>\n    + *<br/>\n    + * Unless required by applicable law or agreed to in writing, software<br/>\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,<br/>\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br/>\n    + * See the License for the specific language governing permissions and<br/>\n    + * limitations under the License.<br/>\n    + */<br/>\n    +package org.apache.storm.utils.staticmocking;<br/>\n    +<br/>\n    +import org.apache.storm.daemon.StormCommon;<br/>\n    +<br/>\n    +public class CommonInstaller implements AutoCloseable {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    I just thought that we didn't need both.  We could update the tests to use StormCommonInstaller and remove this.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652118/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194443713","html_url":"https://github.com/apache/storm/pull/1185#issuecomment-194443713","issue_url":"https://api.github.com/repos/apache/storm/issues/1185","id":194443713,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDQ0MzcxMw==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T18:40:49Z","updated_at":"2016-03-09T18:40:49Z","author_association":"CONTRIBUTOR","body":"The code looks really good an I am +1 for merging it in as is.  There are still a few nits though. one with CommonInstaller and another that @arunmahadevan pointed out for SystemTopologyBuilder that we need to come to a resolution on.\n\nAlso you need to upmerge the drpc changes that went in have caused a minor conflict.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194443713/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652127","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652127","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652127,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIxMjc=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T18:40:50Z","updated_at":"2025-01-24T14:23:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#issuecomment-194443713\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#issuecomment-194443713</a></p>\n\n<p>    The code looks really good an I am +1 for merging it in as is.  There are still a few nits though. one with CommonInstaller and another that @arunmahadevan pointed out for SystemTopologyBuilder that we need to come to a resolution on.</p>\n\n<p>    Also you need to upmerge the drpc changes that went in have caused a minor conflict.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652127/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194497883","html_url":"https://github.com/apache/storm/pull/1179#issuecomment-194497883","issue_url":"https://api.github.com/repos/apache/storm/issues/1179","id":194497883,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDQ5Nzg4Mw==","user":{"login":"ptgoetz","id":260896,"node_id":"MDQ6VXNlcjI2MDg5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/260896?v=4","gravatar_id":"","url":"https://api.github.com/users/ptgoetz","html_url":"https://github.com/ptgoetz","followers_url":"https://api.github.com/users/ptgoetz/followers","following_url":"https://api.github.com/users/ptgoetz/following{/other_user}","gists_url":"https://api.github.com/users/ptgoetz/gists{/gist_id}","starred_url":"https://api.github.com/users/ptgoetz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ptgoetz/subscriptions","organizations_url":"https://api.github.com/users/ptgoetz/orgs","repos_url":"https://api.github.com/users/ptgoetz/repos","events_url":"https://api.github.com/users/ptgoetz/events{/privacy}","received_events_url":"https://api.github.com/users/ptgoetz/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T20:40:41Z","updated_at":"2016-03-09T20:40:41Z","author_association":"MEMBER","body":"Merged #1179 to 1.x-branch.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194497883/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700984","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700984","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700984,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA5ODQ=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T20:40:43Z","updated_at":"2025-01-24T14:44:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user ptgoetz commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1179#issuecomment-194497883\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1179#issuecomment-194497883</a></p>\n\n<p>    Merged #1179 to 1.x-branch.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700988","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700988","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700988,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA5ODg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T20:41:07Z","updated_at":"2025-01-24T14:44:38Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user asfgit closed the pull request at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1179\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1179</a></p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194507679","html_url":"https://github.com/apache/storm/pull/1178#issuecomment-194507679","issue_url":"https://api.github.com/repos/apache/storm/issues/1178","id":194507679,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDUwNzY3OQ==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T21:08:56Z","updated_at":"2016-03-09T21:08:56Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194507679/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700992","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700992","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700992,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA5OTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T21:08:58Z","updated_at":"2025-01-24T14:44:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1178#issuecomment-194507679\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1178#issuecomment-194507679</a></p>\n\n<p>    +1</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700992/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194507988","html_url":"https://github.com/apache/storm/pull/1178#issuecomment-194507988","issue_url":"https://api.github.com/repos/apache/storm/issues/1178","id":194507988,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDUwNzk4OA==","user":{"login":"revans2","id":3441321,"node_id":"MDQ6VXNlcjM0NDEzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/3441321?v=4","gravatar_id":"","url":"https://api.github.com/users/revans2","html_url":"https://github.com/revans2","followers_url":"https://api.github.com/users/revans2/followers","following_url":"https://api.github.com/users/revans2/following{/other_user}","gists_url":"https://api.github.com/users/revans2/gists{/gist_id}","starred_url":"https://api.github.com/users/revans2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revans2/subscriptions","organizations_url":"https://api.github.com/users/revans2/orgs","repos_url":"https://api.github.com/users/revans2/repos","events_url":"https://api.github.com/users/revans2/events{/privacy}","received_events_url":"https://api.github.com/users/revans2/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T21:10:02Z","updated_at":"2016-03-09T21:10:02Z","author_association":"CONTRIBUTOR","body":"oops I missed that org.apache.storm.security.auth.auth-test / testname: digest-authentication-test is failing thinking that it want plane.  \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194507988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700999","html_url":"https://github.com/apache/storm/issues/5304#issuecomment-2612700999","issue_url":"https://api.github.com/repos/apache/storm/issues/5304","id":2612700999,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3MDA5OTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T21:10:03Z","updated_at":"2025-01-24T14:44:39Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user revans2 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1178#issuecomment-194507988\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1178#issuecomment-194507988</a></p>\n\n<p>    oops I missed that org.apache.storm.security.auth.auth-test / testname: digest-authentication-test is failing thinking that it want plane.  </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612700999/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612882692","html_url":"https://github.com/apache/storm/issues/5451#issuecomment-2612882692","issue_url":"https://api.github.com/repos/apache/storm/issues/5451","id":2612882692,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODI2OTI=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T22:06:10Z","updated_at":"2025-01-24T16:06:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>GitHub user knusbaum opened a pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1199\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1199</a></p>\n\n<p>    <a href=\"https://issues.apache.org/jira/browse/STORM-1616\" title=\"Add RAS API for Trident\" class=\"issue-link\" data-issue-key=\"STORM-1616\"><del>STORM-1616</del></a>: Add RAS API for Trident</p>\n\n\n\n<p>You can merge this pull request into a Git repository by running:</p>\n\n<p>    $ git pull <a href=\"https://github.com/knusbaum/incubator-storm\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/knusbaum/incubator-storm</a> Trident-RAS-v2</p>\n\n<p>Alternatively you can review and apply these changes as the patch at:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1199.patch\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1199.patch</a></p>\n\n<p>To close this pull request, make a commit to your master/trunk branch<br/>\nwith (at least) the following in the commit message:</p>\n\n<p>    This closes #1199</p>\n\n<hr />\n<p>commit 17a55d20d3f20bc04ca48ee3a9f63eaed8960b9c<br/>\nAuthor: Kyle Nusbaum <kylejnusbaum@gmail.com><br/>\nDate:   2016-03-08T21:46:23Z</p>\n\n<p>    Initial changes.</p>\n\n<p>commit fbfb1ca0bb97ac2001d139eab56fef6917680340<br/>\nAuthor: Kyle Nusbaum <kylejnusbaum@gmail.com><br/>\nDate:   2016-03-09T20:57:30Z</p>\n\n<p>    Ready for PR</p>\n\n<hr />","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612882692/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194563462","html_url":"https://github.com/apache/storm/pull/1145#issuecomment-194563462","issue_url":"https://api.github.com/repos/apache/storm/issues/1145","id":194563462,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDU2MzQ2Mg==","user":{"login":"harshach","id":38649,"node_id":"MDQ6VXNlcjM4NjQ5","avatar_url":"https://avatars.githubusercontent.com/u/38649?v=4","gravatar_id":"","url":"https://api.github.com/users/harshach","html_url":"https://github.com/harshach","followers_url":"https://api.github.com/users/harshach/followers","following_url":"https://api.github.com/users/harshach/following{/other_user}","gists_url":"https://api.github.com/users/harshach/gists{/gist_id}","starred_url":"https://api.github.com/users/harshach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harshach/subscriptions","organizations_url":"https://api.github.com/users/harshach/orgs","repos_url":"https://api.github.com/users/harshach/repos","events_url":"https://api.github.com/users/harshach/events{/privacy}","received_events_url":"https://api.github.com/users/harshach/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T23:27:42Z","updated_at":"2016-03-09T23:27:42Z","author_association":"CONTRIBUTOR","body":"+1\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194563462/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194567970","html_url":"https://github.com/apache/storm/pull/1131#issuecomment-194567970","issue_url":"https://api.github.com/repos/apache/storm/issues/1131","id":194567970,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDU2Nzk3MA==","user":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-09T23:35:24Z","updated_at":"2016-03-09T23:35:24Z","author_association":"CONTRIBUTOR","body":"@hmcl, the new `KafkaSpoutConfig` does not take in `securityProtocol` unlike `SpoutConfig`. Is this intentional? will `storm-kafka-client` module work with secure kafka instance?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194567970/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194607393","html_url":"https://github.com/apache/storm/pull/1196#issuecomment-194607393","issue_url":"https://api.github.com/repos/apache/storm/issues/1196","id":194607393,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDYwNzM5Mw==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T01:35:00Z","updated_at":"2016-03-10T01:35:00Z","author_association":"CONTRIBUTOR","body":"@unsleepy22  It loos good to me.  Many *.py files start with \"#!/usr/bin/python\" in storm . So do you think we should update them together or not?\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194607393/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880648","html_url":"https://github.com/apache/storm/issues/5440#issuecomment-2612880648","issue_url":"https://api.github.com/repos/apache/storm/issues/5440","id":2612880648,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA2NDg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T01:35:01Z","updated_at":"2025-01-24T16:06:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1196#issuecomment-194607393\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1196#issuecomment-194607393</a></p>\n\n<p>    @unsleepy22  It loos good to me.  Many *.py files start with \"#!/usr/bin/python\" in storm . So do you think we should update them together or not?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880648/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194628221","html_url":"https://github.com/apache/storm/pull/1196#issuecomment-194628221","issue_url":"https://api.github.com/repos/apache/storm/issues/1196","id":194628221,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDYyODIyMQ==","user":{"login":"unsleepy22","id":631361,"node_id":"MDQ6VXNlcjYzMTM2MQ==","avatar_url":"https://avatars.githubusercontent.com/u/631361?v=4","gravatar_id":"","url":"https://api.github.com/users/unsleepy22","html_url":"https://github.com/unsleepy22","followers_url":"https://api.github.com/users/unsleepy22/followers","following_url":"https://api.github.com/users/unsleepy22/following{/other_user}","gists_url":"https://api.github.com/users/unsleepy22/gists{/gist_id}","starred_url":"https://api.github.com/users/unsleepy22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/unsleepy22/subscriptions","organizations_url":"https://api.github.com/users/unsleepy22/orgs","repos_url":"https://api.github.com/users/unsleepy22/repos","events_url":"https://api.github.com/users/unsleepy22/events{/privacy}","received_events_url":"https://api.github.com/users/unsleepy22/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T02:35:17Z","updated_at":"2016-03-10T02:35:17Z","author_association":"NONE","body":"@hustfxj thanks for pointing out, I added storm.py too. But for the other files, I prefer to leave them alone since they're not part of storm-core.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194628221/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880656","html_url":"https://github.com/apache/storm/issues/5440#issuecomment-2612880656","issue_url":"https://api.github.com/repos/apache/storm/issues/5440","id":2612880656,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODA2NTY=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T02:35:19Z","updated_at":"2025-01-24T16:06:01Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user unsleepy22 commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1196#issuecomment-194628221\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1196#issuecomment-194628221</a></p>\n\n<p>    @hustfxj thanks for pointing out, I added storm.py too. But for the other files, I prefer to leave them alone since they're not part of storm-core.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612880656/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194629551","html_url":"https://github.com/apache/storm/pull/1194#issuecomment-194629551","issue_url":"https://api.github.com/repos/apache/storm/issues/1194","id":194629551,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDYyOTU1MQ==","user":{"login":"hustfxj","id":7270212,"node_id":"MDQ6VXNlcjcyNzAyMTI=","avatar_url":"https://avatars.githubusercontent.com/u/7270212?v=4","gravatar_id":"","url":"https://api.github.com/users/hustfxj","html_url":"https://github.com/hustfxj","followers_url":"https://api.github.com/users/hustfxj/followers","following_url":"https://api.github.com/users/hustfxj/following{/other_user}","gists_url":"https://api.github.com/users/hustfxj/gists{/gist_id}","starred_url":"https://api.github.com/users/hustfxj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hustfxj/subscriptions","organizations_url":"https://api.github.com/users/hustfxj/orgs","repos_url":"https://api.github.com/users/hustfxj/repos","events_url":"https://api.github.com/users/hustfxj/events{/privacy}","received_events_url":"https://api.github.com/users/hustfxj/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T02:38:33Z","updated_at":"2016-03-10T02:38:58Z","author_association":"CONTRIBUTOR","body":"+1. I have a suggestion.  we drop messages because Channel is not in good state. I hope we should put the messages into buffer when Channel is not in good state. Of course, we should drop the buffer if the  buffer is full and channel is still not in good state.\n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194629551/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881278","html_url":"https://github.com/apache/storm/issues/5444#issuecomment-2612881278","issue_url":"https://api.github.com/repos/apache/storm/issues/5444","id":2612881278,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODEyNzg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T02:38:34Z","updated_at":"2025-01-24T16:06:17Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user hustfxj commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1194#issuecomment-194629551\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1194#issuecomment-194629551</a></p>\n\n<p>    +1. I have a suggestion.  we drop messages because Channel is not in good state. I hope we should put the messages into buffer when Channel is not in good state. Of course, we should drop the buffer if the channel is still not in good state.</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612881278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194641160","html_url":"https://github.com/apache/storm/pull/1185#issuecomment-194641160","issue_url":"https://api.github.com/repos/apache/storm/issues/1185","id":194641160,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDY0MTE2MA==","user":{"login":"bastiliu","id":7921256,"node_id":"MDQ6VXNlcjc5MjEyNTY=","avatar_url":"https://avatars.githubusercontent.com/u/7921256?v=4","gravatar_id":"","url":"https://api.github.com/users/bastiliu","html_url":"https://github.com/bastiliu","followers_url":"https://api.github.com/users/bastiliu/followers","following_url":"https://api.github.com/users/bastiliu/following{/other_user}","gists_url":"https://api.github.com/users/bastiliu/gists{/gist_id}","starred_url":"https://api.github.com/users/bastiliu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bastiliu/subscriptions","organizations_url":"https://api.github.com/users/bastiliu/orgs","repos_url":"https://api.github.com/users/bastiliu/repos","events_url":"https://api.github.com/users/bastiliu/events{/privacy}","received_events_url":"https://api.github.com/users/bastiliu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T03:16:22Z","updated_at":"2016-03-10T03:16:22Z","author_association":"CONTRIBUTOR","body":"@revans2 @abhishekagarwal87 Thanks for your review. CommonInstaller was removed, and the drpc changes have been merged.  For SystemTopologyBuilder, maybe it is better to follow up in a new JIRA for enhancement or code restructuring, since this JIRA mainly focus on migration. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194641160/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652128","html_url":"https://github.com/apache/storm/issues/5106#issuecomment-2612652128","issue_url":"https://api.github.com/repos/apache/storm/issues/5106","id":2612652128,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2NTIxMjg=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T03:16:23Z","updated_at":"2025-01-24T14:23:33Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user bastiliu commented on the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1185#issuecomment-194641160\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1185#issuecomment-194641160</a></p>\n\n<p>    @revans2 @abhishekagarwal87 Thanks for your review. CommonInstaller was removed, and the drpc changes have been merged.  For SystemTopologyBuilder, maybe it is better to follow up in a new JIRA for enhancement or code restructuring, since this JIRA mainly focus on migration. </p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612652128/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612882699","html_url":"https://github.com/apache/storm/issues/5451#issuecomment-2612882699","issue_url":"https://api.github.com/repos/apache/storm/issues/5451","id":2612882699,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4ODI2OTk=","user":{"login":"jira-importer","id":99357308,"node_id":"U_kgDOBewSfA","avatar_url":"https://avatars.githubusercontent.com/u/99357308?v=4","gravatar_id":"","url":"https://api.github.com/users/jira-importer","html_url":"https://github.com/jira-importer","followers_url":"https://api.github.com/users/jira-importer/followers","following_url":"https://api.github.com/users/jira-importer/following{/other_user}","gists_url":"https://api.github.com/users/jira-importer/gists{/gist_id}","starred_url":"https://api.github.com/users/jira-importer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jira-importer/subscriptions","organizations_url":"https://api.github.com/users/jira-importer/orgs","repos_url":"https://api.github.com/users/jira-importer/repos","events_url":"https://api.github.com/users/jira-importer/events{/privacy}","received_events_url":"https://api.github.com/users/jira-importer/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T04:51:50Z","updated_at":"2025-01-24T16:06:51Z","author_association":"COLLABORATOR","body":"<i><a href=\"https://issues.apache.org/jira/secure/ViewProfile.jspa?name=githubbot\">githubbot</a>:</i>\n<p>Github user arunmahadevan commented on a diff in the pull request:</p>\n\n<p>    <a href=\"https://github.com/apache/storm/pull/1199#discussion_r55633878\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">https://github.com/apache/storm/pull/1199#discussion_r55633878</a></p>\n\n<p>    &#8212; Diff: storm-core/src/jvm/org/apache/storm/trident/Stream.java &#8212;<br/>\n    @@ -124,6 +124,31 @@ public Stream parallelismHint(int hint) {<br/>\n }</p>\n\n<p> /**<br/>\n    +     * Sets the CPU Load resource for the current node<br/>\n    +     */<br/>\n    +    public Stream setCPULoad(Number load) {<br/>\n    &#8212; End diff &#8211;</p>\n\n<p>    A `Stream` should ideally have only streaming operations but it seems we are bringing the topology configuration into the stream api which does not look very clean. Cant this be part of the `TridentTopology` or passed during `submitTopology` ? If this should really be part of stream, can we have a single method like `nodeConfig(NodeConfig config)` and have all these methods as part of the `NodeConfig` so that we have only one extra method which is not really a stream operation?</p>","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/2612882699/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/storm/issues/comments/194748171","html_url":"https://github.com/apache/storm/pull/1185#issuecomment-194748171","issue_url":"https://api.github.com/repos/apache/storm/issues/1185","id":194748171,"node_id":"MDEyOklzc3VlQ29tbWVudDE5NDc0ODE3MQ==","user":{"login":"abhishekagarwal87","id":1477457,"node_id":"MDQ6VXNlcjE0Nzc0NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1477457?v=4","gravatar_id":"","url":"https://api.github.com/users/abhishekagarwal87","html_url":"https://github.com/abhishekagarwal87","followers_url":"https://api.github.com/users/abhishekagarwal87/followers","following_url":"https://api.github.com/users/abhishekagarwal87/following{/other_user}","gists_url":"https://api.github.com/users/abhishekagarwal87/gists{/gist_id}","starred_url":"https://api.github.com/users/abhishekagarwal87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhishekagarwal87/subscriptions","organizations_url":"https://api.github.com/users/abhishekagarwal87/orgs","repos_url":"https://api.github.com/users/abhishekagarwal87/repos","events_url":"https://api.github.com/users/abhishekagarwal87/events{/privacy}","received_events_url":"https://api.github.com/users/abhishekagarwal87/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2016-03-10T09:19:23Z","updated_at":"2016-03-10T09:19:23Z","author_association":"CONTRIBUTOR","body":"I am fine with refactoring system topology builder in separate JIRA. \n","reactions":{"url":"https://api.github.com/repos/apache/storm/issues/comments/194748171/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]