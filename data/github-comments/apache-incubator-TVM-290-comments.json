[{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920268526","html_url":"https://github.com/apache/tvm/issues/8978#issuecomment-920268526","issue_url":"https://api.github.com/repos/apache/tvm/issues/8978","id":920268526,"node_id":"IC_kwDOBDeBdM422i7u","user":{"login":"manupak","id":61496855,"node_id":"MDQ6VXNlcjYxNDk2ODU1","avatar_url":"https://avatars.githubusercontent.com/u/61496855?v=4","gravatar_id":"","url":"https://api.github.com/users/manupak","html_url":"https://github.com/manupak","followers_url":"https://api.github.com/users/manupak/followers","following_url":"https://api.github.com/users/manupak/following{/other_user}","gists_url":"https://api.github.com/users/manupak/gists{/gist_id}","starred_url":"https://api.github.com/users/manupak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manupak/subscriptions","organizations_url":"https://api.github.com/users/manupak/orgs","repos_url":"https://api.github.com/users/manupak/repos","events_url":"https://api.github.com/users/manupak/events{/privacy}","received_events_url":"https://api.github.com/users/manupak/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T18:21:53Z","updated_at":"2021-09-15T18:21:53Z","author_association":"CONTRIBUTOR","body":"Also for some reason, if we really need the tir.allocate to be translated down to as a stack placement, we should probably make the tir.allocate with storage_scope = \"local\" to PrimFunc that is placed on CPU.\r\n\r\nkeep the global ones served via TVMBAWs, because TVMBAW could serve as the 'global' allocator for memory.\r\nIn this way, in micro we could still use TVMBAWs to serve memory from the application/platform layer for 'global' allocates.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920268526/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920295600","html_url":"https://github.com/apache/tvm/pull/9021#issuecomment-920295600","issue_url":"https://api.github.com/repos/apache/tvm/issues/9021","id":920295600,"node_id":"IC_kwDOBDeBdM422piw","user":{"login":"icemelon","id":2696494,"node_id":"MDQ6VXNlcjI2OTY0OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2696494?v=4","gravatar_id":"","url":"https://api.github.com/users/icemelon","html_url":"https://github.com/icemelon","followers_url":"https://api.github.com/users/icemelon/followers","following_url":"https://api.github.com/users/icemelon/following{/other_user}","gists_url":"https://api.github.com/users/icemelon/gists{/gist_id}","starred_url":"https://api.github.com/users/icemelon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/icemelon/subscriptions","organizations_url":"https://api.github.com/users/icemelon/orgs","repos_url":"https://api.github.com/users/icemelon/repos","events_url":"https://api.github.com/users/icemelon/events{/privacy}","received_events_url":"https://api.github.com/users/icemelon/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T18:57:41Z","updated_at":"2021-09-15T18:57:41Z","author_association":"MEMBER","body":"cc @comaniac @junrushao1994 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920295600/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920304017","html_url":"https://github.com/apache/tvm/pull/8971#issuecomment-920304017","issue_url":"https://api.github.com/repos/apache/tvm/issues/8971","id":920304017,"node_id":"IC_kwDOBDeBdM422rmR","user":{"login":"AndrewZhaoLuo","id":13855451,"node_id":"MDQ6VXNlcjEzODU1NDUx","avatar_url":"https://avatars.githubusercontent.com/u/13855451?v=4","gravatar_id":"","url":"https://api.github.com/users/AndrewZhaoLuo","html_url":"https://github.com/AndrewZhaoLuo","followers_url":"https://api.github.com/users/AndrewZhaoLuo/followers","following_url":"https://api.github.com/users/AndrewZhaoLuo/following{/other_user}","gists_url":"https://api.github.com/users/AndrewZhaoLuo/gists{/gist_id}","starred_url":"https://api.github.com/users/AndrewZhaoLuo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndrewZhaoLuo/subscriptions","organizations_url":"https://api.github.com/users/AndrewZhaoLuo/orgs","repos_url":"https://api.github.com/users/AndrewZhaoLuo/repos","events_url":"https://api.github.com/users/AndrewZhaoLuo/events{/privacy}","received_events_url":"https://api.github.com/users/AndrewZhaoLuo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T19:10:03Z","updated_at":"2021-09-15T19:10:03Z","author_association":"CONTRIBUTOR","body":"Ok folks, I've removed the controversial changes and did an alternate work around. PTAL when you have time.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920304017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920335684","html_url":"https://github.com/apache/tvm/pull/8990#issuecomment-920335684","issue_url":"https://api.github.com/repos/apache/tvm/issues/8990","id":920335684,"node_id":"IC_kwDOBDeBdM422zVE","user":{"login":"sergio-grovety","id":89378719,"node_id":"MDQ6VXNlcjg5Mzc4NzE5","avatar_url":"https://avatars.githubusercontent.com/u/89378719?v=4","gravatar_id":"","url":"https://api.github.com/users/sergio-grovety","html_url":"https://github.com/sergio-grovety","followers_url":"https://api.github.com/users/sergio-grovety/followers","following_url":"https://api.github.com/users/sergio-grovety/following{/other_user}","gists_url":"https://api.github.com/users/sergio-grovety/gists{/gist_id}","starred_url":"https://api.github.com/users/sergio-grovety/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sergio-grovety/subscriptions","organizations_url":"https://api.github.com/users/sergio-grovety/orgs","repos_url":"https://api.github.com/users/sergio-grovety/repos","events_url":"https://api.github.com/users/sergio-grovety/events{/privacy}","received_events_url":"https://api.github.com/users/sergio-grovety/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T20:01:28Z","updated_at":"2021-09-15T20:01:28Z","author_association":"CONTRIBUTOR","body":"> for the test image maybe you could reuse this image: https://github.com/apache/tvm/blob/main/tests/micro/testdata/mnist/digit-2.jpg\r\n\r\nYes, sure.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920335684/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920338681","html_url":"https://github.com/apache/tvm/pull/8985#issuecomment-920338681","issue_url":"https://api.github.com/repos/apache/tvm/issues/8985","id":920338681,"node_id":"IC_kwDOBDeBdM4220D5","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T20:06:01Z","updated_at":"2021-09-15T20:06:01Z","author_association":"MEMBER","body":"Thanks @anwang2009 @AndrewZhaoLuo @mbrookhart @junrushao1994 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920338681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920348214","html_url":"https://github.com/apache/tvm/pull/8808#issuecomment-920348214","issue_url":"https://api.github.com/repos/apache/tvm/issues/8808","id":920348214,"node_id":"IC_kwDOBDeBdM4222Y2","user":{"login":"comaniac","id":8262694,"node_id":"MDQ6VXNlcjgyNjI2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/8262694?v=4","gravatar_id":"","url":"https://api.github.com/users/comaniac","html_url":"https://github.com/comaniac","followers_url":"https://api.github.com/users/comaniac/followers","following_url":"https://api.github.com/users/comaniac/following{/other_user}","gists_url":"https://api.github.com/users/comaniac/gists{/gist_id}","starred_url":"https://api.github.com/users/comaniac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/comaniac/subscriptions","organizations_url":"https://api.github.com/users/comaniac/orgs","repos_url":"https://api.github.com/users/comaniac/repos","events_url":"https://api.github.com/users/comaniac/events{/privacy}","received_events_url":"https://api.github.com/users/comaniac/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T20:20:35Z","updated_at":"2021-09-15T20:20:35Z","author_association":"CONTRIBUTOR","body":"Thanks @tiandiao123 @trevor-m @FrozenGene @jcf94 @vinx13 @Laurawly ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920348214/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920359675","html_url":"https://github.com/apache/tvm/pull/8971#issuecomment-920359675","issue_url":"https://api.github.com/repos/apache/tvm/issues/8971","id":920359675,"node_id":"IC_kwDOBDeBdM4225L7","user":{"login":"AndrewZhaoLuo","id":13855451,"node_id":"MDQ6VXNlcjEzODU1NDUx","avatar_url":"https://avatars.githubusercontent.com/u/13855451?v=4","gravatar_id":"","url":"https://api.github.com/users/AndrewZhaoLuo","html_url":"https://github.com/AndrewZhaoLuo","followers_url":"https://api.github.com/users/AndrewZhaoLuo/followers","following_url":"https://api.github.com/users/AndrewZhaoLuo/following{/other_user}","gists_url":"https://api.github.com/users/AndrewZhaoLuo/gists{/gist_id}","starred_url":"https://api.github.com/users/AndrewZhaoLuo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndrewZhaoLuo/subscriptions","organizations_url":"https://api.github.com/users/AndrewZhaoLuo/orgs","repos_url":"https://api.github.com/users/AndrewZhaoLuo/repos","events_url":"https://api.github.com/users/AndrewZhaoLuo/events{/privacy}","received_events_url":"https://api.github.com/users/AndrewZhaoLuo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T20:39:00Z","updated_at":"2021-09-15T20:39:00Z","author_association":"CONTRIBUTOR","body":"https://github.com/apache/tvm/pull/9023 <-- discussion about making negative indices simpler ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920359675/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920369621","html_url":"https://github.com/apache/tvm/pull/9023#issuecomment-920369621","issue_url":"https://api.github.com/repos/apache/tvm/issues/9023","id":920369621,"node_id":"IC_kwDOBDeBdM4227nV","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T20:56:21Z","updated_at":"2021-09-15T20:57:51Z","author_association":"MEMBER","body":"For the context, this PR was split from another PR following the discussion https://github.com/apache/tvm/pull/8971#discussion_r707850237, since this could be potentially a controversial change (change the semantics of `te::Tensor` indexing)\r\n\r\ncc @tqchen @junrushao1994 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920369621/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920391097","html_url":"https://github.com/apache/tvm/pull/9018#issuecomment-920391097","issue_url":"https://api.github.com/repos/apache/tvm/issues/9018","id":920391097,"node_id":"IC_kwDOBDeBdM423A25","user":{"login":"mehrdadh","id":6409345,"node_id":"MDQ6VXNlcjY0MDkzNDU=","avatar_url":"https://avatars.githubusercontent.com/u/6409345?v=4","gravatar_id":"","url":"https://api.github.com/users/mehrdadh","html_url":"https://github.com/mehrdadh","followers_url":"https://api.github.com/users/mehrdadh/followers","following_url":"https://api.github.com/users/mehrdadh/following{/other_user}","gists_url":"https://api.github.com/users/mehrdadh/gists{/gist_id}","starred_url":"https://api.github.com/users/mehrdadh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mehrdadh/subscriptions","organizations_url":"https://api.github.com/users/mehrdadh/orgs","repos_url":"https://api.github.com/users/mehrdadh/repos","events_url":"https://api.github.com/users/mehrdadh/events{/privacy}","received_events_url":"https://api.github.com/users/mehrdadh/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T21:20:21Z","updated_at":"2021-09-15T21:20:21Z","author_association":"MEMBER","body":"cc @leandron @areusch for possible review.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920391097/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920426352","html_url":"https://github.com/apache/tvm/pull/9023#issuecomment-920426352","issue_url":"https://api.github.com/repos/apache/tvm/issues/9023","id":920426352,"node_id":"IC_kwDOBDeBdM423Jdw","user":{"login":"mbrookhart","id":4065489,"node_id":"MDQ6VXNlcjQwNjU0ODk=","avatar_url":"https://avatars.githubusercontent.com/u/4065489?v=4","gravatar_id":"","url":"https://api.github.com/users/mbrookhart","html_url":"https://github.com/mbrookhart","followers_url":"https://api.github.com/users/mbrookhart/followers","following_url":"https://api.github.com/users/mbrookhart/following{/other_user}","gists_url":"https://api.github.com/users/mbrookhart/gists{/gist_id}","starred_url":"https://api.github.com/users/mbrookhart/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbrookhart/subscriptions","organizations_url":"https://api.github.com/users/mbrookhart/orgs","repos_url":"https://api.github.com/users/mbrookhart/repos","events_url":"https://api.github.com/users/mbrookhart/events{/privacy}","received_events_url":"https://api.github.com/users/mbrookhart/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T22:19:40Z","updated_at":"2021-09-15T22:19:40Z","author_association":"CONTRIBUTOR","body":"I like this idea. I've been slowly throwing `relay.where` around the ops and the importers to solve this problem when I hit it, but that adds some complication to ops, fusion, and the risk of making things slower than they need to be. This would enable things to be much simpler at the Relay level in a number of places, I'm very curious to hear Tianqi and Junru's thoughts.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920426352/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920444851","html_url":"https://github.com/apache/tvm/issues/8977#issuecomment-920444851","issue_url":"https://api.github.com/repos/apache/tvm/issues/8977","id":920444851,"node_id":"IC_kwDOBDeBdM423N-z","user":{"login":"mbrookhart","id":4065489,"node_id":"MDQ6VXNlcjQwNjU0ODk=","avatar_url":"https://avatars.githubusercontent.com/u/4065489?v=4","gravatar_id":"","url":"https://api.github.com/users/mbrookhart","html_url":"https://github.com/mbrookhart","followers_url":"https://api.github.com/users/mbrookhart/followers","following_url":"https://api.github.com/users/mbrookhart/following{/other_user}","gists_url":"https://api.github.com/users/mbrookhart/gists{/gist_id}","starred_url":"https://api.github.com/users/mbrookhart/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbrookhart/subscriptions","organizations_url":"https://api.github.com/users/mbrookhart/orgs","repos_url":"https://api.github.com/users/mbrookhart/repos","events_url":"https://api.github.com/users/mbrookhart/events{/privacy}","received_events_url":"https://api.github.com/users/mbrookhart/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T22:52:02Z","updated_at":"2021-09-15T22:52:02Z","author_association":"CONTRIBUTOR","body":"This is the test that fails in the VM without this code: https://github.com/apache/tvm/pull/9019","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920444851/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920445094","html_url":"https://github.com/apache/tvm/issues/8978#issuecomment-920445094","issue_url":"https://api.github.com/repos/apache/tvm/issues/8978","id":920445094,"node_id":"IC_kwDOBDeBdM423OCm","user":{"login":"mbrookhart","id":4065489,"node_id":"MDQ6VXNlcjQwNjU0ODk=","avatar_url":"https://avatars.githubusercontent.com/u/4065489?v=4","gravatar_id":"","url":"https://api.github.com/users/mbrookhart","html_url":"https://github.com/mbrookhart","followers_url":"https://api.github.com/users/mbrookhart/followers","following_url":"https://api.github.com/users/mbrookhart/following{/other_user}","gists_url":"https://api.github.com/users/mbrookhart/gists{/gist_id}","starred_url":"https://api.github.com/users/mbrookhart/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbrookhart/subscriptions","organizations_url":"https://api.github.com/users/mbrookhart/orgs","repos_url":"https://api.github.com/users/mbrookhart/repos","events_url":"https://api.github.com/users/mbrookhart/events{/privacy}","received_events_url":"https://api.github.com/users/mbrookhart/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T22:52:38Z","updated_at":"2021-09-15T22:52:38Z","author_association":"CONTRIBUTOR","body":"FYI - this PR renables the test that this change breaks https://github.com/apache/tvm/pull/9019","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920445094/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920445448","html_url":"https://github.com/apache/tvm/issues/8978#issuecomment-920445448","issue_url":"https://api.github.com/repos/apache/tvm/issues/8978","id":920445448,"node_id":"IC_kwDOBDeBdM423OII","user":{"login":"mbrookhart","id":4065489,"node_id":"MDQ6VXNlcjQwNjU0ODk=","avatar_url":"https://avatars.githubusercontent.com/u/4065489?v=4","gravatar_id":"","url":"https://api.github.com/users/mbrookhart","html_url":"https://github.com/mbrookhart","followers_url":"https://api.github.com/users/mbrookhart/followers","following_url":"https://api.github.com/users/mbrookhart/following{/other_user}","gists_url":"https://api.github.com/users/mbrookhart/gists{/gist_id}","starred_url":"https://api.github.com/users/mbrookhart/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbrookhart/subscriptions","organizations_url":"https://api.github.com/users/mbrookhart/orgs","repos_url":"https://api.github.com/users/mbrookhart/repos","events_url":"https://api.github.com/users/mbrookhart/events{/privacy}","received_events_url":"https://api.github.com/users/mbrookhart/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T22:53:40Z","updated_at":"2021-09-15T22:53:40Z","author_association":"CONTRIBUTOR","body":"@mbs-octoml opened this issue to track an approach to better distinguish multiple targets https://github.com/apache/tvm/issues/9022","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920445448/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920459959","html_url":"https://github.com/apache/tvm/pull/9023#issuecomment-920459959","issue_url":"https://api.github.com/repos/apache/tvm/issues/9023","id":920459959,"node_id":"IC_kwDOBDeBdM423Rq3","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T23:29:48Z","updated_at":"2021-09-15T23:30:02Z","author_association":"MEMBER","body":"I think this can be useful for some of the indexing operations. We could try to make it more explicit though. e.g. introduce a new API. ```tensor.LookupWithNegativeIndices(indices)``` and explicitly call into them in these cases","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920459959/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920463412","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-920463412","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":920463412,"node_id":"IC_kwDOBDeBdM423Sg0","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T23:39:13Z","updated_at":"2021-09-15T23:54:48Z","author_association":"MEMBER","body":"@mbs-octoml To give a bit of context\r\n\r\nIn the context of CPU, we want to preserve small alloca until the code generation point. And then the code will generate the stack alloca in an explicit way. Only when memory is big enough(bigger than a constant), we will use an opaque allocation instead.\r\n\r\nStack allocation is important for the performance of the CPU code. In the case of TVM, we do not have explicit concept of registers in most cases.  Instead we need to rely on LLVM's mem2reg pass to transform a set of constant indexing into stack allocation and turn them into registers, so the code can run effectively. So removing this code path can complicate the code generator side optimization by quite a bit and slow down the CPU code.\r\n\r\nOf course this can be a target specific thing. LowerTVMBuiltin right now has the assumption to only run on host(CPU) code.\r\n\r\n- Allocate always prefers (native) stack allocation when possible, but also allows other means of opaque allocation(as long as the allocation is fulfilled)\r\n- There are however, cases when stack allocation is not possible \r\n    - When the size of memory requested is too big, stack alloca will explode the stack space(That is why there is a size check in the CPU case and the use of global opaque was meant as a fallback to avoid stackoverflow in models with big intermediate temp space)\r\n    - LowerTVMBuiltin was originally designed to run on the host side, which means as soon as the allocation is about device side memory, it will need to call onto a (host side) device API to allocate the memory instead\r\n\r\n\r\nSo rationales for the specific CPU side logic:\r\n- We want to have stack alloca on host when possible(to gain mem2reg optimization)\r\n- When the requested size is too large, we fallback to opaque workspace allocation on heap to allow the code to safely handle code with big temp memory requests as well as dynamic size allocation requests.\r\n\r\nMy guess is we need to look into why VM cannot work with code that allocates on stack in the multiple target case","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920463412/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920465162","html_url":"https://github.com/apache/tvm/pull/9023#issuecomment-920465162","issue_url":"https://api.github.com/repos/apache/tvm/issues/9023","id":920465162,"node_id":"IC_kwDOBDeBdM423S8K","user":{"login":"yzh119","id":11773619,"node_id":"MDQ6VXNlcjExNzczNjE5","avatar_url":"https://avatars.githubusercontent.com/u/11773619?v=4","gravatar_id":"","url":"https://api.github.com/users/yzh119","html_url":"https://github.com/yzh119","followers_url":"https://api.github.com/users/yzh119/followers","following_url":"https://api.github.com/users/yzh119/following{/other_user}","gists_url":"https://api.github.com/users/yzh119/gists{/gist_id}","starred_url":"https://api.github.com/users/yzh119/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yzh119/subscriptions","organizations_url":"https://api.github.com/users/yzh119/orgs","repos_url":"https://api.github.com/users/yzh119/repos","events_url":"https://api.github.com/users/yzh119/events{/privacy}","received_events_url":"https://api.github.com/users/yzh119/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T23:44:03Z","updated_at":"2021-09-15T23:44:03Z","author_association":"MEMBER","body":"Is the negative indices used inside TE? If so I wonder can we make it a transformation pass rather than runtime behavior?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920465162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920469704","html_url":"https://github.com/apache/tvm/pull/9023#issuecomment-920469704","issue_url":"https://api.github.com/repos/apache/tvm/issues/9023","id":920469704,"node_id":"IC_kwDOBDeBdM423UDI","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-15T23:56:33Z","updated_at":"2021-09-15T23:56:33Z","author_association":"MEMBER","body":"@yzh119 I believe the intended usage was for the case where the value of indices are not known at compile time, otherwise compiler will be able to prove and simplify the conditionals","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920469704/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920485102","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-920485102","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":920485102,"node_id":"IC_kwDOBDeBdM423Xzu","user":{"login":"mbs-octoml","id":87091372,"node_id":"MDQ6VXNlcjg3MDkxMzcy","avatar_url":"https://avatars.githubusercontent.com/u/87091372?v=4","gravatar_id":"","url":"https://api.github.com/users/mbs-octoml","html_url":"https://github.com/mbs-octoml","followers_url":"https://api.github.com/users/mbs-octoml/followers","following_url":"https://api.github.com/users/mbs-octoml/following{/other_user}","gists_url":"https://api.github.com/users/mbs-octoml/gists{/gist_id}","starred_url":"https://api.github.com/users/mbs-octoml/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbs-octoml/subscriptions","organizations_url":"https://api.github.com/users/mbs-octoml/orgs","repos_url":"https://api.github.com/users/mbs-octoml/repos","events_url":"https://api.github.com/users/mbs-octoml/events{/privacy}","received_events_url":"https://api.github.com/users/mbs-octoml/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T00:34:25Z","updated_at":"2021-09-16T00:36:26Z","author_association":"CONTRIBUTOR","body":"Thanks so much for for the context. I'll try to capture that in a comment.\r\nThis is a 'bug' only in the sense that this heuristic is not working for the EthosU AOT codegen, I think because they are expecting to intercept the workpool ops downstream? But it does suggest a very simple way forward: make kMaxStackAlloca a TargetKind attribute so they can force it to zero.\r\n@manupa-arm can you chime in here? ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920485102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920486224","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-920486224","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":920486224,"node_id":"IC_kwDOBDeBdM423YFQ","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T00:37:35Z","updated_at":"2021-09-16T00:37:35Z","author_association":"MEMBER","body":"Right, this the gets to the target dependent generation regime where TargetKind attribute is indeed the right solution. We should also send a PR to add comments to that code block so we could have more context in the future.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920486224/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920494401","html_url":"https://github.com/apache/tvm/pull/9023#issuecomment-920494401","issue_url":"https://api.github.com/repos/apache/tvm/issues/9023","id":920494401,"node_id":"IC_kwDOBDeBdM423aFB","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T01:01:07Z","updated_at":"2021-09-16T03:03:31Z","author_association":"MEMBER","body":"I think I sort of understand the usecase here: some negative indices are not known to be negative until in runtime. This forces us to defer the conversion from compile-time to runtime.\r\n\r\nOn the other hand, I am not 100% sure if it is the best fix by adding a new argument in the public interface, given that in most cases indices are just positive and well in-range.\r\n\r\nI was thinking, if the issue comes from an importer, is it possible to add an operator like `normalize_indices`, mark it as `injective` which makes it fusible, so that there isn't architectural change in TE? What do you guys think?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920494401/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920577170","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-920577170","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":920577170,"node_id":"IC_kwDOBDeBdM423uSS","user":{"login":"manupak","id":61496855,"node_id":"MDQ6VXNlcjYxNDk2ODU1","avatar_url":"https://avatars.githubusercontent.com/u/61496855?v=4","gravatar_id":"","url":"https://api.github.com/users/manupak","html_url":"https://github.com/manupak","followers_url":"https://api.github.com/users/manupak/followers","following_url":"https://api.github.com/users/manupak/following{/other_user}","gists_url":"https://api.github.com/users/manupak/gists{/gist_id}","starred_url":"https://api.github.com/users/manupak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manupak/subscriptions","organizations_url":"https://api.github.com/users/manupak/orgs","repos_url":"https://api.github.com/users/manupak/repos","events_url":"https://api.github.com/users/manupak/events{/privacy}","received_events_url":"https://api.github.com/users/manupak/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T04:59:36Z","updated_at":"2021-09-16T04:59:36Z","author_association":"CONTRIBUTOR","body":"@tqchen @mbs-octoml ,\r\n\r\nThis is not specific to Arm(R) Ethos(TM)-U codegen and its generally applicable for any micro controller where we would want to avoid creating allocation of memories in the stack but rather service them via platform abstraction that is handled via TVMBackendWorkspaceAlloc --> TVMPlatformAllocate.\r\n\r\nThis only showed up in Arm(R) Ethos(TM)-U codegen because we use TVMPlatformAllocate allocate memory from a buffer placed in a memory that is both accessible by CPU and NPU. Thus, it makes this a functional bug.\r\nHowever, with this change current main produces code that have much higher stack allocation for micros -- that is not desired.\r\n\r\ncc : @u99127  @areusch \r\n\r\n> Stack allocation is important for the performance of the CPU code. In the case of TVM, we do not have explicit concept of registers in most cases. Instead we need to rely on LLVM's mem2reg pass to transform a set of constant indexing into stack allocation and turn them into registers, so the code can run effectively. So removing this code path can complicate the code generator side optimization by quite a bit and slow down the CPU code.\r\n\r\nThe correct way represent this seems to be using tir.allocates with storage_scope=\"local\" for device=CPU to go into the stack. For targets that needs this behavior, there should be an explicit pass to convert them to local to make them placed to the stack rather than assuming this default behaviour.\r\n\r\n> Of course this can be a target specific thing. LowerTVMBuiltin right now has the assumption to only run on host(CPU) code.\r\n\r\n>    Allocate always prefers (native) stack allocation when possible, but also allows other means of opaque allocation(as long as the allocation is fulfilled)\r\n    There are however, cases when stack allocation is not possible\r\n        When the size of memory requested is too big, stack alloca will explode the stack space(That is why there is a size check in the CPU case and the use of global opaque was meant as a fallback to avoid stackoverflow in models with big intermediate temp space)\r\n        LowerTVMBuiltin was originally designed to run on the host side, which means as soon as the allocation is about device side memory, it will need to call onto a (host side) device API to allocate the memory instead\r\n\r\nClearly, this definition of CPU leaves out micros.\r\nIt feels wrong to print out allocates with \"global\" storage_scope directly into CPU PrimFunc that gets printed as a stack allocation rather it should be serviced via TVMBAW call which moves the responsibility for the runtime/application layer.\r\n\r\n> So rationales for the specific CPU side logic:\r\n\r\n >   We want to have stack alloca on host when possible(to gain mem2reg optimization)\r\n    When the requested size is too large, we fallback to opaque workspace allocation on heap to allow the code to safely handle code with big temp memory requests as well as dynamic size allocation requests.\r\n\r\nThis certainly sounds like we could use an optimization pass to convert the tir.allocate's storage_scope for targets that requires this rather than making that the default behaviour for tir.allocates with \"global\" storage scope.\r\n\r\ncc : @tom-gall @mbaret @Mousius \r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920577170/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920580279","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-920580279","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":920580279,"node_id":"IC_kwDOBDeBdM423vC3","user":{"login":"manupak","id":61496855,"node_id":"MDQ6VXNlcjYxNDk2ODU1","avatar_url":"https://avatars.githubusercontent.com/u/61496855?v=4","gravatar_id":"","url":"https://api.github.com/users/manupak","html_url":"https://github.com/manupak","followers_url":"https://api.github.com/users/manupak/followers","following_url":"https://api.github.com/users/manupak/following{/other_user}","gists_url":"https://api.github.com/users/manupak/gists{/gist_id}","starred_url":"https://api.github.com/users/manupak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manupak/subscriptions","organizations_url":"https://api.github.com/users/manupak/orgs","repos_url":"https://api.github.com/users/manupak/repos","events_url":"https://api.github.com/users/manupak/events{/privacy}","received_events_url":"https://api.github.com/users/manupak/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T05:07:27Z","updated_at":"2021-09-16T05:07:27Z","author_association":"CONTRIBUTOR","body":"Our proposal is to add a check to that loop whether it has 'local' storage_scope before we place them into the stack as it is the solution that works for the wider definition of the CPU, rather than performing a hidden optimization in the codegen that is applicable for a subset of CPUs.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920580279/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920608150","html_url":"https://github.com/apache/tvm/pull/8668#issuecomment-920608150","issue_url":"https://api.github.com/repos/apache/tvm/issues/8668","id":920608150,"node_id":"IC_kwDOBDeBdM42312W","user":{"login":"corehalt","id":46298335,"node_id":"MDQ6VXNlcjQ2Mjk4MzM1","avatar_url":"https://avatars.githubusercontent.com/u/46298335?v=4","gravatar_id":"","url":"https://api.github.com/users/corehalt","html_url":"https://github.com/corehalt","followers_url":"https://api.github.com/users/corehalt/followers","following_url":"https://api.github.com/users/corehalt/following{/other_user}","gists_url":"https://api.github.com/users/corehalt/gists{/gist_id}","starred_url":"https://api.github.com/users/corehalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/corehalt/subscriptions","organizations_url":"https://api.github.com/users/corehalt/orgs","repos_url":"https://api.github.com/users/corehalt/repos","events_url":"https://api.github.com/users/corehalt/events{/privacy}","received_events_url":"https://api.github.com/users/corehalt/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T06:12:22Z","updated_at":"2021-09-16T06:12:22Z","author_association":"CONTRIBUTOR","body":"Hi @kueitang  love this feature, thank you!\r\nThis will also allow to visualize a BYOC-partitioned Relay graph? Reading partitioned Relay IR is a bit tedious in some cases and it would be really helpful feature for this use case.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920608150/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920701813","html_url":"https://github.com/apache/tvm/pull/8971#issuecomment-920701813","issue_url":"https://api.github.com/repos/apache/tvm/issues/8971","id":920701813,"node_id":"IC_kwDOBDeBdM424Mt1","user":{"login":"jroesch","id":696509,"node_id":"MDQ6VXNlcjY5NjUwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/696509?v=4","gravatar_id":"","url":"https://api.github.com/users/jroesch","html_url":"https://github.com/jroesch","followers_url":"https://api.github.com/users/jroesch/followers","following_url":"https://api.github.com/users/jroesch/following{/other_user}","gists_url":"https://api.github.com/users/jroesch/gists{/gist_id}","starred_url":"https://api.github.com/users/jroesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jroesch/subscriptions","organizations_url":"https://api.github.com/users/jroesch/orgs","repos_url":"https://api.github.com/users/jroesch/repos","events_url":"https://api.github.com/users/jroesch/events{/privacy}","received_events_url":"https://api.github.com/users/jroesch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T08:33:13Z","updated_at":"2021-09-16T08:33:13Z","author_association":"MEMBER","body":"@masahi can you land this one if you are OK?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920701813/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920703220","html_url":"https://github.com/apache/tvm/issues/8717#issuecomment-920703220","issue_url":"https://api.github.com/repos/apache/tvm/issues/8717","id":920703220,"node_id":"IC_kwDOBDeBdM424ND0","user":{"login":"Alex-grovety","id":90257244,"node_id":"MDQ6VXNlcjkwMjU3MjQ0","avatar_url":"https://avatars.githubusercontent.com/u/90257244?v=4","gravatar_id":"","url":"https://api.github.com/users/Alex-grovety","html_url":"https://github.com/Alex-grovety","followers_url":"https://api.github.com/users/Alex-grovety/followers","following_url":"https://api.github.com/users/Alex-grovety/following{/other_user}","gists_url":"https://api.github.com/users/Alex-grovety/gists{/gist_id}","starred_url":"https://api.github.com/users/Alex-grovety/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Alex-grovety/subscriptions","organizations_url":"https://api.github.com/users/Alex-grovety/orgs","repos_url":"https://api.github.com/users/Alex-grovety/repos","events_url":"https://api.github.com/users/Alex-grovety/events{/privacy}","received_events_url":"https://api.github.com/users/Alex-grovety/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T08:35:25Z","updated_at":"2021-09-16T08:35:25Z","author_association":"CONTRIBUTOR","body":"To get this result:\r\n```\r\nPrimFunc([placeholder, placeholder, placeholder, T_cast]) attrs={\"from_legacy_te_schedule\": (bool)1, \"global_symbol\": \"tvmgen_default_fused_nn_conv2d_add_fixed_point_multiply_clip_cast_cast_21\", \"tir.noalias\": (bool)1} {\r\n  allocate DepthwiseConv2d[int32 * 1], storage_scope = global\r\n  for (ax0.ax1.fused.ax2.fused.ax3.fused, 0, 401408) {\r\n    DepthwiseConv2d[0] = 0\r\n    for (di, 0, 3) {\r\n      for (dj, 0, 3) {\r\n        DepthwiseConv2d[0] = (DepthwiseConv2d[0] + (int32(tir.if_then_else(((((1 <= (floordiv(ax0.ax1.fused.ax2.fused.ax3.fused, 7168) + di)) && ((floordiv(ax0.ax1.fused.ax2.fused.ax3.fused, 7168) + di) < 57)) && (1 <= (floordiv(floormod(ax0.ax1.fused.ax2.fused.ax3.fused, 7168), 128) + dj))) && ((floordiv(floormod(ax0.ax1.fused.ax2.fused.ax3.fused, 7168), 128) + dj) < 57)), placeholder[((((di*7168) + (dj*128)) + ax0.ax1.fused.ax2.fused.ax3.fused) - 7296)], (int16)0))*int32(placeholder[(((di*384) + (dj*128)) + floormod(ax0.ax1.fused.ax2.fused.ax3.fused, 128))])))\r\n      }\r\n    }\r\n    T_cast[ax0.ax1.fused.ax2.fused.ax3.fused] = int16(uint8(max(min(tir.q_multiply_shift((DepthwiseConv2d[0] + placeholder[floormod(ax0.ax1.fused.ax2.fused.ax3.fused, 128)]), 2080045879, 31, -4), 255), 0)))\r\n  }\r\n}\r\n```\r\nI added [depthwise_conv2d_nhwc schedule for x86](https://github.com/sergey-grovety/tvm/commit/6d7bdaa3dd3c5077d9efdc57c691987df6bc9cfa)\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920703220/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920705954","html_url":"https://github.com/apache/tvm/pull/6023#issuecomment-920705954","issue_url":"https://api.github.com/repos/apache/tvm/issues/6023","id":920705954,"node_id":"IC_kwDOBDeBdM424Nui","user":{"login":"mshr-h","id":8973217,"node_id":"MDQ6VXNlcjg5NzMyMTc=","avatar_url":"https://avatars.githubusercontent.com/u/8973217?v=4","gravatar_id":"","url":"https://api.github.com/users/mshr-h","html_url":"https://github.com/mshr-h","followers_url":"https://api.github.com/users/mshr-h/followers","following_url":"https://api.github.com/users/mshr-h/following{/other_user}","gists_url":"https://api.github.com/users/mshr-h/gists{/gist_id}","starred_url":"https://api.github.com/users/mshr-h/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mshr-h/subscriptions","organizations_url":"https://api.github.com/users/mshr-h/orgs","repos_url":"https://api.github.com/users/mshr-h/repos","events_url":"https://api.github.com/users/mshr-h/events{/privacy}","received_events_url":"https://api.github.com/users/mshr-h/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T08:39:32Z","updated_at":"2021-09-16T08:39:32Z","author_association":"CONTRIBUTOR","body":"Since BVLC distribution support has successfully completed, it would be great if we could replace BVLC distribution with SSD distribution.\r\n\r\nAnyone working on that?\r\nIf no, I'll try to do that.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920705954/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920740949","html_url":"https://github.com/apache/tvm/pull/6023#issuecomment-920740949","issue_url":"https://api.github.com/repos/apache/tvm/issues/6023","id":920740949,"node_id":"IC_kwDOBDeBdM424WRV","user":{"login":"FrozenGene","id":7287321,"node_id":"MDQ6VXNlcjcyODczMjE=","avatar_url":"https://avatars.githubusercontent.com/u/7287321?v=4","gravatar_id":"","url":"https://api.github.com/users/FrozenGene","html_url":"https://github.com/FrozenGene","followers_url":"https://api.github.com/users/FrozenGene/followers","following_url":"https://api.github.com/users/FrozenGene/following{/other_user}","gists_url":"https://api.github.com/users/FrozenGene/gists{/gist_id}","starred_url":"https://api.github.com/users/FrozenGene/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FrozenGene/subscriptions","organizations_url":"https://api.github.com/users/FrozenGene/orgs","repos_url":"https://api.github.com/users/FrozenGene/repos","events_url":"https://api.github.com/users/FrozenGene/events{/privacy}","received_events_url":"https://api.github.com/users/FrozenGene/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T09:30:14Z","updated_at":"2021-09-16T09:30:14Z","author_association":"MEMBER","body":"> Since BVLC distribution support has successfully completed, it would be great if we could replace BVLC distribution with SSD distribution.\r\n> \r\n> Anyone working on that?\r\n> If no, I'll try to do that.\r\n\r\nPlease go ahead. And you could tag @fernchen when you pull request.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920740949/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920759037","html_url":"https://github.com/apache/tvm/pull/8447#issuecomment-920759037","issue_url":"https://api.github.com/repos/apache/tvm/issues/8447","id":920759037,"node_id":"IC_kwDOBDeBdM424ar9","user":{"login":"cheimu","id":13050415,"node_id":"MDQ6VXNlcjEzMDUwNDE1","avatar_url":"https://avatars.githubusercontent.com/u/13050415?v=4","gravatar_id":"","url":"https://api.github.com/users/cheimu","html_url":"https://github.com/cheimu","followers_url":"https://api.github.com/users/cheimu/followers","following_url":"https://api.github.com/users/cheimu/following{/other_user}","gists_url":"https://api.github.com/users/cheimu/gists{/gist_id}","starred_url":"https://api.github.com/users/cheimu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cheimu/subscriptions","organizations_url":"https://api.github.com/users/cheimu/orgs","repos_url":"https://api.github.com/users/cheimu/repos","events_url":"https://api.github.com/users/cheimu/events{/privacy}","received_events_url":"https://api.github.com/users/cheimu/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T09:55:56Z","updated_at":"2021-09-16T09:55:56Z","author_association":"NONE","body":"Hi there. I found this error still exist. I just clone this repo yesterday\r\n![image](https://user-images.githubusercontent.com/13050415/133591939-5d63b0dc-caa0-4f2a-8823-dfd4c075bbec.png)\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920759037/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920841982","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-920841982","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":920841982,"node_id":"IC_kwDOBDeBdM424u7-","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T12:03:52Z","updated_at":"2021-09-16T12:06:27Z","author_association":"MEMBER","body":"@manupa-arm in cpu we do not necessarily differentiate local from global for now as they are from the same namespace. \n\nI can understand the need from the micro side, and I believe this can be resolved by making TVMLowerBuiltin target dependent, and query the max stack alloca property from the target. We can set the value to be zero for micro related targets.   \n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920841982/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920865864","html_url":"https://github.com/apache/tvm/issues/8838#issuecomment-920865864","issue_url":"https://api.github.com/repos/apache/tvm/issues/8838","id":920865864,"node_id":"IC_kwDOBDeBdM4240xI","user":{"login":"arangasa","id":76030063,"node_id":"MDQ6VXNlcjc2MDMwMDYz","avatar_url":"https://avatars.githubusercontent.com/u/76030063?v=4","gravatar_id":"","url":"https://api.github.com/users/arangasa","html_url":"https://github.com/arangasa","followers_url":"https://api.github.com/users/arangasa/followers","following_url":"https://api.github.com/users/arangasa/following{/other_user}","gists_url":"https://api.github.com/users/arangasa/gists{/gist_id}","starred_url":"https://api.github.com/users/arangasa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arangasa/subscriptions","organizations_url":"https://api.github.com/users/arangasa/orgs","repos_url":"https://api.github.com/users/arangasa/repos","events_url":"https://api.github.com/users/arangasa/events{/privacy}","received_events_url":"https://api.github.com/users/arangasa/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T12:40:42Z","updated_at":"2021-09-16T12:40:42Z","author_association":"CONTRIBUTOR","body":"Hi @tmoreau89, I've placed a PR [#9028](https://github.com/apache/tvm/pull/9028) for QLinearSigmoid. Just FYI.  ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920865864/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920880447","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-920880447","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":920880447,"node_id":"IC_kwDOBDeBdM4244U_","user":{"login":"manupak","id":61496855,"node_id":"MDQ6VXNlcjYxNDk2ODU1","avatar_url":"https://avatars.githubusercontent.com/u/61496855?v=4","gravatar_id":"","url":"https://api.github.com/users/manupak","html_url":"https://github.com/manupak","followers_url":"https://api.github.com/users/manupak/followers","following_url":"https://api.github.com/users/manupak/following{/other_user}","gists_url":"https://api.github.com/users/manupak/gists{/gist_id}","starred_url":"https://api.github.com/users/manupak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manupak/subscriptions","organizations_url":"https://api.github.com/users/manupak/orgs","repos_url":"https://api.github.com/users/manupak/repos","events_url":"https://api.github.com/users/manupak/events{/privacy}","received_events_url":"https://api.github.com/users/manupak/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T13:01:48Z","updated_at":"2021-09-16T13:01:48Z","author_association":"CONTRIBUTOR","body":"I feel that is a workaround for an optimization that certain set of CPUs require it.\r\n\r\nMoreover, TVMBAWs allows an abstraction to use an Arena that could be used in any memory for non-micro cases. Therefore it feels more like the general solution we want unless a specific target/option requires it placed on the stack.\r\n\r\nLanding the above change that provides an optimization for certain CPUs in certain cases where creating functional problems for other backend does not seem like the right thing to do. I'd rather revert the change for now and land the correct one that works for the general case.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920880447/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920882592","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-920882592","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":920882592,"node_id":"IC_kwDOBDeBdM42442g","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T13:04:38Z","updated_at":"2021-09-16T13:08:55Z","author_association":"MEMBER","body":"Thanks for the discussions. Before we suggest a resolution, it would be helpful\r\nto summarize the discussions so far. \r\n\r\n## Semantics of Allocate and storage_scope\r\n\r\nAllocate at the moment does not specify the way to allocate the memory.\r\nThe lowering phase can feel free to pick a runtime  dependent one or a \r\nmore platform native one(e.g. stack alloca or direct declaration of shared memory).\r\n\r\nIn practie, we see two different kinds of needs:\r\n- N0: The need for optimizing \"device\" level code.\r\n- N1: The need to be able to allocate memory from the host side, possibly\r\n  in a runtime dependent way.\r\n\r\nN0 is needed to get best performing kernel, since a native way of allocation \r\nthat can be understood by the compiler would give the best chance for followup\r\noptimizations. This is the case for CPU related optimizations. Note that such\r\noptimization is also needed for micro setting, when we use TIR to generate kernel\r\ncode that requested a temp scracth memory for output tiling.\r\n\r\nN1 is needed for \"driving\" the set of computations. In the case of GPU, we have\r\nto rely on host side driver function. In the case of micro AOT, it is desirable\r\nto allocate using platform specific memory.\r\n\r\nOne possible approach is to try to ask user to differentiate these two kinds of\r\nallocations. However, to give user maximum convenience, TVM allows a mixed host/device\r\nprogramming model like CUDA and hide that complexity from the user. The boundary\r\nof N0 and N1 can also be blurred, e.g. a kernel can request to allocate from platform\r\ndependent memory.\r\n\r\nIn specific specialized target devices, we also see an additional need:\r\n\r\n- N2: Allocating memory with special semantics. \r\n\r\nFor example, an unified device pinned memory that is accessible from both NPU and CPU. \r\nA specialized texture memory or shared memory. The request in N2 is quite different \r\nand brings additional requirement to how we allocate the memory and how the memory can be \r\nused and represented in codegen.\r\n\r\nRight now N2 can be covered by introducing a special memory tag -- \"global.npu_unified\".\r\nThis will usually allow the TVM to know that the memory needed to be lowered by possibly\r\nspecial target dependent passes, and leave them out. It is important to do this because \r\nthe compiler makes no assumption that \"global\" can be accessed by other types of devices.\r\n\r\n## Possible Resolutions\r\n\r\nBased on discussions so far, there are two suggested resolutions.\r\n\r\n- R0: Separate out a \"local\" scope that carries the stack allocation heavior. (proposed by @manupa-arm )\r\n- R1: Keep \"global\" scope as it is, introduce a special tagged scope \"global.workspace\"\r\n  that represents a global memory request specifically for workspace memory. \r\n  And introduce lowerings for them. For specialized memory(e.g. NPU unified), introduce\r\n  separate memory scopes. \r\n- R3: Introduce target specific attribute that marks the possible stack alloca size for \r\n  lowering the R0(\"local\") or R1(\"global\"). Note R3 can be done in addition to R0 or R1.\r\n\r\n ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920882592/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920896447","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-920896447","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":920896447,"node_id":"IC_kwDOBDeBdM4248O_","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T13:20:11Z","updated_at":"2021-09-16T13:21:58Z","author_association":"MEMBER","body":"So in the above post I tried to summarize the state. Now let me try to share some of my thoughts based on the summary.\r\n\r\nFirst of all, R0 and R1 are not that different in nature. Both tries to introduce two separate scopes that brings different behavior. The main questions boils down to how can we name the \"global\" scope.\r\n\r\nPer allocate semantics, we treats \"global\" as normal CPU memory which can come from stack or platform specific allocation. The system can choose the best way of doing such lowering. Always lowering to TBAW is indeed more general for the need of N1. However, the need N0 would favor stack allocation when possible. Note that we will likely need a related behavior for micro devices as well when generating operator kernels.\r\n\r\nWhile it is OK to differentiate stack allocated memory from a platform specific one, doing so would bring additional burden to the user and would require significant refactor of the operator implementations.\r\n\r\nThe main requests so far comes from need of N1. In that case, it would be easy for AOT generator to allocate memory with special tags(\"global.workspace\"), that enforces workspace allocation since in this setting there is a single expected behavior.\r\n\r\nSo my suggestion would be R1+R2, as it helps to resolve the need in a way that is compatible with the current semantics and usecases. It will also open doors for more future scope dependent optimizations","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920896447/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920936729","html_url":"https://github.com/apache/tvm/issues/8717#issuecomment-920936729","issue_url":"https://api.github.com/repos/apache/tvm/issues/8717","id":920936729,"node_id":"IC_kwDOBDeBdM425GEZ","user":{"login":"Mousius","id":4933431,"node_id":"MDQ6VXNlcjQ5MzM0MzE=","avatar_url":"https://avatars.githubusercontent.com/u/4933431?v=4","gravatar_id":"","url":"https://api.github.com/users/Mousius","html_url":"https://github.com/Mousius","followers_url":"https://api.github.com/users/Mousius/followers","following_url":"https://api.github.com/users/Mousius/following{/other_user}","gists_url":"https://api.github.com/users/Mousius/gists{/gist_id}","starred_url":"https://api.github.com/users/Mousius/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mousius/subscriptions","organizations_url":"https://api.github.com/users/Mousius/orgs","repos_url":"https://api.github.com/users/Mousius/repos","events_url":"https://api.github.com/users/Mousius/events{/privacy}","received_events_url":"https://api.github.com/users/Mousius/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T14:08:47Z","updated_at":"2021-09-16T14:08:47Z","author_association":"MEMBER","body":"This looks great @Alex-grovety, a huge improvement! \r\n\r\nAs far as next steps, ideally from here: https://github.com/apache/tvm/blob/02fbaf0ed9120a8f95155e63de42459f230584aa/python/tvm/relay/qnn/op/legalizations.py#L384-L388\r\n\r\nWe should default to this schedule if the architecture is not `is_aarch64_arm()` and not `\"+neon\" in target.mattr`, something like:\r\n```python\r\n@qnn_dense_legalize.register(\"arm_cpu\")\r\ndef _qnn_dense_legalize_arm_cpu(attrs, inputs, types):\r\n    # Advanced SIMD present and no dot product extension\r\n    if (is_aarch64_arm() or \"+neon\" in target.mattr) and not is_fast_int8_on_arm():\r\n        return helper_no_fast_int8_hw_legalization(attrs, inputs, types, relay.nn.dense)\r\n    return helper_change_dtypes_to_be_same(attrs, inputs, types, relay.qnn.op.dense)\r\n```\r\n\r\nWhich would be the schedule you've suggested, as the default schedule for the Arm architecture.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920936729/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920961268","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-920961268","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":920961268,"node_id":"IC_kwDOBDeBdM425MD0","user":{"login":"echuraev","id":5525113,"node_id":"MDQ6VXNlcjU1MjUxMTM=","avatar_url":"https://avatars.githubusercontent.com/u/5525113?v=4","gravatar_id":"","url":"https://api.github.com/users/echuraev","html_url":"https://github.com/echuraev","followers_url":"https://api.github.com/users/echuraev/followers","following_url":"https://api.github.com/users/echuraev/following{/other_user}","gists_url":"https://api.github.com/users/echuraev/gists{/gist_id}","starred_url":"https://api.github.com/users/echuraev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/echuraev/subscriptions","organizations_url":"https://api.github.com/users/echuraev/orgs","repos_url":"https://api.github.com/users/echuraev/repos","events_url":"https://api.github.com/users/echuraev/events{/privacy}","received_events_url":"https://api.github.com/users/echuraev/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T14:37:43Z","updated_at":"2021-09-16T14:37:43Z","author_association":"CONTRIBUTOR","body":"@shingjan please take a look on this PR. After #8492 the tuning doesn't work in proper way. It hangs. The problem is in the resources management and global dictionary with arguments. The issue is that global arguments don't release managed resources, and the RPC hangs till they won't be released.\r\nI don't know why you added `args` as an argument to `_timed_eval_func` and `_rpc_run`?\r\nWith this fix, we don't have this hang during tuning.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/920961268/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921004809","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-921004809","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":921004809,"node_id":"IC_kwDOBDeBdM425WsJ","user":{"login":"vinx13","id":7195739,"node_id":"MDQ6VXNlcjcxOTU3Mzk=","avatar_url":"https://avatars.githubusercontent.com/u/7195739?v=4","gravatar_id":"","url":"https://api.github.com/users/vinx13","html_url":"https://github.com/vinx13","followers_url":"https://api.github.com/users/vinx13/followers","following_url":"https://api.github.com/users/vinx13/following{/other_user}","gists_url":"https://api.github.com/users/vinx13/gists{/gist_id}","starred_url":"https://api.github.com/users/vinx13/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vinx13/subscriptions","organizations_url":"https://api.github.com/users/vinx13/orgs","repos_url":"https://api.github.com/users/vinx13/repos","events_url":"https://api.github.com/users/vinx13/events{/privacy}","received_events_url":"https://api.github.com/users/vinx13/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T15:28:30Z","updated_at":"2021-09-16T15:29:13Z","author_association":"MEMBER","body":"`args` was added because some workloads like sparse require predefined inputs that shouldn’t be randomly generated. These inputs are looked up from a global dictionary that won’t be propagated to popen workers. Therefore we get these predefined arguments from main process and passed it through the workers. Is the hang related to this global dictionary? With this PR I’m afraid this lookup won’t work because it is called from the worker side. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921004809/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921032101","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-921032101","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":921032101,"node_id":"IC_kwDOBDeBdM425dWl","user":{"login":"echuraev","id":5525113,"node_id":"MDQ6VXNlcjU1MjUxMTM=","avatar_url":"https://avatars.githubusercontent.com/u/5525113?v=4","gravatar_id":"","url":"https://api.github.com/users/echuraev","html_url":"https://github.com/echuraev","followers_url":"https://api.github.com/users/echuraev/followers","following_url":"https://api.github.com/users/echuraev/following{/other_user}","gists_url":"https://api.github.com/users/echuraev/gists{/gist_id}","starred_url":"https://api.github.com/users/echuraev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/echuraev/subscriptions","organizations_url":"https://api.github.com/users/echuraev/orgs","repos_url":"https://api.github.com/users/echuraev/repos","events_url":"https://api.github.com/users/echuraev/events{/privacy}","received_events_url":"https://api.github.com/users/echuraev/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T16:02:27Z","updated_at":"2021-09-16T16:15:35Z","author_association":"CONTRIBUTOR","body":"> `args` was added because some workloads like sparse require predefined inputs that shouldn’t be randomly generated. These inputs are looked up from a global dictionary that won’t be propagated to popen workers. Therefore we get these predefined arguments from main process and passed it through the workers. Is the hang related to this global dictionary? With this PR I’m afraid this lookup won’t work because it is called from the worker side.\r\n\r\nYes, the hang related to the global dictionary. In this case I have another workaround how to fix the hang. In the `_rpc_run` and `_timed_eval_func` we can create a copy of global arguments and work with them. In this case it will work, I already tested it. I mean to do something like this:\r\n```diff\r\n            assert len(args) == len(build_res.args)\r\n+          import copy\r\n+          loc_args = copy.deepcopy(args)\r\n            # pylint: disable=consider-using-enumerate\r\n-            for idx in range(len(args)):\r\n-                if args[idx] is None:\r\n+            for idx in range(len(loc_args)):\r\n+                if loc_args[idx] is None:\r\n                    build_res_arg = build_res.args[idx]\r\n                    empty_array = ndarray.empty(\r\n                        get_const_tuple(build_res_arg.shape), build_res_arg.dtype, dev\r\n                    )\r\n                    random_fill(empty_array)\r\n-                    args[idx] = empty_array\r\n+                    loc_args[idx] = empty_array\r\n                else:\r\n-                    args[idx] = ndarray.array(args[idx], dev)\r\n+                    args[idx] = ndarray.array(args[idx], dev)\r\n```\r\n\r\nI don't need this workaround due to it is necessary to do a deep copy of arguments. What do you think about it?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921032101/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921036873","html_url":"https://github.com/apache/tvm/pull/9028#issuecomment-921036873","issue_url":"https://api.github.com/repos/apache/tvm/issues/9028","id":921036873,"node_id":"IC_kwDOBDeBdM425ehJ","user":{"login":"tmoreau89","id":5974488,"node_id":"MDQ6VXNlcjU5NzQ0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5974488?v=4","gravatar_id":"","url":"https://api.github.com/users/tmoreau89","html_url":"https://github.com/tmoreau89","followers_url":"https://api.github.com/users/tmoreau89/followers","following_url":"https://api.github.com/users/tmoreau89/following{/other_user}","gists_url":"https://api.github.com/users/tmoreau89/gists{/gist_id}","starred_url":"https://api.github.com/users/tmoreau89/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmoreau89/subscriptions","organizations_url":"https://api.github.com/users/tmoreau89/orgs","repos_url":"https://api.github.com/users/tmoreau89/repos","events_url":"https://api.github.com/users/tmoreau89/events{/privacy}","received_events_url":"https://api.github.com/users/tmoreau89/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T16:08:22Z","updated_at":"2021-09-16T16:08:22Z","author_association":"CONTRIBUTOR","body":"CC - @anwang2009 @mbrookhart @AndrewZhaoLuo","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921036873/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921037478","html_url":"https://github.com/apache/tvm/pull/8636#issuecomment-921037478","issue_url":"https://api.github.com/repos/apache/tvm/issues/8636","id":921037478,"node_id":"IC_kwDOBDeBdM425eqm","user":{"login":"jwfromm","id":9874242,"node_id":"MDQ6VXNlcjk4NzQyNDI=","avatar_url":"https://avatars.githubusercontent.com/u/9874242?v=4","gravatar_id":"","url":"https://api.github.com/users/jwfromm","html_url":"https://github.com/jwfromm","followers_url":"https://api.github.com/users/jwfromm/followers","following_url":"https://api.github.com/users/jwfromm/following{/other_user}","gists_url":"https://api.github.com/users/jwfromm/gists{/gist_id}","starred_url":"https://api.github.com/users/jwfromm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jwfromm/subscriptions","organizations_url":"https://api.github.com/users/jwfromm/orgs","repos_url":"https://api.github.com/users/jwfromm/repos","events_url":"https://api.github.com/users/jwfromm/events{/privacy}","received_events_url":"https://api.github.com/users/jwfromm/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T16:09:09Z","updated_at":"2021-09-16T16:09:09Z","author_association":"CONTRIBUTOR","body":"@jcf94 can you please take another look at this? It's currently being blocked by your request for changes.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921037478/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921044001","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921044001","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921044001,"node_id":"IC_kwDOBDeBdM425gQh","user":{"login":"manupak","id":61496855,"node_id":"MDQ6VXNlcjYxNDk2ODU1","avatar_url":"https://avatars.githubusercontent.com/u/61496855?v=4","gravatar_id":"","url":"https://api.github.com/users/manupak","html_url":"https://github.com/manupak","followers_url":"https://api.github.com/users/manupak/followers","following_url":"https://api.github.com/users/manupak/following{/other_user}","gists_url":"https://api.github.com/users/manupak/gists{/gist_id}","starred_url":"https://api.github.com/users/manupak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manupak/subscriptions","organizations_url":"https://api.github.com/users/manupak/orgs","repos_url":"https://api.github.com/users/manupak/repos","events_url":"https://api.github.com/users/manupak/events{/privacy}","received_events_url":"https://api.github.com/users/manupak/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T16:17:51Z","updated_at":"2021-09-16T16:17:51Z","author_association":"CONTRIBUTOR","body":"Thanks @tqchen for summarizing the ideas and presenting possible resolutions.\r\n\r\nThe two needs seems very valid.\r\n\r\nFor N0, The operators should really be tagged with 'local' storage scope for the needs of N0 as they are quite local to the operator primfunc and they benefit of further optimizations within and beyond TVM -- i.e. follow up C compiler / LLVM.\r\n\r\nFor N1, we could use the 'global' tag to give the responsibility for the application/runtime layer to service the allocation.\r\n\r\nTherefore, the actual fix should have been tagging the allocates that are expected to be optimized to be 'local' to the PrimFunc, rather than making the 'global' allocates to CPU being treated as local.\r\n\r\n> N0 is needed to get best performing kernel, since a native way of allocation\r\nthat can be understood by the compiler would give the best chance for followup\r\noptimizations. This is the case for CPU related optimizations. Note that such\r\noptimization is also needed for micro setting, when we use TIR to generate kernel\r\ncode that requested a temp scracth memory for output tiling.\r\n\r\nI feel we are incorrectly tagging the storage_scopes here. They should really be 'local' for this specific usecase.\r\n\r\n> First of all, R0 and R1 are not that different in nature. Both tries to introduce two separate scopes that brings different behavior. The main questions boils down to how can we name the \"global\" scope.\r\n\r\nIn the solution R1, I still that as a workaround for incorrect treatment of 'global' scoped memories where we create an override of an actual 'global' what we declare as 'global.workspace'. In shared memory SoCs, it would be un-scalable explosion of tags if we want to keep tagging memories for devices which have access to them. I would think we'd want to treat memories to devices having a many-to-many relationship.\r\n\r\nThe lowering we had until few days back was general enough so they were serviced by a runtime/application layer routine and that were more aligned with what we call as 'global' (with respect to codegen) scoped storage.\r\n\r\n> Per allocate semantics, we treats \"global\" as normal CPU memory which can come from stack or platform specific allocation\r\n\r\nCan you explain what you define as 'normal CPU memory' ? A CPU can technically have access to many memories.\r\n\r\n> However, the need N0 would favor stack allocation when possible. Note that we will likely need a related behavior for micro devices as well when generating operator kernels.\r\n\r\nIt would have been nice to have a RFC (Apologize in advance if I missed this if there was a one already) to discuss before we move from TVMBAW style allocation which I find more generic than just stack allocations. It almost feel the schedules should have tagged them 'local' if this was the expectation rather than assuming a combined logic : 'global' and CPU.\r\n\r\n> One possible approach is to try to ask user to differentiate these two kinds of allocations.\r\n\r\nWouldn't it be simpler if tag allocations for N0 to be 'local' and N1 to be 'global' ?\r\n\r\n> N2: Allocating memory with special semantics. For example, an unified device pinned memory that is accessible from both NPU and CPU. A specialized texture memory or shared memory. The request in N2 is quite different and brings additional requirement to how we allocate the memory and how the memory can be used and represented in codegen.\r\n\r\nIts a memory where multiple Target have access to which the runtime/application could provide via TVMBAW with a specialized global.<pool_name>.\r\n\r\n> It is important to do this because the compiler makes no assumption that \"global\" can be accessed by other types of devices.\r\n\r\nHmmmm, this argument seems counter-intuitive to me. I think we should assume the 'global' to be accessible unless they are explicitly specified to be restricted. i.e. global.<pool_name>. Otherwise, the terminology is confusing.\r\n\r\n> \r\n    R0: Separate out a \"local\" scope that carries the stack allocation heavior. (proposed by @manupa-arm )\r\n    R1: Keep \"global\" scope as it is, introduce a special tagged scope \"global.workspace\"\r\n    that represents a global memory request specifically for workspace memory.\r\n    And introduce lowerings for them. For specialized memory(e.g. NPU unified), introduce\r\n    separate memory scopes.\r\n    R3: Introduce target specific attribute that marks the possible stack alloca size for\r\n    lowering the R0(\"local\") or R1(\"global\"). Note R3 can be done in addition to R0 or R1.\r\n\r\nIdeally, the allocates destined to be end up in stack should have been 'local'. Moreover, at which point we can decide not to tag allocates that exceed the target specific attribute rather than dealing this in the codegen or lower_builtin_tvm pass.\r\n\r\nI would propose :\r\n\r\nR4 : R0 + I think its cleaner if we just introduce a optional pass to tag memories with 'local'. At which point, we should only tag them according to the target specific attribute max stack alloca size -- that could work until we fix the schedules that wants them in stack to have 'local' storage scope for the need N0 -- that is a conscious decision the schedule writer / autoscheduler takes.\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921044001/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921047912","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-921047912","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":921047912,"node_id":"IC_kwDOBDeBdM425hNo","user":{"login":"vinx13","id":7195739,"node_id":"MDQ6VXNlcjcxOTU3Mzk=","avatar_url":"https://avatars.githubusercontent.com/u/7195739?v=4","gravatar_id":"","url":"https://api.github.com/users/vinx13","html_url":"https://github.com/vinx13","followers_url":"https://api.github.com/users/vinx13/followers","following_url":"https://api.github.com/users/vinx13/following{/other_user}","gists_url":"https://api.github.com/users/vinx13/gists{/gist_id}","starred_url":"https://api.github.com/users/vinx13/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vinx13/subscriptions","organizations_url":"https://api.github.com/users/vinx13/orgs","repos_url":"https://api.github.com/users/vinx13/repos","events_url":"https://api.github.com/users/vinx13/events{/privacy}","received_events_url":"https://api.github.com/users/vinx13/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T16:23:25Z","updated_at":"2021-09-16T16:23:25Z","author_association":"MEMBER","body":"Sorry I’m a bit confused. Is it because `args` not being properly managed? It should be a python array with numpy ndarray as elements. It will be pickled and sent to workers and then be unpickled. Do you know exactly what resource is not freed?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921047912/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921056388","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-921056388","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":921056388,"node_id":"IC_kwDOBDeBdM425jSE","user":{"login":"echuraev","id":5525113,"node_id":"MDQ6VXNlcjU1MjUxMTM=","avatar_url":"https://avatars.githubusercontent.com/u/5525113?v=4","gravatar_id":"","url":"https://api.github.com/users/echuraev","html_url":"https://github.com/echuraev","followers_url":"https://api.github.com/users/echuraev/followers","following_url":"https://api.github.com/users/echuraev/following{/other_user}","gists_url":"https://api.github.com/users/echuraev/gists{/gist_id}","starred_url":"https://api.github.com/users/echuraev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/echuraev/subscriptions","organizations_url":"https://api.github.com/users/echuraev/orgs","repos_url":"https://api.github.com/users/echuraev/repos","events_url":"https://api.github.com/users/echuraev/events{/privacy}","received_events_url":"https://api.github.com/users/echuraev/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T16:35:03Z","updated_at":"2021-09-16T16:35:03Z","author_association":"CONTRIBUTOR","body":"> Is it because `args` not being properly managed?\r\n\r\nI think so. In case when the `args` is a global dictionary then during the tuning some object hold the `rpc_endpoint` and we cannot destroy it. This is why this hang happens.\r\n\r\n> Do you know exactly what resource is not freed?\r\n\r\nI tried to find the exact resource which hold the resources and leads to hang. But didn't find it. Now I thought about it and I suppose it can be the empty ndarrays which were created. But I have to check it. Maybe the good solution will be to regenerate such arguments which were not predefined for each run.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921056388/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921088786","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-921088786","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":921088786,"node_id":"IC_kwDOBDeBdM425rMS","user":{"login":"vinx13","id":7195739,"node_id":"MDQ6VXNlcjcxOTU3Mzk=","avatar_url":"https://avatars.githubusercontent.com/u/7195739?v=4","gravatar_id":"","url":"https://api.github.com/users/vinx13","html_url":"https://github.com/vinx13","followers_url":"https://api.github.com/users/vinx13/followers","following_url":"https://api.github.com/users/vinx13/following{/other_user}","gists_url":"https://api.github.com/users/vinx13/gists{/gist_id}","starred_url":"https://api.github.com/users/vinx13/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vinx13/subscriptions","organizations_url":"https://api.github.com/users/vinx13/orgs","repos_url":"https://api.github.com/users/vinx13/repos","events_url":"https://api.github.com/users/vinx13/events{/privacy}","received_events_url":"https://api.github.com/users/vinx13/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T17:22:14Z","updated_at":"2021-09-16T17:26:28Z","author_association":"MEMBER","body":"> But I have to check it. Maybe the good solution will be to regenerate such arguments which were not predefined for each run.\r\n\r\nI think this is already the case. Currently, in the main process side, we look up the dictionary via `prepare_runner_args`, which  create an python array of arguments that only contains predefined args (these args are converted to numpy array to make them pickable). For those not predefined, `None` is added to that array as a placeholder. Then, this array is sent to workers. In each worker, it replaces `None` with randomly generated `tvm.ndarray`.\r\nEmpty arrays created in `timed_rpc_run` should be destroy after running the program in the device.\r\nAlso if you can provide steps to reproduce it I can definitely take a look","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921088786/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921095159","html_url":"https://github.com/apache/tvm/issues/8717#issuecomment-921095159","issue_url":"https://api.github.com/repos/apache/tvm/issues/8717","id":921095159,"node_id":"IC_kwDOBDeBdM425sv3","user":{"login":"areusch","id":532957,"node_id":"MDQ6VXNlcjUzMjk1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/532957?v=4","gravatar_id":"","url":"https://api.github.com/users/areusch","html_url":"https://github.com/areusch","followers_url":"https://api.github.com/users/areusch/followers","following_url":"https://api.github.com/users/areusch/following{/other_user}","gists_url":"https://api.github.com/users/areusch/gists{/gist_id}","starred_url":"https://api.github.com/users/areusch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areusch/subscriptions","organizations_url":"https://api.github.com/users/areusch/orgs","repos_url":"https://api.github.com/users/areusch/repos","events_url":"https://api.github.com/users/areusch/events{/privacy}","received_events_url":"https://api.github.com/users/areusch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T17:31:32Z","updated_at":"2021-09-16T17:31:32Z","author_association":"CONTRIBUTOR","body":"Adding a pointer to the implementation: https://github.com/sergey-grovety/tvm/commit/6d7bdaa3dd3c5077d9efdc57c691987df6bc9cfa","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921095159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921095868","html_url":"https://github.com/apache/tvm/pull/9016#issuecomment-921095868","issue_url":"https://api.github.com/repos/apache/tvm/issues/9016","id":921095868,"node_id":"IC_kwDOBDeBdM425s68","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T17:32:32Z","updated_at":"2021-09-16T17:32:32Z","author_association":"MEMBER","body":"CC @spectrometerHBH @tqchen @Hzfengsy would you guys review this patch? ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921095868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921111599","html_url":"https://github.com/apache/tvm/pull/9023#issuecomment-921111599","issue_url":"https://api.github.com/repos/apache/tvm/issues/9023","id":921111599,"node_id":"IC_kwDOBDeBdM425wwv","user":{"login":"AndrewZhaoLuo","id":13855451,"node_id":"MDQ6VXNlcjEzODU1NDUx","avatar_url":"https://avatars.githubusercontent.com/u/13855451?v=4","gravatar_id":"","url":"https://api.github.com/users/AndrewZhaoLuo","html_url":"https://github.com/AndrewZhaoLuo","followers_url":"https://api.github.com/users/AndrewZhaoLuo/followers","following_url":"https://api.github.com/users/AndrewZhaoLuo/following{/other_user}","gists_url":"https://api.github.com/users/AndrewZhaoLuo/gists{/gist_id}","starred_url":"https://api.github.com/users/AndrewZhaoLuo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndrewZhaoLuo/subscriptions","organizations_url":"https://api.github.com/users/AndrewZhaoLuo/orgs","repos_url":"https://api.github.com/users/AndrewZhaoLuo/repos","events_url":"https://api.github.com/users/AndrewZhaoLuo/events{/privacy}","received_events_url":"https://api.github.com/users/AndrewZhaoLuo/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T17:55:30Z","updated_at":"2021-09-16T17:55:30Z","author_association":"CONTRIBUTOR","body":"> I think I sort of understand the usecase here: some negative indices are not known to be negative until in runtime. This forces us to defer the conversion from compile-time to runtime.\r\n> \r\n> On the other hand, I am not 100% sure if it is the best fix by adding a new argument in the public interface, given that in most cases indices are just positive and well in-range.\r\n> \r\n> I was thinking, if the issue comes from an importer, is it possible to add an operator like `normalize_indices`, mark it as `injective` which makes it fusible, so that there isn't architectural change in TE? What do you guys think?\r\n\r\nWe do have a `normalize_indices` on the relay level. I think a problem though is the format might be slightly different so you would need a few different implementations. For example take tf's gather vs gather_nd. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921111599/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921134533","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921134533","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921134533,"node_id":"IC_kwDOBDeBdM4252XF","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T18:15:25Z","updated_at":"2021-09-16T18:15:34Z","author_association":"MEMBER","body":"Thanks @manupa-arm . Trying to capture some of the discussions.\r\n\r\n- Right now the \"global\" scope translate to something that can be accessed by CPU, and there was no requirement of allocating from TVMBAW. This is consistent with allocate node for other kinds of scopes as well, such as shared memory in a GPU. \r\n-  I can understand the general proposal R4: \"global\" to \"local\" would introduce a semantic change of the \"global\" scope, and can cause backward compatibility issues.\r\n\r\nThe main reason I would suggest R1 is because this is a backward compatible change(no changes to topi and other libraries needed). Additionally, it reduces the users' mental cost overall to think and choose another kind of memory.\r\nWhile I can totally get the other type of interpretation as well(by defining \"local\" to be stack allocation and \"global\" to be absolutely not), it is not the current intended semantics.\r\n\r\nNote that introducing an explicit tag for TVMBAW via \"global.workspace\" won't necessarily mean we need to introduce tags for all kinds of memory. It does places constraints on how this kind of memory can be allocated. So things can work out of box\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921134533/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921152468","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921152468","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921152468,"node_id":"IC_kwDOBDeBdM4256vU","user":{"login":"manupak","id":61496855,"node_id":"MDQ6VXNlcjYxNDk2ODU1","avatar_url":"https://avatars.githubusercontent.com/u/61496855?v=4","gravatar_id":"","url":"https://api.github.com/users/manupak","html_url":"https://github.com/manupak","followers_url":"https://api.github.com/users/manupak/followers","following_url":"https://api.github.com/users/manupak/following{/other_user}","gists_url":"https://api.github.com/users/manupak/gists{/gist_id}","starred_url":"https://api.github.com/users/manupak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manupak/subscriptions","organizations_url":"https://api.github.com/users/manupak/orgs","repos_url":"https://api.github.com/users/manupak/repos","events_url":"https://api.github.com/users/manupak/events{/privacy}","received_events_url":"https://api.github.com/users/manupak/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T18:43:30Z","updated_at":"2021-09-16T18:43:30Z","author_association":"CONTRIBUTOR","body":"Thanks @tqchen .\r\n\r\nIn the R4, I was not suggesting to change TOPI but saying we could just do a Pass to change the storage scope. What are your thoughts about making the pass to make the storage_scope 'global.stack' after the pass? This should be backward compatible as it just performs an explicit specialization transparently in the IR. We could even do the max alloca size check in this particular pass.\r\n\r\nThis makes it much clear and specific. Moreover, global.stack will not require further specialization unlike global.workspace where we would want to choose between multiple workspace buffers. The reason being I'd like to keep the tag to denote between global memories the compute devices have access to.\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921152468/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921201575","html_url":"https://github.com/apache/tvm/pull/9033#issuecomment-921201575","issue_url":"https://api.github.com/repos/apache/tvm/issues/9033","id":921201575,"node_id":"IC_kwDOBDeBdM426Gun","user":{"login":"kparzysz-quic","id":48801706,"node_id":"MDQ6VXNlcjQ4ODAxNzA2","avatar_url":"https://avatars.githubusercontent.com/u/48801706?v=4","gravatar_id":"","url":"https://api.github.com/users/kparzysz-quic","html_url":"https://github.com/kparzysz-quic","followers_url":"https://api.github.com/users/kparzysz-quic/followers","following_url":"https://api.github.com/users/kparzysz-quic/following{/other_user}","gists_url":"https://api.github.com/users/kparzysz-quic/gists{/gist_id}","starred_url":"https://api.github.com/users/kparzysz-quic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kparzysz-quic/subscriptions","organizations_url":"https://api.github.com/users/kparzysz-quic/orgs","repos_url":"https://api.github.com/users/kparzysz-quic/repos","events_url":"https://api.github.com/users/kparzysz-quic/events{/privacy}","received_events_url":"https://api.github.com/users/kparzysz-quic/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T19:55:49Z","updated_at":"2021-09-16T19:55:49Z","author_association":"CONTRIBUTOR","body":"@csullivan : This could fix the signature verification error you were seeing.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921201575/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921207626","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921207626","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921207626,"node_id":"IC_kwDOBDeBdM426INK","user":{"login":"mbs-octoml","id":87091372,"node_id":"MDQ6VXNlcjg3MDkxMzcy","avatar_url":"https://avatars.githubusercontent.com/u/87091372?v=4","gravatar_id":"","url":"https://api.github.com/users/mbs-octoml","html_url":"https://github.com/mbs-octoml","followers_url":"https://api.github.com/users/mbs-octoml/followers","following_url":"https://api.github.com/users/mbs-octoml/following{/other_user}","gists_url":"https://api.github.com/users/mbs-octoml/gists{/gist_id}","starred_url":"https://api.github.com/users/mbs-octoml/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbs-octoml/subscriptions","organizations_url":"https://api.github.com/users/mbs-octoml/orgs","repos_url":"https://api.github.com/users/mbs-octoml/repos","events_url":"https://api.github.com/users/mbs-octoml/events{/privacy}","received_events_url":"https://api.github.com/users/mbs-octoml/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T20:05:42Z","updated_at":"2021-09-16T20:05:57Z","author_association":"CONTRIBUTOR","body":"plus @csullivan who also needs finer grained scopes \r\nCan someone explain how the current Stage scope, which ends up in ProducerRealize nodes, would be coherent with the Allocate scope?\r\n@manupa-arm if you wanted to unblock EthosU today you could make the kMaxStackAlloca heuristic Target defined. That could buy us time to tackle scopes properly.\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921207626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921220669","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921220669","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921220669,"node_id":"IC_kwDOBDeBdM426LY9","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T20:26:07Z","updated_at":"2021-09-16T20:32:52Z","author_association":"MEMBER","body":"Thanks @manupa-arm . I understand that proposal R4 can also work by having a pass to convert \"global\" to something more specialize as a pass (essentially R1 and R4 are not that different except for different choices of scope names).\r\n\r\nThe main question is what is the semantics around the scope \"global\". Each memory scope represent a \"constraint\" of what kind of memory it is. \r\n\r\nRight now, when the device type is CPU,  \"global\" means any memory that can be accessed by the host cpu. This means the actual implement can come from include TVMBAW, memory from stack, or memory allocated by other means. While a memory allocated by TVMBAW can have other benefit(e.g. accessible by other devices because it is pinned), it is not the constraint specified by the \"global\" scope.\r\n\r\nWe can of course further constraint the setting, to be say \"global.workspace\", that reduces the possible ways to allocate the memory, but still not preclude from choosing between multiple workspace buffers.\r\n\r\nSo from semantics point of view. The pass can indeed choose to return \"global\" or rewrite to \"global.stack\" to ensure it is a stack allocation. But if the scope remains \"global\", we should not preclude the possibility for downstream from allocating from stack(the code generator should be able to choose any kind that satisfies the constraint). To say it in another way, we cannot say that \"global\" definitely mean no stack allocation.\r\n\r\nIf the code needs to impose additional constraint that the memory must be accessible from a separate device(e.g. NPU), it certainly would require a more specialized constraint that is better spelled out explicitly. \r\n\r\nAs we can see that this is another kind of flexibility we want to enable here -- flexibility of picking possible backend allocation implementations without over constraining the code generator to a backend specific behavior that is platform dependent (like the case of pinned memory)","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921220669/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921233630","html_url":"https://github.com/apache/tvm/pull/9028#issuecomment-921233630","issue_url":"https://api.github.com/repos/apache/tvm/issues/9028","id":921233630,"node_id":"IC_kwDOBDeBdM426Oje","user":{"login":"mbrookhart","id":4065489,"node_id":"MDQ6VXNlcjQwNjU0ODk=","avatar_url":"https://avatars.githubusercontent.com/u/4065489?v=4","gravatar_id":"","url":"https://api.github.com/users/mbrookhart","html_url":"https://github.com/mbrookhart","followers_url":"https://api.github.com/users/mbrookhart/followers","following_url":"https://api.github.com/users/mbrookhart/following{/other_user}","gists_url":"https://api.github.com/users/mbrookhart/gists{/gist_id}","starred_url":"https://api.github.com/users/mbrookhart/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbrookhart/subscriptions","organizations_url":"https://api.github.com/users/mbrookhart/orgs","repos_url":"https://api.github.com/users/mbrookhart/repos","events_url":"https://api.github.com/users/mbrookhart/events{/privacy}","received_events_url":"https://api.github.com/users/mbrookhart/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T20:47:28Z","updated_at":"2021-09-16T20:47:28Z","author_association":"CONTRIBUTOR","body":"The de-quantize change did cause those tests to fail in CI. I think we need a better solution there, but otherwise, it looks good.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921233630/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921271385","html_url":"https://github.com/apache/tvm/pull/9030#issuecomment-921271385","issue_url":"https://api.github.com/repos/apache/tvm/issues/9030","id":921271385,"node_id":"IC_kwDOBDeBdM426XxZ","user":{"login":"comaniac","id":8262694,"node_id":"MDQ6VXNlcjgyNjI2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/8262694?v=4","gravatar_id":"","url":"https://api.github.com/users/comaniac","html_url":"https://github.com/comaniac","followers_url":"https://api.github.com/users/comaniac/followers","following_url":"https://api.github.com/users/comaniac/following{/other_user}","gists_url":"https://api.github.com/users/comaniac/gists{/gist_id}","starred_url":"https://api.github.com/users/comaniac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/comaniac/subscriptions","organizations_url":"https://api.github.com/users/comaniac/orgs","repos_url":"https://api.github.com/users/comaniac/repos","events_url":"https://api.github.com/users/comaniac/events{/privacy}","received_events_url":"https://api.github.com/users/comaniac/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T21:34:24Z","updated_at":"2021-09-16T21:34:24Z","author_association":"CONTRIBUTOR","body":"Thanks @masahi @vinx13 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921271385/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921300444","html_url":"https://github.com/apache/tvm/pull/9012#issuecomment-921300444","issue_url":"https://api.github.com/repos/apache/tvm/issues/9012","id":921300444,"node_id":"IC_kwDOBDeBdM426e3c","user":{"login":"mbs-octoml","id":87091372,"node_id":"MDQ6VXNlcjg3MDkxMzcy","avatar_url":"https://avatars.githubusercontent.com/u/87091372?v=4","gravatar_id":"","url":"https://api.github.com/users/mbs-octoml","html_url":"https://github.com/mbs-octoml","followers_url":"https://api.github.com/users/mbs-octoml/followers","following_url":"https://api.github.com/users/mbs-octoml/following{/other_user}","gists_url":"https://api.github.com/users/mbs-octoml/gists{/gist_id}","starred_url":"https://api.github.com/users/mbs-octoml/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbs-octoml/subscriptions","organizations_url":"https://api.github.com/users/mbs-octoml/orgs","repos_url":"https://api.github.com/users/mbs-octoml/repos","events_url":"https://api.github.com/users/mbs-octoml/events{/privacy}","received_events_url":"https://api.github.com/users/mbs-octoml/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T22:25:01Z","updated_at":"2021-09-16T22:25:01Z","author_association":"CONTRIBUTOR","body":"PTAL.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921300444/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921318067","html_url":"https://github.com/apache/tvm/pull/9017#issuecomment-921318067","issue_url":"https://api.github.com/repos/apache/tvm/issues/9017","id":921318067,"node_id":"IC_kwDOBDeBdM426jKz","user":{"login":"mbrookhart","id":4065489,"node_id":"MDQ6VXNlcjQwNjU0ODk=","avatar_url":"https://avatars.githubusercontent.com/u/4065489?v=4","gravatar_id":"","url":"https://api.github.com/users/mbrookhart","html_url":"https://github.com/mbrookhart","followers_url":"https://api.github.com/users/mbrookhart/followers","following_url":"https://api.github.com/users/mbrookhart/following{/other_user}","gists_url":"https://api.github.com/users/mbrookhart/gists{/gist_id}","starred_url":"https://api.github.com/users/mbrookhart/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbrookhart/subscriptions","organizations_url":"https://api.github.com/users/mbrookhart/orgs","repos_url":"https://api.github.com/users/mbrookhart/repos","events_url":"https://api.github.com/users/mbrookhart/events{/privacy}","received_events_url":"https://api.github.com/users/mbrookhart/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-16T22:58:08Z","updated_at":"2021-09-16T22:58:08Z","author_association":"CONTRIBUTOR","body":"Thanks @quic-sanirudh @anwang2009 @AndrewZhaoLuo ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921318067/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921370695","html_url":"https://github.com/apache/tvm/issues/8505#issuecomment-921370695","issue_url":"https://api.github.com/repos/apache/tvm/issues/8505","id":921370695,"node_id":"IC_kwDOBDeBdM426wBH","user":{"login":"lazycal","id":7333325,"node_id":"MDQ6VXNlcjczMzMzMjU=","avatar_url":"https://avatars.githubusercontent.com/u/7333325?v=4","gravatar_id":"","url":"https://api.github.com/users/lazycal","html_url":"https://github.com/lazycal","followers_url":"https://api.github.com/users/lazycal/followers","following_url":"https://api.github.com/users/lazycal/following{/other_user}","gists_url":"https://api.github.com/users/lazycal/gists{/gist_id}","starred_url":"https://api.github.com/users/lazycal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lazycal/subscriptions","organizations_url":"https://api.github.com/users/lazycal/orgs","repos_url":"https://api.github.com/users/lazycal/repos","events_url":"https://api.github.com/users/lazycal/events{/privacy}","received_events_url":"https://api.github.com/users/lazycal/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T01:06:24Z","updated_at":"2021-09-17T01:06:24Z","author_association":"CONTRIBUTOR","body":"Closed as it's already fixed in this PR: https://github.com/apache/tvm/pull/9030","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921370695/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921412813","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921412813","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921412813,"node_id":"IC_kwDOBDeBdM4266TN","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T02:49:00Z","updated_at":"2021-09-17T02:50:35Z","author_association":"MEMBER","body":"> Can someone explain how the current Stage scope, which ends up in ProducerRealize nodes, would be coherent with the Allocate scope?\r\n\r\n@mbs-octoml The PR https://github.com/apache/tvm/pull/8366 I did might answer your question. The storage scope attached to `ProduceRealizeNode` is used to create `PointerType` and `Buffer`. `Allocate` node query the storage scope associated with its buffer variable `PointerType`. ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921412813/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921419859","html_url":"https://github.com/apache/tvm/pull/9033#issuecomment-921419859","issue_url":"https://api.github.com/repos/apache/tvm/issues/9033","id":921419859,"node_id":"IC_kwDOBDeBdM4268BT","user":{"login":"tmoreau89","id":5974488,"node_id":"MDQ6VXNlcjU5NzQ0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5974488?v=4","gravatar_id":"","url":"https://api.github.com/users/tmoreau89","html_url":"https://github.com/tmoreau89","followers_url":"https://api.github.com/users/tmoreau89/followers","following_url":"https://api.github.com/users/tmoreau89/following{/other_user}","gists_url":"https://api.github.com/users/tmoreau89/gists{/gist_id}","starred_url":"https://api.github.com/users/tmoreau89/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmoreau89/subscriptions","organizations_url":"https://api.github.com/users/tmoreau89/orgs","repos_url":"https://api.github.com/users/tmoreau89/repos","events_url":"https://api.github.com/users/tmoreau89/events{/privacy}","received_events_url":"https://api.github.com/users/tmoreau89/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T03:08:44Z","updated_at":"2021-09-17T03:08:44Z","author_association":"CONTRIBUTOR","body":"Thank you @kparzysz-quic @csullivan the PR has been merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921419859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921430240","html_url":"https://github.com/apache/tvm/issues/8838#issuecomment-921430240","issue_url":"https://api.github.com/repos/apache/tvm/issues/8838","id":921430240,"node_id":"IC_kwDOBDeBdM426-jg","user":{"login":"tmoreau89","id":5974488,"node_id":"MDQ6VXNlcjU5NzQ0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5974488?v=4","gravatar_id":"","url":"https://api.github.com/users/tmoreau89","html_url":"https://github.com/tmoreau89","followers_url":"https://api.github.com/users/tmoreau89/followers","following_url":"https://api.github.com/users/tmoreau89/following{/other_user}","gists_url":"https://api.github.com/users/tmoreau89/gists{/gist_id}","starred_url":"https://api.github.com/users/tmoreau89/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmoreau89/subscriptions","organizations_url":"https://api.github.com/users/tmoreau89/orgs","repos_url":"https://api.github.com/users/tmoreau89/repos","events_url":"https://api.github.com/users/tmoreau89/events{/privacy}","received_events_url":"https://api.github.com/users/tmoreau89/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T03:38:51Z","updated_at":"2021-09-17T03:38:51Z","author_association":"CONTRIBUTOR","body":"Thanks @arangasa - I've added it to the table! ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921430240/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921430465","html_url":"https://github.com/apache/tvm/issues/8838#issuecomment-921430465","issue_url":"https://api.github.com/repos/apache/tvm/issues/8838","id":921430465,"node_id":"IC_kwDOBDeBdM426-nB","user":{"login":"tmoreau89","id":5974488,"node_id":"MDQ6VXNlcjU5NzQ0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5974488?v=4","gravatar_id":"","url":"https://api.github.com/users/tmoreau89","html_url":"https://github.com/tmoreau89","followers_url":"https://api.github.com/users/tmoreau89/followers","following_url":"https://api.github.com/users/tmoreau89/following{/other_user}","gists_url":"https://api.github.com/users/tmoreau89/gists{/gist_id}","starred_url":"https://api.github.com/users/tmoreau89/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmoreau89/subscriptions","organizations_url":"https://api.github.com/users/tmoreau89/orgs","repos_url":"https://api.github.com/users/tmoreau89/repos","events_url":"https://api.github.com/users/tmoreau89/events{/privacy}","received_events_url":"https://api.github.com/users/tmoreau89/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T03:39:44Z","updated_at":"2021-09-17T03:39:44Z","author_association":"CONTRIBUTOR","body":"Also happy to share that `com.microsoft.QLinearGlobalAveragePool` and `com.microsoft.QLinearAveragePool` are supported, thanks @quic-sanirudh for the support","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921430465/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921535996","html_url":"https://github.com/apache/tvm/pull/9028#issuecomment-921535996","issue_url":"https://api.github.com/repos/apache/tvm/issues/9028","id":921535996,"node_id":"IC_kwDOBDeBdM427YX8","user":{"login":"arangasa","id":76030063,"node_id":"MDQ6VXNlcjc2MDMwMDYz","avatar_url":"https://avatars.githubusercontent.com/u/76030063?v=4","gravatar_id":"","url":"https://api.github.com/users/arangasa","html_url":"https://github.com/arangasa","followers_url":"https://api.github.com/users/arangasa/followers","following_url":"https://api.github.com/users/arangasa/following{/other_user}","gists_url":"https://api.github.com/users/arangasa/gists{/gist_id}","starred_url":"https://api.github.com/users/arangasa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arangasa/subscriptions","organizations_url":"https://api.github.com/users/arangasa/orgs","repos_url":"https://api.github.com/users/arangasa/repos","events_url":"https://api.github.com/users/arangasa/events{/privacy}","received_events_url":"https://api.github.com/users/arangasa/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T06:32:18Z","updated_at":"2021-09-17T12:40:43Z","author_association":"CONTRIBUTOR","body":"> The de-quantize change did cause those tests to fail in CI. I think we need a better solution there, but otherwise, it looks good.\r\n\r\nThank you, @mbrookhart , @anwang2009 , @masahi , @AndrewZhaoLuo for reviewing, catching the issue with this change, and for suggesting a solution. Updated the PR to address your comments.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921535996/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921682639","html_url":"https://github.com/apache/tvm/pull/8951#issuecomment-921682639","issue_url":"https://api.github.com/repos/apache/tvm/issues/8951","id":921682639,"node_id":"IC_kwDOBDeBdM4278LP","user":{"login":"Mousius","id":4933431,"node_id":"MDQ6VXNlcjQ5MzM0MzE=","avatar_url":"https://avatars.githubusercontent.com/u/4933431?v=4","gravatar_id":"","url":"https://api.github.com/users/Mousius","html_url":"https://github.com/Mousius","followers_url":"https://api.github.com/users/Mousius/followers","following_url":"https://api.github.com/users/Mousius/following{/other_user}","gists_url":"https://api.github.com/users/Mousius/gists{/gist_id}","starred_url":"https://api.github.com/users/Mousius/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mousius/subscriptions","organizations_url":"https://api.github.com/users/Mousius/orgs","repos_url":"https://api.github.com/users/Mousius/repos","events_url":"https://api.github.com/users/Mousius/events{/privacy}","received_events_url":"https://api.github.com/users/Mousius/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T10:17:40Z","updated_at":"2021-09-17T10:17:40Z","author_association":"MEMBER","body":"Hi @areusch, I acknowledge your questions but do we need to block the PR on them rather than moving forwards with the integration? I'm sure @ashutosh-arm will honourably follow up in a future PR in this series.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921682639/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921782373","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921782373","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921782373,"node_id":"IC_kwDOBDeBdM428Uhl","user":{"login":"manupak","id":61496855,"node_id":"MDQ6VXNlcjYxNDk2ODU1","avatar_url":"https://avatars.githubusercontent.com/u/61496855?v=4","gravatar_id":"","url":"https://api.github.com/users/manupak","html_url":"https://github.com/manupak","followers_url":"https://api.github.com/users/manupak/followers","following_url":"https://api.github.com/users/manupak/following{/other_user}","gists_url":"https://api.github.com/users/manupak/gists{/gist_id}","starred_url":"https://api.github.com/users/manupak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manupak/subscriptions","organizations_url":"https://api.github.com/users/manupak/orgs","repos_url":"https://api.github.com/users/manupak/repos","events_url":"https://api.github.com/users/manupak/events{/privacy}","received_events_url":"https://api.github.com/users/manupak/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T13:07:20Z","updated_at":"2021-09-17T13:10:46Z","author_association":"CONTRIBUTOR","body":"@tqchen ,\r\n\r\n> To say it in another way, we cannot say that \"global\" definitely mean no stack allocation.\r\n\r\nThe current issue is in the device \"CPU\" && 'global' certainly means its definitely stack allocation if its less that heuristic size and not the other way around.\r\n\r\n > If the code needs to impose additional constraint that the memory must be accessible from a separate device(e.g. NPU), it certainly would require a more specialized constraint that is better spelled out explicitly.\r\n\r\n> As we can see that this is another kind of flexibility we want to enable here -- flexibility of picking possible backend allocation implementations without over constraining the code generator to a backend specific behavior that is platform dependent (like the case of pinned memory\r\n\r\nYes this is something we want eventually and we will be working towards achieving with USMP work.\r\n\r\nUntil we have that, the natural assumption should be in absense of a 'constraint' that the memories are more accessible rather than being less accessible (e.g. stack). Its unfortunate that the current design prefers the latter especially in a absense of a constraint.\r\n\r\n@mbs-octoml ,\r\n\r\n### Short term solution :\r\nI think you are right, we might want to unblock this using a target-dependent kMaxStackAllocaSize. \r\n\r\nMay I ask why  was the default chosen to be this ?\r\nhttps://github.com/apache/tvm/blob/1fd8f610953adc39cbd18d82f4a9e92a11575dfc/include/tvm/runtime/device_api.h#L60-L61\r\n\r\nIts interesting because the stack size go up beyond that size as it is just looking on a single allocate at a time. i.e. you could have multiple allocates that are less than < 1024. So the stack usage is not even bounded by the current approach.\r\n\r\nTherefore, to both unlock us with Ethos-U and also somewhat solve the problem that current micro builds using stack for tensors < 1024 instead of the workspace buffer provided, maybe we should just make kMaxStackAllocaSize=0 (a binary decision rather than a value range).\r\n\r\n@Mousius @leandron @areusch , this means there is going to be another argument for a simple micro deployment to be added to the already long list of arguments. Something like \"--use-external-workspace\" ? \r\n\r\n@tqchen , I still feel it would have been super helpful that kMaxStackAllocaSize is by default zero but with the option of going higher based on a user argument. e.g. --max-stack-alloca-size=1024. It is not very convincing that we are leaving out stack allocation of tensors with the prospect of being optimized by mem2reg without doing any marking (i.e. special storage scope).\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921782373/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921787831","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-921787831","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":921787831,"node_id":"IC_kwDOBDeBdM428V23","user":{"login":"echuraev","id":5525113,"node_id":"MDQ6VXNlcjU1MjUxMTM=","avatar_url":"https://avatars.githubusercontent.com/u/5525113?v=4","gravatar_id":"","url":"https://api.github.com/users/echuraev","html_url":"https://github.com/echuraev","followers_url":"https://api.github.com/users/echuraev/followers","following_url":"https://api.github.com/users/echuraev/following{/other_user}","gists_url":"https://api.github.com/users/echuraev/gists{/gist_id}","starred_url":"https://api.github.com/users/echuraev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/echuraev/subscriptions","organizations_url":"https://api.github.com/users/echuraev/orgs","repos_url":"https://api.github.com/users/echuraev/repos","events_url":"https://api.github.com/users/echuraev/events{/privacy}","received_events_url":"https://api.github.com/users/echuraev/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T13:14:36Z","updated_at":"2021-09-17T13:14:36Z","author_association":"CONTRIBUTOR","body":"> Empty arrays created in timed_rpc_run should be destroy after running the program in the device.\r\n\r\nWho will guarantee that the arrays will be destroyed? We have a global variable which was passed to the function and in this function new arrays were created in this global dictionary. When the program was run in the device, these arrays won't be destroyed due to they are the part of global object. Or I'm wrong?\r\n\r\nI updated this PR with another fix for this problem. I just create a local copy of the arguments in `_rpc_run` and `_timed_eval_func`. In this case, then we go out of the function scope the local objects will be destroyed, and it guarantees to us that the arrays were destroyed.\r\n\r\nAnother workable fix is to set arguments to `None` after function execution. For example:\r\n```diff\r\n            assert len(args) == len(build_res.args)\r\n+            indices = []\r\n            # pylint: disable=consider-using-enumerate\r\n            for idx in range(len(args)):\r\n                if args[idx] is None:\r\n                    build_res_arg = build_res.args[idx]\r\n                    empty_array = ndarray.empty(\r\n                        get_const_tuple(build_res_arg.shape), build_res_arg.dtype, dev\r\n                    )\r\n                    random_fill(empty_array)\r\n+                    indices.append(idx)\r\n                    args[idx] = empty_array\r\n                else:\r\n                    args[idx] = ndarray.array(args[idx], dev)\r\n            dev.sync()\r\n\r\n            # First run for check that the kernel is correct\r\n            func.entry_func(*args)\r\n            dev.sync()\r\n\r\n            costs = time_f(*args).results\r\n\r\n+            for idx in indices:\r\n+                args[idx] = None\r\n```\r\n\r\nIn this case, the arrays also will be destroyed.\r\n\r\nWhat about steps to reproduce this issue:\r\n1. Run rpc_tracker\r\n2. Connect Android or iOS device to the tracker by using AndroidRPC or ios_rpc applications\r\n3. Run tuning session on this device after several trials the tuning will hang.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921787831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921793403","html_url":"https://github.com/apache/tvm/issues/8838#issuecomment-921793403","issue_url":"https://api.github.com/repos/apache/tvm/issues/8838","id":921793403,"node_id":"IC_kwDOBDeBdM428XN7","user":{"login":"quic-sanirudh","id":63797228,"node_id":"MDQ6VXNlcjYzNzk3MjI4","avatar_url":"https://avatars.githubusercontent.com/u/63797228?v=4","gravatar_id":"","url":"https://api.github.com/users/quic-sanirudh","html_url":"https://github.com/quic-sanirudh","followers_url":"https://api.github.com/users/quic-sanirudh/followers","following_url":"https://api.github.com/users/quic-sanirudh/following{/other_user}","gists_url":"https://api.github.com/users/quic-sanirudh/gists{/gist_id}","starred_url":"https://api.github.com/users/quic-sanirudh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/quic-sanirudh/subscriptions","organizations_url":"https://api.github.com/users/quic-sanirudh/orgs","repos_url":"https://api.github.com/users/quic-sanirudh/repos","events_url":"https://api.github.com/users/quic-sanirudh/events{/privacy}","received_events_url":"https://api.github.com/users/quic-sanirudh/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T13:22:25Z","updated_at":"2021-09-17T13:22:25Z","author_association":"CONTRIBUTOR","body":"@tmoreau89 Thanks for your help in reviewing the AveragePool op support quickly. Shall I pick up the com.microsoft.DynamicQuantizeMatMul op next to work on, if no one else has started working on that. If that's an urgently needed op, I can pick something else as well","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921793403/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921803740","html_url":"https://github.com/apache/tvm/pull/9012#issuecomment-921803740","issue_url":"https://api.github.com/repos/apache/tvm/issues/9012","id":921803740,"node_id":"IC_kwDOBDeBdM428Zvc","user":{"login":"mbs-octoml","id":87091372,"node_id":"MDQ6VXNlcjg3MDkxMzcy","avatar_url":"https://avatars.githubusercontent.com/u/87091372?v=4","gravatar_id":"","url":"https://api.github.com/users/mbs-octoml","html_url":"https://github.com/mbs-octoml","followers_url":"https://api.github.com/users/mbs-octoml/followers","following_url":"https://api.github.com/users/mbs-octoml/following{/other_user}","gists_url":"https://api.github.com/users/mbs-octoml/gists{/gist_id}","starred_url":"https://api.github.com/users/mbs-octoml/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbs-octoml/subscriptions","organizations_url":"https://api.github.com/users/mbs-octoml/orgs","repos_url":"https://api.github.com/users/mbs-octoml/repos","events_url":"https://api.github.com/users/mbs-octoml/events{/privacy}","received_events_url":"https://api.github.com/users/mbs-octoml/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T13:37:18Z","updated_at":"2021-09-17T13:37:18Z","author_association":"CONTRIBUTOR","body":"@huajsj @areusch PTAL, and CI is green :-)","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921803740/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921820526","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921820526","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921820526,"node_id":"IC_kwDOBDeBdM428d1u","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T14:00:42Z","updated_at":"2021-09-17T17:01:16Z","author_association":"MEMBER","body":"Please allow me to explain the overall rationale here, in particular over the term \"constraint\"\r\n\r\n- C0: On one hand, we want a \"default\" memory to be generically accessible (per @manupa-arm 's comment) in all cases so runtime libraries can be built to leverage the generic property(e.g. access from NPU).\r\n- C1: On the other hand, from compiler's POV, we want to leave flexibility to code optimizations and codegen phase, and only constraint on the property we want (e.g. accessible from CPU)\r\n\r\n## The two ways to see the constrainting\r\n\r\nThe way C0 sees the constaint is about the possible accessor of the memory\r\n- \"global\"=> memory can be accessed from {cpu, npu, other devices}\r\n- \"global.stack\" => memory can be accessed from { cpu }\r\n\r\nThe way C1 sees the constraint is about possible memories to choose from.\r\n- \"global\"(memory that is accessible from CPU) => can choose from {stack, TVMBAW, other allocators}\r\n- \"global.workspace\" => can choose from  { TVMBAW }\r\n- \"global.stack\" => can choose from  { stack }\r\n\r\n## Discussions\r\n\r\nWhen we say a compiler IR is more constrainted than another one. Usually we mean that less optimizations can be performed, because there is lack of flexibility in terms of rewriting. For example, `volatile` keyword puts additional constraints on memory access.\r\n\r\nThis makes C1 more aligned in the common compiler IR design. Note that \"memory that is accessible from all devices\" is term that depends on the specific runtime platform, and not very well defined in a generic IR. \r\nThe more constraints we put on the memory itself, the smaller set it can become. As a result, there are less opportunities\r\nof code transformations and optimizations.\r\n\r\nUnder the current semantics  \"CPU\" && \"global\" can result in stack allocation. Note that is is one kind of flexibility we want to offer to later stages so that specializations can be made.  \r\n\r\n- So yes it is indeed OK for a pass to map \"global\" to TVMBAW, the resulting program will run slower, but still correctly on CPU. \r\n- It also does not precldue TVMLowerBuiltin to take benefit of the semantics to choose stack allocation, which usually benefit performance. \r\n\r\nOne thing we should keep in mind is that the codegen and AOT compiler should not rely on the behavior of TVMLowerBuiltin to ensure correctness(since it can choose to do anything in the case of \"global\", including dispatching to another custom allocator). If a special kind of memory is needed, we should declare such constraint through IR. Attaching a special scope is the best way to do so under the current semantics, regardless of the implementation of TVMLowerBuiltin.\r\n\r\n\r\nTVMLowerBuiltin picks `kMaxStackAllocaSize` as a heuristic number that maximizes the benefit of stack allocation without overexploding the stack. Of course a better heuristic can be used, setting it default to 0 would bring down performance of a lot of CPU code so not as desirable. We could certainly have a target dependent property for micro target and set that to 0. It should be pretty easy to do as well, see https://github.com/apache/tvm/blob/main/src/tir/transforms/lower_warp_memory.cc#L392 that obtains a target dependent warp size \r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921820526/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921848437","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-921848437","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":921848437,"node_id":"IC_kwDOBDeBdM428kp1","user":{"login":"vinx13","id":7195739,"node_id":"MDQ6VXNlcjcxOTU3Mzk=","avatar_url":"https://avatars.githubusercontent.com/u/7195739?v=4","gravatar_id":"","url":"https://api.github.com/users/vinx13","html_url":"https://github.com/vinx13","followers_url":"https://api.github.com/users/vinx13/followers","following_url":"https://api.github.com/users/vinx13/following{/other_user}","gists_url":"https://api.github.com/users/vinx13/gists{/gist_id}","starred_url":"https://api.github.com/users/vinx13/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vinx13/subscriptions","organizations_url":"https://api.github.com/users/vinx13/orgs","repos_url":"https://api.github.com/users/vinx13/repos","events_url":"https://api.github.com/users/vinx13/events{/privacy}","received_events_url":"https://api.github.com/users/vinx13/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T14:36:10Z","updated_at":"2021-09-17T14:47:28Z","author_association":"MEMBER","body":"I see. If I understand correctly, the issue is when popen worker got a copy of `args` here https://github.com/apache/tvm/blob/main/python/tvm/exec/popen_worker.py#L77 and call `timed_rpc_run`, it create new ndarrays as elements of `args`. When `timed_rpc_run` finishes, it doesn't free these ndarrays. This looks like python gc issue? Note that `args` is not a global dictionary, it is a local copy in each worker, seems you don't need to record the indices of ndarrays (in the alternative fix you provided). Did you try set `args=None` or set all elements to None (the predefined arrays are also converted to ndarray from numpy array here in each popen workers locally, which should also be freed) Otherwise the alternative fix looks good to me as it avoids deep copying","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921848437/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921856470","html_url":"https://github.com/apache/tvm/issues/8717#issuecomment-921856470","issue_url":"https://api.github.com/repos/apache/tvm/issues/8717","id":921856470,"node_id":"IC_kwDOBDeBdM428mnW","user":{"login":"Alex-grovety","id":90257244,"node_id":"MDQ6VXNlcjkwMjU3MjQ0","avatar_url":"https://avatars.githubusercontent.com/u/90257244?v=4","gravatar_id":"","url":"https://api.github.com/users/Alex-grovety","html_url":"https://github.com/Alex-grovety","followers_url":"https://api.github.com/users/Alex-grovety/followers","following_url":"https://api.github.com/users/Alex-grovety/following{/other_user}","gists_url":"https://api.github.com/users/Alex-grovety/gists{/gist_id}","starred_url":"https://api.github.com/users/Alex-grovety/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Alex-grovety/subscriptions","organizations_url":"https://api.github.com/users/Alex-grovety/orgs","repos_url":"https://api.github.com/users/Alex-grovety/repos","events_url":"https://api.github.com/users/Alex-grovety/events{/privacy}","received_events_url":"https://api.github.com/users/Alex-grovety/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T14:46:08Z","updated_at":"2021-09-21T08:01:19Z","author_association":"CONTRIBUTOR","body":"If I understand correctly it will be\r\n```\r\nelif layout == \"NHWC\":\r\n    assert kernel_layout == \"HWOI\"\r\n    is_aarch64 = topi.arm_cpu.arm_utils.is_aarch64_arm()\r\n    if is_aarch64 or \"+neon\" in target.mattr:\r\n        strategy.add_implementation(\r\n            wrap_compute_conv2d(topi.arm_cpu.compute_depthwise_conv2d_nhwc),\r\n            wrap_topi_schedule(topi.arm_cpu.schedule_depthwise_conv2d_nhwc),\r\n            name=\"depthwise_conv2d_nhwc.arm_cpu\",\r\n        )\r\n    else:\r\n        strategy.add_implementation(\r\n            wrap_compute_conv2d(topi.nn.depthwise_conv2d_nhwc),\r\n            wrap_topi_schedule(topi.x86.schedule_depthwise_conv2d_nhwc),\r\n            name=\"depthwise_conv2d_nhwc.arm_cpu\",\r\n        )\r\n```\r\ninstead of\r\nhttps://github.com/apache/tvm/blob/02fbaf0ed9120a8f95155e63de42459f230584aa/python/tvm/relay/op/strategy/arm_cpu.py#L198-L204\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921856470/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921889564","html_url":"https://github.com/apache/tvm/issues/8838#issuecomment-921889564","issue_url":"https://api.github.com/repos/apache/tvm/issues/8838","id":921889564,"node_id":"IC_kwDOBDeBdM428usc","user":{"login":"tmoreau89","id":5974488,"node_id":"MDQ6VXNlcjU5NzQ0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5974488?v=4","gravatar_id":"","url":"https://api.github.com/users/tmoreau89","html_url":"https://github.com/tmoreau89","followers_url":"https://api.github.com/users/tmoreau89/followers","following_url":"https://api.github.com/users/tmoreau89/following{/other_user}","gists_url":"https://api.github.com/users/tmoreau89/gists{/gist_id}","starred_url":"https://api.github.com/users/tmoreau89/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmoreau89/subscriptions","organizations_url":"https://api.github.com/users/tmoreau89/orgs","repos_url":"https://api.github.com/users/tmoreau89/repos","events_url":"https://api.github.com/users/tmoreau89/events{/privacy}","received_events_url":"https://api.github.com/users/tmoreau89/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T15:31:51Z","updated_at":"2021-09-17T15:31:51Z","author_association":"CONTRIBUTOR","body":"@quic-sanirudh please go ahead and pick `com.microsoft.DynamicQuantizeMatMul` given that no one else has claimed, it. I can mark you down for it.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921889564/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921934672","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921934672","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921934672,"node_id":"IC_kwDOBDeBdM4285tQ","user":{"login":"manupak","id":61496855,"node_id":"MDQ6VXNlcjYxNDk2ODU1","avatar_url":"https://avatars.githubusercontent.com/u/61496855?v=4","gravatar_id":"","url":"https://api.github.com/users/manupak","html_url":"https://github.com/manupak","followers_url":"https://api.github.com/users/manupak/followers","following_url":"https://api.github.com/users/manupak/following{/other_user}","gists_url":"https://api.github.com/users/manupak/gists{/gist_id}","starred_url":"https://api.github.com/users/manupak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manupak/subscriptions","organizations_url":"https://api.github.com/users/manupak/orgs","repos_url":"https://api.github.com/users/manupak/repos","events_url":"https://api.github.com/users/manupak/events{/privacy}","received_events_url":"https://api.github.com/users/manupak/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T16:40:59Z","updated_at":"2021-09-17T16:43:13Z","author_association":"CONTRIBUTOR","body":"Thanks @tqchen for the explanation of two viewpoints of how we could see the constraints.\r\n\r\nI do agree that we should put more constraints progressively to guide the compiler in the lowering. \r\n\r\nIt is just that the treatment of TVMBAW as a peer to heap and stack seemed not right. In fact one could use TVMBAW to perform heap allocation. My concern was that we are taking a decision way down in the compilation flow where it could have been taken transparently in the IR itself a bit higher.\r\n\r\nI think we are moving there with scopes but it would have been nicer to stick to TVMBAW for now as it is the more general lowering for 'global' and I would not see necessarily that as an orthogonal choice to the list you have mentioned. It just boils to the fact that we just want them to be on stack for mem2reg optimizations. While I dont disagree with the logic of the argument, but wish it was more explicit higher up in the compilation flow. If it was not for mem2reg optimizations, one could simply provide a Arena that could provide the workspace required as it would from the stack -- thus it seemed to me like a better interrim solution until we specialize the scope in the lowering.\r\n\r\nYes, as you suggested the implementation of the target-dependent query for the max alloca size is not particularly challenging, it is just the API that we provide for the user is what we were worried about. This is important especially \"micro\" is not a target really in TVM -- so the short term solution seems like we would need one of the following TargetKind attributes for C and LLVM backends : \r\n\r\nA1 :  --max-stack-alloca-size\r\nA2 :  --max-stack-size\r\nA3 :  --use-backend-alloc-workspace\r\n\r\nSo here ideally from UX point of view, it would be better to give the user A2 argument rather than a constraining the size of single allocation seems like a proxy to control the behaviour of mem2reg transformations. However, that does not match with to behavior controlled by kMaxStackAllocaSize.\r\n\r\nA3 on the other hand set kMaxStackAllocaSize to zero and forcing all the allocates to be serviced by TVMBAW which could be from heap or Arena placed anywhere controlled by the runtime/application.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921934672/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921945722","html_url":"https://github.com/apache/tvm/issues/9022#issuecomment-921945722","issue_url":"https://api.github.com/repos/apache/tvm/issues/9022","id":921945722,"node_id":"IC_kwDOBDeBdM4288Z6","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T16:59:58Z","updated_at":"2021-09-17T16:59:58Z","author_association":"MEMBER","body":"Thanks @manupa-arm. I agree that putting TVMBAW as a peer to heap is not right(that was meant as an example to demonstrate the viewpoint. I do not  necessary want to enforce heap as a peer to TVMBAW).\r\n\r\nFor the case of AOT, however. I think it would still be useful to introduce a specialized scope eventually. So we can place the constraint that the memory is accessible by npu explicitly in the IR.\r\n\r\nWhile there is no micro specific target, we can introduce micro specific tags that set these properties. See https://github.com/apache/tvm/blob/main/src/target/tag.cc#L84 as an example of cuda tags\r\n\r\nI think all three attributes you proposed could work. A1 might be the simplest for now and it won't preclude A2/A3 options in the future.\r\n ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/921945722/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922068729","html_url":"https://github.com/apache/tvm/issues/9037#issuecomment-922068729","issue_url":"https://api.github.com/repos/apache/tvm/issues/9037","id":922068729,"node_id":"IC_kwDOBDeBdM429ab5","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T20:40:10Z","updated_at":"2021-09-17T20:40:10Z","author_association":"MEMBER","body":"If you are asking about PyTorch SiLU, it is already supported. https://github.com/apache/tvm/pull/8753","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922068729/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922071624","html_url":"https://github.com/apache/tvm/pull/9038#issuecomment-922071624","issue_url":"https://api.github.com/repos/apache/tvm/issues/9038","id":922071624,"node_id":"IC_kwDOBDeBdM429bJI","user":{"login":"mbs-octoml","id":87091372,"node_id":"MDQ6VXNlcjg3MDkxMzcy","avatar_url":"https://avatars.githubusercontent.com/u/87091372?v=4","gravatar_id":"","url":"https://api.github.com/users/mbs-octoml","html_url":"https://github.com/mbs-octoml","followers_url":"https://api.github.com/users/mbs-octoml/followers","following_url":"https://api.github.com/users/mbs-octoml/following{/other_user}","gists_url":"https://api.github.com/users/mbs-octoml/gists{/gist_id}","starred_url":"https://api.github.com/users/mbs-octoml/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbs-octoml/subscriptions","organizations_url":"https://api.github.com/users/mbs-octoml/orgs","repos_url":"https://api.github.com/users/mbs-octoml/repos","events_url":"https://api.github.com/users/mbs-octoml/events{/privacy}","received_events_url":"https://api.github.com/users/mbs-octoml/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T20:46:10Z","updated_at":"2021-09-17T20:46:10Z","author_association":"CONTRIBUTOR","body":"@electriclilies @mikepapadim @jroesch Here's part 1. Things to watch out for:\r\n - How to I may device_copy.cc branch from context_analysis.cc?\r\n - Did I go too far with device defaulting?\r\n - All the visitor helpers are needed in follow up but not used here, so sorry it's not obvious why I set things up like that. But suggestion for reducing code dup would be welcome.\r\n - I tried to make the intro comment comprehensive, let me know what needs more detail.\r\n - Anything non-obvious.\r\nThanks!","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922071624/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922072322","html_url":"https://github.com/apache/tvm/pull/9038#issuecomment-922072322","issue_url":"https://api.github.com/repos/apache/tvm/issues/9038","id":922072322,"node_id":"IC_kwDOBDeBdM429bUC","user":{"login":"mbs-octoml","id":87091372,"node_id":"MDQ6VXNlcjg3MDkxMzcy","avatar_url":"https://avatars.githubusercontent.com/u/87091372?v=4","gravatar_id":"","url":"https://api.github.com/users/mbs-octoml","html_url":"https://github.com/mbs-octoml","followers_url":"https://api.github.com/users/mbs-octoml/followers","following_url":"https://api.github.com/users/mbs-octoml/following{/other_user}","gists_url":"https://api.github.com/users/mbs-octoml/gists{/gist_id}","starred_url":"https://api.github.com/users/mbs-octoml/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbs-octoml/subscriptions","organizations_url":"https://api.github.com/users/mbs-octoml/orgs","repos_url":"https://api.github.com/users/mbs-octoml/repos","events_url":"https://api.github.com/users/mbs-octoml/events{/privacy}","received_events_url":"https://api.github.com/users/mbs-octoml/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T20:47:37Z","updated_at":"2021-09-17T20:47:37Z","author_association":"CONTRIBUTOR","body":"Oh, and this is on top of #9012 which is still in-flight, sorry about that.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922072322/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922084902","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-922084902","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":922084902,"node_id":"IC_kwDOBDeBdM429eYm","user":{"login":"echuraev","id":5525113,"node_id":"MDQ6VXNlcjU1MjUxMTM=","avatar_url":"https://avatars.githubusercontent.com/u/5525113?v=4","gravatar_id":"","url":"https://api.github.com/users/echuraev","html_url":"https://github.com/echuraev","followers_url":"https://api.github.com/users/echuraev/followers","following_url":"https://api.github.com/users/echuraev/following{/other_user}","gists_url":"https://api.github.com/users/echuraev/gists{/gist_id}","starred_url":"https://api.github.com/users/echuraev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/echuraev/subscriptions","organizations_url":"https://api.github.com/users/echuraev/orgs","repos_url":"https://api.github.com/users/echuraev/repos","events_url":"https://api.github.com/users/echuraev/events{/privacy}","received_events_url":"https://api.github.com/users/echuraev/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T21:12:57Z","updated_at":"2021-09-17T21:12:57Z","author_association":"CONTRIBUTOR","body":"> Did you try set `args=None` or set all elements to None (the predefined arrays are also converted to ndarray from numpy array here in each popen workers locally, which should also be freed) Otherwise the alternative fix looks good to me as it avoids deep copying\r\n\r\nYes, I did it and it works fine. I wrote this code with indices just because I wasn't sure that I can set `None` to the args which were predefined. In this case, if you are ok with alternative fix (with setting `None` to arguments) then, I'll update this PR tomorrow. Thank you very much. \r\nOnly one thing that I don't really like in this fix is that we need to set these elements to `None` in both cases (after executed function and also in case when exception was generated).\r\n\r\n","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922084902/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922087058","html_url":"https://github.com/apache/tvm/pull/9032#issuecomment-922087058","issue_url":"https://api.github.com/repos/apache/tvm/issues/9032","id":922087058,"node_id":"IC_kwDOBDeBdM429e6S","user":{"login":"vinx13","id":7195739,"node_id":"MDQ6VXNlcjcxOTU3Mzk=","avatar_url":"https://avatars.githubusercontent.com/u/7195739?v=4","gravatar_id":"","url":"https://api.github.com/users/vinx13","html_url":"https://github.com/vinx13","followers_url":"https://api.github.com/users/vinx13/followers","following_url":"https://api.github.com/users/vinx13/following{/other_user}","gists_url":"https://api.github.com/users/vinx13/gists{/gist_id}","starred_url":"https://api.github.com/users/vinx13/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vinx13/subscriptions","organizations_url":"https://api.github.com/users/vinx13/orgs","repos_url":"https://api.github.com/users/vinx13/repos","events_url":"https://api.github.com/users/vinx13/events{/privacy}","received_events_url":"https://api.github.com/users/vinx13/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T21:17:42Z","updated_at":"2021-09-17T21:19:02Z","author_association":"MEMBER","body":"Alternatively we can try creating a local array without deep copy. I think the issue if the arguments sent to Popen workers are not freed immediately (not sure why), if so creating  another array should work\r\n```\r\nloc_args = []\r\nfor arg in args:\r\n  if arg is None:\r\n     loc_args.append(empty_array)\r\n  else:\r\n     loc_args.append(ndarray.array(arg))\r\n```","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922087058/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922114683","html_url":"https://github.com/apache/tvm/pull/9026#issuecomment-922114683","issue_url":"https://api.github.com/repos/apache/tvm/issues/9026","id":922114683,"node_id":"IC_kwDOBDeBdM429lp7","user":{"login":"mehrdadh","id":6409345,"node_id":"MDQ6VXNlcjY0MDkzNDU=","avatar_url":"https://avatars.githubusercontent.com/u/6409345?v=4","gravatar_id":"","url":"https://api.github.com/users/mehrdadh","html_url":"https://github.com/mehrdadh","followers_url":"https://api.github.com/users/mehrdadh/followers","following_url":"https://api.github.com/users/mehrdadh/following{/other_user}","gists_url":"https://api.github.com/users/mehrdadh/gists{/gist_id}","starred_url":"https://api.github.com/users/mehrdadh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mehrdadh/subscriptions","organizations_url":"https://api.github.com/users/mehrdadh/orgs","repos_url":"https://api.github.com/users/mehrdadh/repos","events_url":"https://api.github.com/users/mehrdadh/events{/privacy}","received_events_url":"https://api.github.com/users/mehrdadh/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T22:27:35Z","updated_at":"2021-09-17T22:27:35Z","author_association":"MEMBER","body":"@gromero thanks for the review. I addressed the comments. PTAL.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922114683/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922117723","html_url":"https://github.com/apache/tvm/issues/8838#issuecomment-922117723","issue_url":"https://api.github.com/repos/apache/tvm/issues/8838","id":922117723,"node_id":"IC_kwDOBDeBdM429mZb","user":{"login":"tmoreau89","id":5974488,"node_id":"MDQ6VXNlcjU5NzQ0ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5974488?v=4","gravatar_id":"","url":"https://api.github.com/users/tmoreau89","html_url":"https://github.com/tmoreau89","followers_url":"https://api.github.com/users/tmoreau89/followers","following_url":"https://api.github.com/users/tmoreau89/following{/other_user}","gists_url":"https://api.github.com/users/tmoreau89/gists{/gist_id}","starred_url":"https://api.github.com/users/tmoreau89/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmoreau89/subscriptions","organizations_url":"https://api.github.com/users/tmoreau89/orgs","repos_url":"https://api.github.com/users/tmoreau89/repos","events_url":"https://api.github.com/users/tmoreau89/events{/privacy}","received_events_url":"https://api.github.com/users/tmoreau89/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-17T22:37:51Z","updated_at":"2021-09-17T22:37:51Z","author_association":"CONTRIBUTOR","body":"And thanks to @arangasa , https://github.com/apache/tvm/pull/9028 has been merged! `com.microsoft.QLinearSigmoid` is now supported.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922117723/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922227084","html_url":"https://github.com/apache/tvm/issues/9037#issuecomment-922227084","issue_url":"https://api.github.com/repos/apache/tvm/issues/9037","id":922227084,"node_id":"IC_kwDOBDeBdM42-BGM","user":{"login":"lucasjinreal","id":21303438,"node_id":"MDQ6VXNlcjIxMzAzNDM4","avatar_url":"https://avatars.githubusercontent.com/u/21303438?v=4","gravatar_id":"","url":"https://api.github.com/users/lucasjinreal","html_url":"https://github.com/lucasjinreal","followers_url":"https://api.github.com/users/lucasjinreal/followers","following_url":"https://api.github.com/users/lucasjinreal/following{/other_user}","gists_url":"https://api.github.com/users/lucasjinreal/gists{/gist_id}","starred_url":"https://api.github.com/users/lucasjinreal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lucasjinreal/subscriptions","organizations_url":"https://api.github.com/users/lucasjinreal/orgs","repos_url":"https://api.github.com/users/lucasjinreal/repos","events_url":"https://api.github.com/users/lucasjinreal/events{/privacy}","received_events_url":"https://api.github.com/users/lucasjinreal/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-18T06:45:24Z","updated_at":"2021-09-18T06:45:24Z","author_association":"NONE","body":"@masahi Why I build master serveral days ago and I can not pass silu op when tvm build from torchscript model?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922227084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922227116","html_url":"https://github.com/apache/tvm/issues/9037#issuecomment-922227116","issue_url":"https://api.github.com/repos/apache/tvm/issues/9037","id":922227116,"node_id":"IC_kwDOBDeBdM42-BGs","user":{"login":"lucasjinreal","id":21303438,"node_id":"MDQ6VXNlcjIxMzAzNDM4","avatar_url":"https://avatars.githubusercontent.com/u/21303438?v=4","gravatar_id":"","url":"https://api.github.com/users/lucasjinreal","html_url":"https://github.com/lucasjinreal","followers_url":"https://api.github.com/users/lucasjinreal/followers","following_url":"https://api.github.com/users/lucasjinreal/following{/other_user}","gists_url":"https://api.github.com/users/lucasjinreal/gists{/gist_id}","starred_url":"https://api.github.com/users/lucasjinreal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lucasjinreal/subscriptions","organizations_url":"https://api.github.com/users/lucasjinreal/orgs","repos_url":"https://api.github.com/users/lucasjinreal/repos","events_url":"https://api.github.com/users/lucasjinreal/events{/privacy}","received_events_url":"https://api.github.com/users/lucasjinreal/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-18T06:45:37Z","updated_at":"2021-09-18T06:45:37Z","author_association":"NONE","body":"this MR is 14 Aug","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922227116/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922240749","html_url":"https://github.com/apache/tvm/pull/9031#issuecomment-922240749","issue_url":"https://api.github.com/repos/apache/tvm/issues/9031","id":922240749,"node_id":"IC_kwDOBDeBdM42-Ebt","user":{"login":"mikepapadim","id":8652854,"node_id":"MDQ6VXNlcjg2NTI4NTQ=","avatar_url":"https://avatars.githubusercontent.com/u/8652854?v=4","gravatar_id":"","url":"https://api.github.com/users/mikepapadim","html_url":"https://github.com/mikepapadim","followers_url":"https://api.github.com/users/mikepapadim/followers","following_url":"https://api.github.com/users/mikepapadim/following{/other_user}","gists_url":"https://api.github.com/users/mikepapadim/gists{/gist_id}","starred_url":"https://api.github.com/users/mikepapadim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikepapadim/subscriptions","organizations_url":"https://api.github.com/users/mikepapadim/orgs","repos_url":"https://api.github.com/users/mikepapadim/repos","events_url":"https://api.github.com/users/mikepapadim/events{/privacy}","received_events_url":"https://api.github.com/users/mikepapadim/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-18T08:31:36Z","updated_at":"2021-09-18T08:31:36Z","author_association":"CONTRIBUTOR","body":"PTAL","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922240749/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922334352","html_url":"https://github.com/apache/tvm/issues/9036#issuecomment-922334352","issue_url":"https://api.github.com/repos/apache/tvm/issues/9036","id":922334352,"node_id":"IC_kwDOBDeBdM42-bSQ","user":{"login":"areusch","id":532957,"node_id":"MDQ6VXNlcjUzMjk1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/532957?v=4","gravatar_id":"","url":"https://api.github.com/users/areusch","html_url":"https://github.com/areusch","followers_url":"https://api.github.com/users/areusch/followers","following_url":"https://api.github.com/users/areusch/following{/other_user}","gists_url":"https://api.github.com/users/areusch/gists{/gist_id}","starred_url":"https://api.github.com/users/areusch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areusch/subscriptions","organizations_url":"https://api.github.com/users/areusch/orgs","repos_url":"https://api.github.com/users/areusch/repos","events_url":"https://api.github.com/users/areusch/events{/privacy}","received_events_url":"https://api.github.com/users/areusch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-18T16:14:44Z","updated_at":"2021-09-18T16:14:44Z","author_association":"CONTRIBUTOR","body":"cc @Mousius @manupa-arm @u99127 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922334352/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922367320","html_url":"https://github.com/apache/tvm/pull/9043#issuecomment-922367320","issue_url":"https://api.github.com/repos/apache/tvm/issues/9043","id":922367320,"node_id":"IC_kwDOBDeBdM42-jVY","user":{"login":"comaniac","id":8262694,"node_id":"MDQ6VXNlcjgyNjI2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/8262694?v=4","gravatar_id":"","url":"https://api.github.com/users/comaniac","html_url":"https://github.com/comaniac","followers_url":"https://api.github.com/users/comaniac/followers","following_url":"https://api.github.com/users/comaniac/following{/other_user}","gists_url":"https://api.github.com/users/comaniac/gists{/gist_id}","starred_url":"https://api.github.com/users/comaniac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/comaniac/subscriptions","organizations_url":"https://api.github.com/users/comaniac/orgs","repos_url":"https://api.github.com/users/comaniac/repos","events_url":"https://api.github.com/users/comaniac/events{/privacy}","received_events_url":"https://api.github.com/users/comaniac/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-18T20:12:59Z","updated_at":"2021-09-18T20:12:59Z","author_association":"CONTRIBUTOR","body":"Thanks for the fix. Could you please finish the PR description and add a test case?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922367320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922398848","html_url":"https://github.com/apache/tvm/pull/9041#issuecomment-922398848","issue_url":"https://api.github.com/repos/apache/tvm/issues/9041","id":922398848,"node_id":"IC_kwDOBDeBdM42-rCA","user":{"login":"spectrometerHBH","id":32121147,"node_id":"MDQ6VXNlcjMyMTIxMTQ3","avatar_url":"https://avatars.githubusercontent.com/u/32121147?v=4","gravatar_id":"","url":"https://api.github.com/users/spectrometerHBH","html_url":"https://github.com/spectrometerHBH","followers_url":"https://api.github.com/users/spectrometerHBH/followers","following_url":"https://api.github.com/users/spectrometerHBH/following{/other_user}","gists_url":"https://api.github.com/users/spectrometerHBH/gists{/gist_id}","starred_url":"https://api.github.com/users/spectrometerHBH/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spectrometerHBH/subscriptions","organizations_url":"https://api.github.com/users/spectrometerHBH/orgs","repos_url":"https://api.github.com/users/spectrometerHBH/repos","events_url":"https://api.github.com/users/spectrometerHBH/events{/privacy}","received_events_url":"https://api.github.com/users/spectrometerHBH/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-19T01:28:59Z","updated_at":"2021-09-19T01:28:59Z","author_association":"CONTRIBUTOR","body":"cc @tqchen @junrushao1994 @MasterJH5574 ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922398848/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922407602","html_url":"https://github.com/apache/tvm/pull/9043#issuecomment-922407602","issue_url":"https://api.github.com/repos/apache/tvm/issues/9043","id":922407602,"node_id":"IC_kwDOBDeBdM42-tKy","user":{"login":"sunwayforever","id":631773,"node_id":"MDQ6VXNlcjYzMTc3Mw==","avatar_url":"https://avatars.githubusercontent.com/u/631773?v=4","gravatar_id":"","url":"https://api.github.com/users/sunwayforever","html_url":"https://github.com/sunwayforever","followers_url":"https://api.github.com/users/sunwayforever/followers","following_url":"https://api.github.com/users/sunwayforever/following{/other_user}","gists_url":"https://api.github.com/users/sunwayforever/gists{/gist_id}","starred_url":"https://api.github.com/users/sunwayforever/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sunwayforever/subscriptions","organizations_url":"https://api.github.com/users/sunwayforever/orgs","repos_url":"https://api.github.com/users/sunwayforever/repos","events_url":"https://api.github.com/users/sunwayforever/events{/privacy}","received_events_url":"https://api.github.com/users/sunwayforever/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-19T03:04:00Z","updated_at":"2021-09-19T03:17:30Z","author_association":"CONTRIBUTOR","body":"> Thanks for the fix. Could you please finish the PR description and add a test case?\r\n\r\n@comaniac thanks for your reply.  is there any guideline for `adding a test case`?  should I just add some more tests in `test/python/relay/test_json_runtime.py`?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922407602/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922422357","html_url":"https://github.com/apache/tvm/pull/9043#issuecomment-922422357","issue_url":"https://api.github.com/repos/apache/tvm/issues/9043","id":922422357,"node_id":"IC_kwDOBDeBdM42-wxV","user":{"login":"comaniac","id":8262694,"node_id":"MDQ6VXNlcjgyNjI2OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/8262694?v=4","gravatar_id":"","url":"https://api.github.com/users/comaniac","html_url":"https://github.com/comaniac","followers_url":"https://api.github.com/users/comaniac/followers","following_url":"https://api.github.com/users/comaniac/following{/other_user}","gists_url":"https://api.github.com/users/comaniac/gists{/gist_id}","starred_url":"https://api.github.com/users/comaniac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/comaniac/subscriptions","organizations_url":"https://api.github.com/users/comaniac/orgs","repos_url":"https://api.github.com/users/comaniac/repos","events_url":"https://api.github.com/users/comaniac/events{/privacy}","received_events_url":"https://api.github.com/users/comaniac/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-19T06:23:30Z","updated_at":"2021-09-19T06:23:30Z","author_association":"CONTRIBUTOR","body":"> > Thanks for the fix. Could you please finish the PR description and add a test case?\r\n> \r\n> @comaniac thanks for your reply. is there any guideline for `adding a test case`? should I just add some more tests in `test/python/relay/test_json_runtime.py`?\r\n\r\nYes. Basically you just need to add a new test or improve an existing test that will fail without this PR, so that we could make sure the fix covered by this PR won't be broken in the future.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922422357/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922431314","html_url":"https://github.com/apache/tvm/pull/9041#issuecomment-922431314","issue_url":"https://api.github.com/repos/apache/tvm/issues/9041","id":922431314,"node_id":"IC_kwDOBDeBdM42-y9S","user":{"login":"junrushao","id":22515877,"node_id":"MDQ6VXNlcjIyNTE1ODc3","avatar_url":"https://avatars.githubusercontent.com/u/22515877?v=4","gravatar_id":"","url":"https://api.github.com/users/junrushao","html_url":"https://github.com/junrushao","followers_url":"https://api.github.com/users/junrushao/followers","following_url":"https://api.github.com/users/junrushao/following{/other_user}","gists_url":"https://api.github.com/users/junrushao/gists{/gist_id}","starred_url":"https://api.github.com/users/junrushao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junrushao/subscriptions","organizations_url":"https://api.github.com/users/junrushao/orgs","repos_url":"https://api.github.com/users/junrushao/repos","events_url":"https://api.github.com/users/junrushao/events{/privacy}","received_events_url":"https://api.github.com/users/junrushao/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-19T07:50:38Z","updated_at":"2021-09-19T07:50:38Z","author_association":"MEMBER","body":"Sorry I have a deadline on Monday...Will review do after that","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922431314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922448878","html_url":"https://github.com/apache/tvm/pull/8447#issuecomment-922448878","issue_url":"https://api.github.com/repos/apache/tvm/issues/8447","id":922448878,"node_id":"IC_kwDOBDeBdM42-3Pu","user":{"login":"vvchernov","id":28704584,"node_id":"MDQ6VXNlcjI4NzA0NTg0","avatar_url":"https://avatars.githubusercontent.com/u/28704584?v=4","gravatar_id":"","url":"https://api.github.com/users/vvchernov","html_url":"https://github.com/vvchernov","followers_url":"https://api.github.com/users/vvchernov/followers","following_url":"https://api.github.com/users/vvchernov/following{/other_user}","gists_url":"https://api.github.com/users/vvchernov/gists{/gist_id}","starred_url":"https://api.github.com/users/vvchernov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vvchernov/subscriptions","organizations_url":"https://api.github.com/users/vvchernov/orgs","repos_url":"https://api.github.com/users/vvchernov/repos","events_url":"https://api.github.com/users/vvchernov/events{/privacy}","received_events_url":"https://api.github.com/users/vvchernov/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-19T10:14:29Z","updated_at":"2021-09-19T10:14:29Z","author_association":"CONTRIBUTOR","body":"Hello @cheimu! Dropout is not supported on TVM side. Therefore LSTM with dropout does not work. In general it is so because some people think that dropout is used for training only, but I know that for some TTS model it can be used for inference. Unfortunately the current state is that dropout op is dummy, it has attributes but does not have compute implementation. I do not know when dropout will be supported on TVM side.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922448878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922472970","html_url":"https://github.com/apache/tvm/pull/9016#issuecomment-922472970","issue_url":"https://api.github.com/repos/apache/tvm/issues/9016","id":922472970,"node_id":"IC_kwDOBDeBdM42-9IK","user":{"login":"tqchen","id":2577440,"node_id":"MDQ6VXNlcjI1Nzc0NDA=","avatar_url":"https://avatars.githubusercontent.com/u/2577440?v=4","gravatar_id":"","url":"https://api.github.com/users/tqchen","html_url":"https://github.com/tqchen","followers_url":"https://api.github.com/users/tqchen/followers","following_url":"https://api.github.com/users/tqchen/following{/other_user}","gists_url":"https://api.github.com/users/tqchen/gists{/gist_id}","starred_url":"https://api.github.com/users/tqchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tqchen/subscriptions","organizations_url":"https://api.github.com/users/tqchen/orgs","repos_url":"https://api.github.com/users/tqchen/repos","events_url":"https://api.github.com/users/tqchen/events{/privacy}","received_events_url":"https://api.github.com/users/tqchen/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-19T13:21:15Z","updated_at":"2021-09-19T13:21:15Z","author_association":"MEMBER","body":"Thanks @wrongtest ! This PR is now merged","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922472970/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922508052","html_url":"https://github.com/apache/tvm/issues/8979#issuecomment-922508052","issue_url":"https://api.github.com/repos/apache/tvm/issues/8979","id":922508052,"node_id":"IC_kwDOBDeBdM42_FsU","user":{"login":"areusch","id":532957,"node_id":"MDQ6VXNlcjUzMjk1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/532957?v=4","gravatar_id":"","url":"https://api.github.com/users/areusch","html_url":"https://github.com/areusch","followers_url":"https://api.github.com/users/areusch/followers","following_url":"https://api.github.com/users/areusch/following{/other_user}","gists_url":"https://api.github.com/users/areusch/gists{/gist_id}","starred_url":"https://api.github.com/users/areusch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areusch/subscriptions","organizations_url":"https://api.github.com/users/areusch/orgs","repos_url":"https://api.github.com/users/areusch/repos","events_url":"https://api.github.com/users/areusch/events{/privacy}","received_events_url":"https://api.github.com/users/areusch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-19T17:24:11Z","updated_at":"2021-09-19T17:24:11Z","author_association":"CONTRIBUTOR","body":"@ganler @junrushao1994 can we close this as dupe of https://github.com/apache/tvm/issues/5318 then?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922508052/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922509741","html_url":"https://github.com/apache/tvm/issues/8979#issuecomment-922509741","issue_url":"https://api.github.com/repos/apache/tvm/issues/8979","id":922509741,"node_id":"IC_kwDOBDeBdM42_GGt","user":{"login":"ganler","id":38074777,"node_id":"MDQ6VXNlcjM4MDc0Nzc3","avatar_url":"https://avatars.githubusercontent.com/u/38074777?v=4","gravatar_id":"","url":"https://api.github.com/users/ganler","html_url":"https://github.com/ganler","followers_url":"https://api.github.com/users/ganler/followers","following_url":"https://api.github.com/users/ganler/following{/other_user}","gists_url":"https://api.github.com/users/ganler/gists{/gist_id}","starred_url":"https://api.github.com/users/ganler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ganler/subscriptions","organizations_url":"https://api.github.com/users/ganler/orgs","repos_url":"https://api.github.com/users/ganler/repos","events_url":"https://api.github.com/users/ganler/events{/privacy}","received_events_url":"https://api.github.com/users/ganler/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-19T17:36:56Z","updated_at":"2021-09-19T17:36:56Z","author_association":"CONTRIBUTOR","body":"> @ganler @junrushao1994 can we close this as dupe of https://github.com/apache/tvm/issues/5318 then?\n\nYes, we can.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922509741/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922517610","html_url":"https://github.com/apache/tvm/issues/8953#issuecomment-922517610","issue_url":"https://api.github.com/repos/apache/tvm/issues/8953","id":922517610,"node_id":"IC_kwDOBDeBdM42_IBq","user":{"login":"areusch","id":532957,"node_id":"MDQ6VXNlcjUzMjk1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/532957?v=4","gravatar_id":"","url":"https://api.github.com/users/areusch","html_url":"https://github.com/areusch","followers_url":"https://api.github.com/users/areusch/followers","following_url":"https://api.github.com/users/areusch/following{/other_user}","gists_url":"https://api.github.com/users/areusch/gists{/gist_id}","starred_url":"https://api.github.com/users/areusch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areusch/subscriptions","organizations_url":"https://api.github.com/users/areusch/orgs","repos_url":"https://api.github.com/users/areusch/repos","events_url":"https://api.github.com/users/areusch/events{/privacy}","received_events_url":"https://api.github.com/users/areusch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-19T18:38:16Z","updated_at":"2021-09-19T18:38:16Z","author_association":"CONTRIBUTOR","body":"cc @mehrdadh could you take a look?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922517610/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922603651","html_url":"https://github.com/apache/tvm/issues/8540#issuecomment-922603651","issue_url":"https://api.github.com/repos/apache/tvm/issues/8540","id":922603651,"node_id":"IC_kwDOBDeBdM42_dCD","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-20T02:42:23Z","updated_at":"2021-09-20T02:42:23Z","author_association":"MEMBER","body":"I've just hit this issue when running a fp16 model, I'll send a fix. Thanks @lazycal for reporting and suggesting a solution.  ","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922603651/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922604881","html_url":"https://github.com/apache/tvm/issues/8759#issuecomment-922604881","issue_url":"https://api.github.com/repos/apache/tvm/issues/8759","id":922604881,"node_id":"IC_kwDOBDeBdM42_dVR","user":{"login":"masahi","id":1776403,"node_id":"MDQ6VXNlcjE3NzY0MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1776403?v=4","gravatar_id":"","url":"https://api.github.com/users/masahi","html_url":"https://github.com/masahi","followers_url":"https://api.github.com/users/masahi/followers","following_url":"https://api.github.com/users/masahi/following{/other_user}","gists_url":"https://api.github.com/users/masahi/gists{/gist_id}","starred_url":"https://api.github.com/users/masahi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/masahi/subscriptions","organizations_url":"https://api.github.com/users/masahi/orgs","repos_url":"https://api.github.com/users/masahi/repos","events_url":"https://api.github.com/users/masahi/events{/privacy}","received_events_url":"https://api.github.com/users/masahi/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-20T02:50:50Z","updated_at":"2021-09-20T02:50:50Z","author_association":"MEMBER","body":"Thanks, I'll take a look at this.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922604881/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922641350","html_url":"https://github.com/apache/tvm/pull/8739#issuecomment-922641350","issue_url":"https://api.github.com/repos/apache/tvm/issues/8739","id":922641350,"node_id":"IC_kwDOBDeBdM42_mPG","user":{"login":"areusch","id":532957,"node_id":"MDQ6VXNlcjUzMjk1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/532957?v=4","gravatar_id":"","url":"https://api.github.com/users/areusch","html_url":"https://github.com/areusch","followers_url":"https://api.github.com/users/areusch/followers","following_url":"https://api.github.com/users/areusch/following{/other_user}","gists_url":"https://api.github.com/users/areusch/gists{/gist_id}","starred_url":"https://api.github.com/users/areusch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areusch/subscriptions","organizations_url":"https://api.github.com/users/areusch/orgs","repos_url":"https://api.github.com/users/areusch/repos","events_url":"https://api.github.com/users/areusch/events{/privacy}","received_events_url":"https://api.github.com/users/areusch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-20T05:09:44Z","updated_at":"2021-09-20T05:09:44Z","author_association":"CONTRIBUTOR","body":"@gromero could you comment on this one?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922641350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922644376","html_url":"https://github.com/apache/tvm/issues/8976#issuecomment-922644376","issue_url":"https://api.github.com/repos/apache/tvm/issues/8976","id":922644376,"node_id":"IC_kwDOBDeBdM42_m-Y","user":{"login":"areusch","id":532957,"node_id":"MDQ6VXNlcjUzMjk1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/532957?v=4","gravatar_id":"","url":"https://api.github.com/users/areusch","html_url":"https://github.com/areusch","followers_url":"https://api.github.com/users/areusch/followers","following_url":"https://api.github.com/users/areusch/following{/other_user}","gists_url":"https://api.github.com/users/areusch/gists{/gist_id}","starred_url":"https://api.github.com/users/areusch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areusch/subscriptions","organizations_url":"https://api.github.com/users/areusch/orgs","repos_url":"https://api.github.com/users/areusch/repos","events_url":"https://api.github.com/users/areusch/events{/privacy}","received_events_url":"https://api.github.com/users/areusch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-20T05:18:58Z","updated_at":"2021-09-20T05:18:58Z","author_association":"CONTRIBUTOR","body":"Just checking--by \"stable\" for the \"command line driver interface,\" does that mean \"someone should write a script and presume we won't change the command syntax?\"\r\n\r\nFor µTVM we could add:\r\n- microTVM Project API -> initial support\r\n- microTVM AOT executor -> initial support\r\n- microTVM platforms: Zephyr, Arduino -> initial support\r\n\r\nI'd like us to avoid using \"uTVM\" to refer to microTVM in the release notes and just spell out the word \"micro\" instead. While u is still a common abbreviation for mu, it's not necessarily widely known. We've renamed most occurrences of uTVM inside the codebase to avoid confusion.","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922644376/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922654187","html_url":"https://github.com/apache/tvm/pull/9010#issuecomment-922654187","issue_url":"https://api.github.com/repos/apache/tvm/issues/9010","id":922654187,"node_id":"IC_kwDOBDeBdM42_pXr","user":{"login":"areusch","id":532957,"node_id":"MDQ6VXNlcjUzMjk1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/532957?v=4","gravatar_id":"","url":"https://api.github.com/users/areusch","html_url":"https://github.com/areusch","followers_url":"https://api.github.com/users/areusch/followers","following_url":"https://api.github.com/users/areusch/following{/other_user}","gists_url":"https://api.github.com/users/areusch/gists{/gist_id}","starred_url":"https://api.github.com/users/areusch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areusch/subscriptions","organizations_url":"https://api.github.com/users/areusch/orgs","repos_url":"https://api.github.com/users/areusch/repos","events_url":"https://api.github.com/users/areusch/events{/privacy}","received_events_url":"https://api.github.com/users/areusch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-20T06:00:03Z","updated_at":"2021-09-20T06:00:03Z","author_association":"CONTRIBUTOR","body":"sorry i missed this @tmoreau89 @kparzysz-quic . i think this makes sense for now. it seems like in the post-fused-IRModule world, we could do some analysis of the calling/called function to eliminate this limitation. what do you think? also, seems like we should potentially document the TVM port in a README/docs.tvm.ai somewhere. what are your thoughts about that?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922654187/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922657430","html_url":"https://github.com/apache/tvm/pull/8955#issuecomment-922657430","issue_url":"https://api.github.com/repos/apache/tvm/issues/8955","id":922657430,"node_id":"IC_kwDOBDeBdM42_qKW","user":{"login":"areusch","id":532957,"node_id":"MDQ6VXNlcjUzMjk1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/532957?v=4","gravatar_id":"","url":"https://api.github.com/users/areusch","html_url":"https://github.com/areusch","followers_url":"https://api.github.com/users/areusch/followers","following_url":"https://api.github.com/users/areusch/following{/other_user}","gists_url":"https://api.github.com/users/areusch/gists{/gist_id}","starred_url":"https://api.github.com/users/areusch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areusch/subscriptions","organizations_url":"https://api.github.com/users/areusch/orgs","repos_url":"https://api.github.com/users/areusch/repos","events_url":"https://api.github.com/users/areusch/events{/privacy}","received_events_url":"https://api.github.com/users/areusch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-20T06:06:38Z","updated_at":"2021-09-20T06:06:38Z","author_association":"CONTRIBUTOR","body":"@kparzysz-quic does my request seem reasonable to you?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922657430/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922659340","html_url":"https://github.com/apache/tvm/issues/8717#issuecomment-922659340","issue_url":"https://api.github.com/repos/apache/tvm/issues/8717","id":922659340,"node_id":"IC_kwDOBDeBdM42_qoM","user":{"login":"areusch","id":532957,"node_id":"MDQ6VXNlcjUzMjk1Nw==","avatar_url":"https://avatars.githubusercontent.com/u/532957?v=4","gravatar_id":"","url":"https://api.github.com/users/areusch","html_url":"https://github.com/areusch","followers_url":"https://api.github.com/users/areusch/followers","following_url":"https://api.github.com/users/areusch/following{/other_user}","gists_url":"https://api.github.com/users/areusch/gists{/gist_id}","starred_url":"https://api.github.com/users/areusch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areusch/subscriptions","organizations_url":"https://api.github.com/users/areusch/orgs","repos_url":"https://api.github.com/users/areusch/repos","events_url":"https://api.github.com/users/areusch/events{/privacy}","received_events_url":"https://api.github.com/users/areusch/received_events","type":"User","user_view_type":"public","site_admin":false},"created_at":"2021-09-20T06:10:25Z","updated_at":"2021-09-20T06:10:44Z","author_association":"CONTRIBUTOR","body":"@alex-grovety I think that looks correct to me when used with your branch, but perhaps @manupa-arm or @Mousius could also take a look?","reactions":{"url":"https://api.github.com/repos/apache/tvm/issues/comments/922659340/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]